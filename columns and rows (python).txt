nV = 4
INF = "INF"

def printMatrix(matrix, numRows, startCol, endCol):
    print("Name\t", end="")
    for i in range(startCol, endCol + 1):
        print(f"Grade {i}\t", end="")
    print()

    for i in range(numRows):
        print(matrix[i][0], end="\t")
        for j in range(startCol, endCol + 1):
            print(matrix[i][j], end="\t")
        print()

def floydWarshall(graph):
    matrix = [[None for _ in range(nV)] for _ in range(nV)]

    for i in range(nV):
        for j in range(nV):
            matrix[i][j] = graph[i][j]

    for k in range(nV):
        for i in range(nV):
            for j in range(nV):
                if (
                    matrix[i][k] != INF
                    and matrix[k][j] != INF
                    and matrix[i][k] + matrix[k][j] < matrix[i][j]
                ):
                    matrix[i][j] = matrix[i][k] + matrix[k][j]

    numRows = int(input("Enter the number of rows to display: "))
    startCol = int(input(f"Enter the starting column (1-{nV - 1}): "))
    endCol = int(input(f"Enter the ending column (1-{nV - 1}): "))

    printMatrix(matrix, numRows, startCol, endCol)

if __name__ == "__main__":
    vertexNames = ["1006679B", "79986679B", "10010079B", "06679B"]
    graph = [
        ["10066", "1006679B", "100", INF],
        ["79", "79986679B", "7998", INF],
        ["100", "100", "100", INF],
        ["066", "06679B", "0", INF],
    ]

    # Assigning vertex names to the first column
    for i in range(nV):
        graph[i][0] = vertexNames[i]

    floydWarshall(graph)
