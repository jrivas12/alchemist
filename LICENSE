                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

=======================================================================
APPENDIX:

   This repository contains the following C++, C, header, text, and configuration
   source files. They are provided under the Apache License, Version 2.0.  
   Titles are preserved as-is. Where a file name suggests coursework, homework,  
   or exams, no additional description is provided.

   ────────────────────────────────
   C++ MAIN AND IMPLEMENTATION FILES
   ────────────────────────────────
   - account.cpp                         : Implements account class logic for banking and transactions.
   - account_class_demo.cpp              : Demonstration of object-oriented account management.
   - airplaine_in_c.c                    : C-based airline management and ticket simulation.
   - array_stats_and_password.cpp        : Generates random data arrays and password strings using templates.
   - atm.cpp                             : Basic ATM operations with deposits, withdrawals, and balance checks.
   - Bank.cpp                            : Core banking logic with encapsulated financial operations.
   - Bubblesort_Linked_List.cpp          : Bubble sort demonstration using linked list nodes.
   - Bubblesort_Linked_List_2.cpp        : Alternate bubble sort implementation for linked list practice.
   - calculate_Radius(other).cpp         : Radius, area, and circumference calculations.
   - car.cpp                             : Class demonstration for vehicle and attribute management.
   - circuit_schematic.cpp               : Simulates circuit relationships and schematic components.
   - class_grade_averager.cpp            : Computes and averages student grades from input data.
   - collatz_sequence.cpp                : Displays iterative Collatz (3n + 1) sequence computations.
   - color_mixer.cpp                     : RGB color mixing arithmetic for visualization exercises.
   - coin.cpp                            : Coin toss probability and randomization simulation.
   - credit_Menu_Terminal.cpp            : Menu-driven terminal program for credit management.
   - date_class.cpp                      : Class implementation handling formatted date input and validation.
   - ellipses.cpp                        : Calculates ellipse area and eccentricity; geometry practice.
   - ellipses(centered).cpp              : Enhanced centered-ellipse computation program.
   - enchanted_forest_game.cpp           : Text-based exploration adventure with node navigation.
   - even_odd_checker.cpp                : Determines parity of integer input values.
   - fig09_22.cpp                        : Textbook-aligned sample for structure or inheritance demonstration.
   - functions_Average_Grade.c           : Procedural C program to compute average grades.
   - grade_Calculator_Menu.cpp           : Interactive grade calculator with multi-menu structure.
   - grade_File_CATBash.c                : C file parser that handles structured grade data.
   - grade_Templete.c                    : C template illustrating grade input/output logic.
   - grade_subjects_ATOMIC1.c            : Academic subject grading calculation exercise.
   - graph_traversal.cpp                 : Demonstrates BFS/DFS traversal of adjacency graphs.
   - hashing_bloom_filters.cpp           : Implements hashing and Bloom filter data-structure logic.
   - Hare.cpp                            : OOP race participant class for tortoise-and-hare simulations.
   - highway.cpp                         : Simulates transportation network or vehicle path management.
   - history.cpp                         : History-based text parsing and chronological data exercise.
   - history_Test.cpp                    : Testing harness for history.cpp.
   - hr_Managment.cpp                    : Employee and HR management application module.
   - inputLinebyLineProgram.cpp          : Reads and processes text input line-by-line.
   - kirchhoffs_Law_Calculator.cpp       : Electrical current/voltage law calculation and analysis.
   - Lab 6.cpp                           : Coursework file—numerical and logic operations.
   - lab5.cpp                            : Coursework file—linked list and sorting practice.
   - lexicalanalysis.cpp                 : Tokenization and lexical scanning demonstration.
   - linked_list_grades_sort.cpp         : Sorts student grades using a linked-list data structure.
   - luckynumbers.cpp                    : Generates pseudo-random lucky number sets.
   - main.cpp                            : Primary driver file integrating menus, arrays, and sub-modules.
   - manage_dateonly_with_master.cpp     : Date/time management and validation logic.
   - midterm_grades_functions.c          : Grade functions used in midterm-level coursework.
   - midterm_menu_grades.c               : Menu-driven grade calculator for midterm assignments.
   - movie_archive.c                     : File-based C program managing movie record archives.
   - number.cpp                          : Simple integer arithmetic demonstrations.
   - onewordsearch.cpp                   : Searches for a keyword in a file or string input.
   - other.cpp                           : Miscellaneous helper or demonstration utilities.
   - phone.cpp                           : Handles formatted phone-number input/output.
   - phone_number_input.cpp              : Specialized phone-number validator.
   - poem_fstream.cpp                    : Reads and outputs poetry text using file-stream I/O.
   - pointers.cpp                        : Pointer arithmetic and memory addressing demonstration.
   - polyhedra.cpp                       : Calculates polyhedron properties (faces, edges, volume).
   - polyhedra_Stack_Queue.cpp           : Implements polyhedral data manipulation with stack/queue.
   - population.cpp                      : Basic demographic growth calculations and projections.
   - practice.cpp                        : Sandbox for experimentation and C++ syntax practice.
   - program1.cpp – program9.cpp         : Sequential coursework projects; logic, arrays, and recursion.
   - race.cpp                            : Race simulation between Tortoise and Hare objects.
   - Rational.cpp                        : Rational-number arithmetic with operator overloading.
   - records_sorter.cpp                  : Sorting algorithms for structured student record data.
   - rectangle.cpp                       : Computes rectangle area and perimeter.
   - Road.cpp                            : Class representing roads and infrastructure objects.
   - sales_linear_regression.cpp         : Implements linear regression on sales datasets.
   - sales_prediction_simple.cpp         : Simple forecasting model for sales data.
   - seach(atomic).cpp                   : Search-pattern testing routine.
   - seachthroughprogram.cpp             : Keyword search demonstration program.
   - semester_menu.cpp                   : High-level semester organization and grade overview menu.
   - sorting_algorithms_demo.cpp         : Interactive comparison of sorting algorithms.
   - spanish.cpp                         : Text translation or localization demonstration file.
   - squares_Vector.cpp                  : Vector-based geometry and square-area calculations.
   - student_grades_struct_cpp.cpp       : C++ struct-based grade management.
   - student_manager.cpp                 : Manages student records and GPA data.
   - student_records_sorter.cpp          : Sorting utility for structured student datasets.
   - Product_Difference_Quotient.cpp     : Demonstrates arithmetic relationships among numbers.
   - template.cpp                        : Template function/class syntax example.
   - test.cpp                            : Unit test or sandbox for C++ program verification.
   - Time.cpp                            : Time-handling class with formatting and arithmetic.
   - tortoise_hare_race.cpp              : Combined race simulation using Hare/Tortoise classes.
   - wagecalculator.c                    : Payroll and wage computation programs.
   - wagecalculatorworking.c             : Payroll and wage computation programs.
   - workingP4Ch10.cpp / (2).txt         : Chapter 10 project file set for coursework illustration.

────────────────────────────────
HEADER FILES (.h)
────────────────────────────────
   - account.h                     : Defines the Account class structure, encapsulating balance tracking, transaction validation, and secure deposit/withdrawal interfaces.
   - Bank.h                        : Declares the Bank class, coordinating multiple account objects and central financial logic for transaction auditing.
   - ClientData.h                  : Contains structured templates for client record storage, file serialization, and persistent I/O mapping.
   - Date.h                        : Provides the Date class interface with constructors, format conversion, and comparison utilities.
   - Employee.h                    : Defines attributes and accessors for Employee objects including payroll integration and position metadata.
   - Hare.h                        : Declares the Hare class used in the Tortoise and Hare race simulation with speed and position tracking.
   - ListNode.h                    : Defines the ListNode structure supporting linked list data manipulation, traversal, and sorting routines.
   - Node.h                        : Declares Node objects for navigational text adventures and linked object relationships in tree/graph simulations.
   - Person.h                      : Provides a generic Person base class with name, age, and identity abstractions for inheritance.
   - PhoneNumber.h                 : Declares the PhoneNumber class with validation, formatting, and stream I/O support for contact records.
   - polyhedra.h                   : Defines geometric data structures and prototypes for computing polyhedral surfaces and volumetric relationships.
   - population.h                  : Declares data models and growth computation utilities for demographic analysis programs.
   - Queue.h                       : Generic queue interface header supporting FIFO operations across data types.
   - Rational.h                    : Declares a Rational number class supporting fractional arithmetic with operator overloading.
   - rectangle.h                   : Provides class declarations for 2D rectangle geometry, supporting area and perimeter computations.
   - Road.h                         : Outlines the Road class encapsulating directional segments, distances, and network path connectivity.
   - Stack.h                       : Template stack implementation providing LIFO operations and boundary safety.
   - Student.h                     : Defines student record management structures for GPA, ID, and course performance tracking.
   - Time.h                         : Declares the Time class for handling hour/minute/second arithmetic and formatted output.
   - Tortoise.h                    : Counterpart to Hare.h, defining movement logic for race simulations emphasizing steady progress.

────────────────────────────────
C SOURCE FILES
────────────────────────────────
   - airline.c                     : Implements flight booking and manifest management using structured record arrays.
   - airline_ticket.c              : Handles airline ticket data processing, formatting, and customer lookup features.
   - area_Circumference_Volume_Menu.c : Provides a console-driven geometry calculator for area, circumference, and volume computations.
   - credit_App.c                  : Simulates a credit approval application form with file I/O and structured record verification.
   - functions_Average_Grade.c     : Encapsulates reusable functions for computing academic grade averages and statistical metrics.
   - grade.c                       : Handles grade input, evaluation, and pass/fail output.
   - grade2.c                      : Companion to grade.c focusing on multi-student computation and output aggregation.
   - grade_File_CATBash.c          : Reads and writes categorized grade files via custom I/O parsing.
   - grade_Templete.c              : Template C program illustrating modular grade computation workflows.
   - grade_subjects_ATOMIC1.c      : Implements subject-based grade calculations for academic dataset exercises.
   - inventoryProgram(example).c   : Demonstrates product inventory management using arrays and structure pointers.
   - inventory_2.c                 : Successor to inventoryProgram—expands item tracking and input validation.
   - loginPrime(working).c         : Basic authentication logic demonstrating conditional loops and string handling.
   - midterm_grades_functions.c    : Function library used in grading menus and evaluation projects.
   - midterm_menu_grades.c         : Interactive grade management system for academic midterm exercises.
   - movie_archive.c               : File-handling application managing movie title records with CRUD-like operations.
   - program4.c                    : C program focusing on iterative computation and conditional branching.
   - program5.c                    : Multi-function C file illustrating arithmetic and user input validation.
   - program6.c                    : Handles array processing and formatted output demonstration.
   - sort_Numbers.c                : Sorts numeric input from files or users using simple iterative sorting algorithms.
   - wagecalculator.c              : Performs hourly, salaried, and overtime wage calculations.
   - wagecalculatorworking.c       : Finalized version of wagecalculator.c with input error handling and output formatting.

→ Collectively, these C programs exemplify procedural programming practices, emphasizing memory safety, file interaction, and educational modular design.

────────────────────────────────
TEXT, DATA, AND CSV FILES
────────────────────────────────
   - accounts.txt                  : Sample dataset containing mock bank account entries for testing financial modules.
   - averages.txt                  : Stores computed numerical averages for cross-reference testing.
   - Course 1 Terms Module 1.txt   : Lecture notes and terminology index for introductory coursework.
   - Course 1 Terms Module 2.txt   : Continuation of module 1 notes, focusing on intermediate technical vocabulary.
   - course_2_glossary.txt         : Glossary of key concepts and definitions used throughout programming assignments.
   - grades.txt                    : Output file containing formatted student grades and GPA data.
   - gradeFile.txt                 : Saved grade records demonstrating file stream persistence.
   - Module 4 methods.txt          : Notes describing implementation details for module 4 coursework.
   - movieData2.txt – movieData7.txt : Test datasets for file I/O assignments involving movie library storage.
   - poem.txt                      : Sample text used for stream and character buffer demonstrations.
   - polyhedra.txt                 : Static dataset for geometric computation tests.
   - readwrite dataprogram.txt     : Input/output log used in file stream exercises.
   - return grade.txt              : Contains final calculated grades from aggregate functions.
   - safePgr4.txt                  : Backed-up data file for “Program 4” assignments.
   - salary calculator.txt         : Reference data for payroll and salary computation exercises.
   - students.txt                  : Input dataset of student names and grades.
   - workingP4Ch10.txt, workingP4Ch10(2).txt : Saved iterations of Chapter 10 coursework files.
   - student_grades_raw.txt        : Raw, unformatted student performance data before structuring.

→ These textual and CSV files document academic data, project parameters, and persistent storage used across multiple programs.

────────────────────────────────
JSON AND CONFIGURATION FILES
────────────────────────────────
   - .vscode/tasks.json            : VS Code build automation configuration for C/C++ tasks.
   - c_cpp_properties.json         : Compiler and include-path configuration for Visual Studio Code projects.
   - launch.json                   : Debug launch configuration for interactive and runtime execution.
   - settings.json                 : Editor and workspace behavior configuration.
   - VSWorkspaceState.json         : VS Code internal file tracking and last-session state management.
   - ProjectSettings.json          : Metadata configuration for project-level build settings.
   - Project.vcxproj.FileList...   : Auto-generated Visual Studio project dependency list.
   - package, .lock, .support.json : NodeJS metadata ensuring consistent environment dependencies.
   - component.json                : Defines component references for dependency injection and metadata.
   - db.json                       : Sample database schema for structured record input.
   - read.json                     : Reference JSON used for testing read operations.
   - codes.json                    : Repository of encoding tables and program codes.
   - tsconfig.json                 : TypeScript configuration retained for compatibility in hybrid projects.
   - types.json                    : Declares data type relationships for programmatic mapping.

→ These files manage build, encoding, and runtime configurations essential for portability, reproducibility, and language-set interoperability.

────────────────────────────────
ASSEMBLY AND LOW-LEVEL FILES
────────────────────────────────
   - geometry_menu.asm             : MASM32 assembly file implementing menu-driven geometry calculations and arithmetic logic.
   - geometry_menu_masm.asm        : Enhanced MASM variant focusing on modularity and interrupt-driven control flow.

→ Serve as the foundational low-level exercises bridging software logic and CPU instruction management.

────────────────────────────────
SPECIAL AND INDEX FILES
────────────────────────────────
   - repo_inventory.txt            : Auto-generated file enumerating all source, header, and data files for repository indexing.
   - all_files_output.txt          : Output of automated inventory or audit commands consolidating repository contents.
   - Output-Build.txt              : Build report summarizing compiler outputs and object generation results.

→ These indexing files are integral for repository introspection, build verification, and documentation of source integrity.

=======================================================================

   © 2025 Joe L. Rivas | South Texas College | All rights reserved.


   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
