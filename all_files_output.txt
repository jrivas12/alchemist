===== ./Student.cpp =====
// Student.cpp
#include "Student.h"
#include <cstdlib>
#include <ctime>

Student::Student(const std::string& name) : Person(name) {
    gpa = (rand() % 401) / 100.0; 
    id = rand() % 9000 + 1000; 
}

double Student::getGPA() const {
    return gpa;
}

int Student::getID() const {
    return id;
}===== ./repo_inventory.txt =====
./Student.cpp
./repo_inventory.txt
./Student.h
./launch.json
./Node.h
./squares_Vector.cpp
./ellipses.cpp
./package-support.json
./Lab 6.cpp
./poem_fstream.cpp
./menu_Orchastrator.cpp
./gb18030-ranges.json
./Course 1 Terms Module 1.txt
./airplaine_in_c.c
./salary calculator.txt
./circuit_schematic.cpp
./program9.cpp
./color_mixer.cpp
./PhoneNumber.h
./clientData.h
./functions_Average_Grade.c
./students.txt
./averages.txt
./course_2_glossary.txt
./program1.cpp
./module_1.txt
./Hare.cpp
./Bubblesort_Linked_List_2.cpp
./README.md
./program3.txt
./car.cpp
./account.cpp
./read.json
./credit_App.c
./shiftjis.json
./Course 1 Terms Module 2.txt
./grade_Templete.c
./student_records_sorter.cpp
./Person.cpp
./c_cpp_properties.json
./test.cpp
./ListNode.cpp
./date2.h
./program6.cpp
./polyhedra.txt
./loginPrime(working).c
./student_grades_struct.c
./poem.txt
./enchanted_forest_game.cpp
./gbk-added.json
./correctcase2.txt
./fig09_22.cpp
./return grade.txt
./date_class.cpp
./movieData3.txt
./midterm_grades_functions.c
./sales_linear_regression.cpp
./account.h
./InsertionSort.h
./movieData6.txt
./codes.json
./program2.cpp
./SelectionSort.h
./gradeFile.txt
./seach(atomic).cpp
./population.h
./workingP4Ch10(2).txt
./program4.cpp
./Employee.cpp
./rational2.cpp
./ProjectSettings.json
./seachthroughprogram.cpp
./history_Test.cpp
./.package-lock.json
./Queue.h
./Time.h
./onewordsearch.cpp
./polyhedra.cpp
./credit_Menu_Terminal.cpp
./all_files_output.txt
./calculate_Radius(other).cpp
./hashing_bloom_filters.cpp
./lab5.cpp
./inputLinebyLineProgram.cpp
./VSWorkspaceState.json
./rational2.h
./polyhedra.h
./Output-Build.txt
./Source2.cpp
./wagecalculatorworking.c
./component.json
./Bank.h
./other.cpp
./grade2.c
./atm.cpp
./Tortoise.cpp
./JRivas_Lab8(error).cpp
./SelectionSort.cpp
./Source1.cpp
./tortoise_hare_race.cpp
./menu(atomic)/Node.h
./menu(atomic)/students.txt
./menu(atomic)/Grades.txt
./menu(atomic)/ListNode.cpp
./menu(atomic)/InsertionSort.h
./menu(atomic)/SelectionSort.h
./menu(atomic)/SelectionSort.cpp
./menu(atomic)/ListNode.h
./menu(atomic)/main.cpp
./menu(atomic)/ArrayStats.h
./menu(atomic)/Node.cpp
./menu(atomic)/InsertionSort.cpp
./menu(atomic)/records_sorter.cpp
./menu(atomic)/records_sorter.h
./menu(atomic)/.vscode/tasks.json
./tsconfig.json
./ListNode.h
./hr_Managment.cpp
./package-lock.json
./Tortoise.h
./readwrite dataprogram.txt
./workingP4Ch10.txt
./main.cpp
./Bank.cpp
./safePgr4.txt
./DocumentLayout.json
./Bubblesort_Linked_List.cpp
./movieData5.txt
./Module 4 methods.txt
./movie_archive.c
./practice.cpp
./Road.cpp
./movieData.c.txt
./package.json
./sum_toProduct_Difference_Quotient.cpp
./account_class_demo.cpp
./types.json
./program4.c
./db.json
./Hare.h
./program7.cpp
./airline_ticket.c
./polyhedra_Stack_Queue.cpp
./history.cpp
./grades.txt
./student_grades_struct_cpp.cpp
./inventoryProgram(example).c
./Time.cpp
./eucjp.json
./spanish.cpp
./semester_menu.cpp
./student_grades_raw.txt
./area_Circumference_Volume_Menu.c
./pointers.cpp
./program6.c
./population.cpp
./rectangle.h
./graph_traversal.cpp
./tasks.json
./midterm_menu_grades.c
./accounts.txt
./phone.cpp
./menu_Orchestrator.cpp
./Jrivas_Midterm.cpp
./kirchhoffs_Law_Calculator.cpp
./template.cpp
./ArrayStats.h
./settings.json
./lexicalanalysis.cpp
./Node.cpp
./linked_list_grades_sort.cpp
./phone_number_input.cpp
./rectangle.cpp
./grade_Calculator_Menu.cpp
./even_odd_checker.cpp
./array_stats_and_password.cpp
./program3.cpp
./class_grade_averager.cpp
./sort_Numbers.c
./grade.c
./PhoneNumber.cpp
./Person.h
./collatz_sequence.cpp
./movieData7.txt
./grade_subjects_ATOMIC1.c
./CppProperties.json
./ellipses(centered).cpp
./Employee.h
./wagecalculator.c
./Stack.h
./inventory_2.c
./highway.cpp
./grade_File_CATBash.c
./polyhedra.csv
./sorting_algorithms_demo.cpp
./sales_prediction_simple.cpp
./manage dateonly with master(atomic2).cpp
./Rational.cpp
./student_manager.cpp
./race.cpp
./InsertionSort.cpp
./Project.vcxproj.FileListAbsolute.txt
./records_sorter.cpp
./Date.h
./airline.c
./movieData2.txt
./luckynumbers.cpp
./Date.cpp
./records_sorter.h
./.vscode/tasks.json
./coin.cpp
./cash_personal_data_report.csv
./Road.h
./program5.c
./Rational.h
./number.cpp
===== ./Student.h =====
// Student.h
#ifndef STUDENT_H
#define STUDENT_H

#include "Person.h"

class Student : public Person {
private:
    double gpa;
    int id;
public:
    Student(const std::string& name);

    double getGPA() const;
    int getID() const;
};

#endif // STUDENT_H===== ./launch.json =====
{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": []
}===== ./Node.h =====
// Node.h
#ifndef NODE_H
#define NODE_H
#include <string>


struct Node {
    std::string description;
    bool gem;
    bool sword;
    bool chest;
    bool cave;
    Node* north;
    Node* south;
    Node* east;
    Node* west;

    Node(std::string desc);
};

#endif ===== ./squares_Vector.cpp =====
#include <iostream>
#include <vector>

int main() {
    int N = 10;
    std::vector<int> numbers(N);

    for (int i = 0; i < N; ++i) numbers[i] = i * i;
    for (int v : numbers) std::cout << v << '\n';

    return 0;
}
===== ./ellipses.cpp =====
#include <iostream>
#include <cmath>
#include <iomanip>
using namespace std;

int main() {
    double h, k; // Center coordinates (h, k)
    double numX, numY; // Numerators for (x - h)^2 and (y - k)^2

    // Get user input for ellipse parameters
    cout << "Enter the center coordinates (h, k): ";
    cin >> h >> k;
    cout << "Enter the numerator for (x - h)^2: ";
    cin >> numX;
    cout << "Enter the numerator for (y - k)^2: ";
    cin >> numY;

    // Calculate the semi-major and semi-minor axes
    double a = sqrt(numX);
    double b = sqrt(numY);

    // Calculate values of 'c' and 'e' (eccentricity)
    double c = sqrt(a * a - b * b);
    double e = c / a;

    // Calculate domain and range
    double domain = h + a;
    double range = k + b;

    // Calculate vertices
    double vertex1_x = h - a;
    double vertex1_y = k;
    double vertex2_x = h + a;
    double vertex2_y = k;

    // Calculate foci
    double focus1_x = h - c;
    double focus1_y = k;
    double focus2_x = h + c;
    double focus2_y = k;

    // Calculate endpoints of major and minor axes
    double endpoint1_x = h;
    double endpoint1_y = k - b;
    double endpoint2_x = h;
    double endpoint2_y = k + b;

    // Output the ellipse equation in standard form
    cout << "\nEllipse Equation (Standard Form):" << endl;
    cout << fixed << setprecision(2) << "(x - " << h << ")^2 / " << numX << " + (y - " << k << ")^2 / " << numY << " = 1\n";

    // Output ellipse properties in a table
    cout << "\nEllipse Properties:" << endl;
    cout << left << setw(20) << "Center (h, k):" << "(" << h << ", " << k << ")" << endl;
    cout << left << setw(20) << "Numerator for (x - h)^2:" << numX << endl;
    cout << left << setw(20) << "Numerator for (y - k)^2:" << numY << endl;
    cout << left << setw(20) << "Semi-major axis 'a':" << a << endl;
    cout << left << setw(20) << "Semi-minor axis 'b':" << b << endl;
    cout << left << setw(20) << "Value of 'c':" << c << endl;
    cout << left << setw(20) << "Eccentricity 'e':" << e << endl;
    cout << left << setw(20) << "Domain:" << "x ≤ " << domain << endl;
    cout << left << setw(20) << "Range:" << "y ≤ " << range << endl;
    cout << left << setw(20) << "Vertices:" << "(" << vertex1_x << ", " << vertex1_y << "), (" << vertex2_x << ", " << vertex2_y << ")" << endl;
    cout << left << setw(20) << "Foci:" << "(" << focus1_x << ", " << focus1_y << "), (" << focus2_x << ", " << focus2_y << ")" << endl;
    cout << left << setw(20) << "Endpoints:" << "(" << endpoint1_x << ", " << endpoint1_y << "), (" << endpoint2_x << ", " << endpoint2_y << ")" << endl;

    return 0;
}===== ./package-support.json =====
{
  "versions": [
    {
      "version": "*",
      "target": {
        "node": "all"
      },
      "response": {
        "type": "time-permitting"
      },
      "backing": {
        "npm-funding": true,
        "donations": [
          "https://github.com/ljharb",
          "https://tidelift.com/funding/github/npm/object-inspect"
        ]
      }
    }
  ]
}
===== ./Lab 6.cpp =====
﻿#include <iostream>
#include <iomanip>
using namespace std;

void kirchhoffs_law();

int main() {
    cout << "\033[1m\033[32mKirshhoffs Circuit Law: Lab 6\n\033[0m";
    kirchhoffs_law();
    return 0;
}

void kirchhoffs_law() {
    double R1, R2, R3, R4, R5;
    double V1, V2;
    double I1, I2;

    cout << "\033[36m\033[1m\nEnter the values for the resistances in Ω:\033[0m" << endl;
    cout << "\033[34mResistance 1 (R1): \033[0m";
    cin >> R1;
    cout << "\033[34mResistance 2 (R2): \033[0m";
    cin >> R2;
    cout << "\033[34mResistance 3 (R3): \033[0m";
    cin >> R3;
    cout << "\033[34mResistance 4 (R4): \033[0m";
    cin >> R4;
    cout << "\033[34mResistance 5 (R5): \033[0m";
    cin >> R5;

    cout << "\033[36m\033[1m\nEnter the values for the voltages in V:\033[0m" << endl;
    cout << "\033[32mVoltage 1 (V1): \033[0m";
    cin >> V1;
    cout << "\033[32mVoltage 2 (V2): \033[0m";
    cin >> V2;

    I1 = (V1 * R2 + V1 * R4 + V1 * R5 - V2 * R4) / (R1 * (R2 + R4 + R5) + R4 * (R2 + R5 + R3) + R3 * (R2 + R5));
    I2 = (V2 - I1 * R4) / (R2 + R4 + R5);

    cout << "\033[33m\nThe calculated currents are:\033[0m" << endl;
    cout << "\033[31mI1 = \033[0m" << fixed << setprecision(3) << I1 << "\033[31m A\033[0m" << endl;
    cout << "\033[31mI2 = \033[0m" << fixed << setprecision(3) << I2 << "\033[31m A\033[0m" << endl;

    cout << "\033[0;37m        +---------+                +---------+           \n";
    cout << "\033[0;37m   +----| " << setw(7) << fixed << setprecision(3) << R1 << " |--["
        << setw(6) << fixed << setprecision(3) << I1 << " A]----| " << setw(7) << R2 << " |----+      \n";
    cout << "\033[0;37m   |    +---------+             |  +---------+    |      \n";
    cout << "\033[0;37m   |                            |                 |      \n";
    cout << "\033[0;37m  [ " << setw(5) << V1 << "V ]                    |               ["
        << setw(6) << I2 << " A]   \n";
    cout << "\033[0;37m   |                   +---------+                |      \n";
    cout << "\033[0;37m   |                   | " << setw(7) << R3 << " |        +---------+\n";
    cout << "\033[0;37m   |                   +---------+        | " << setw(7) << R4 << " |\n";
    cout << "\033[0;37m   |                       |              +---------+\n";
    cout << "\033[0;37m   |      +---------+      |                      |      \n";
    cout << "\033[0;37m   +------| " << setw(7) << R5 << " |------+--[ " << setw(5) << V2 << "V ]----------+      \n";
    cout << "\033[0;37m          +---------+                                \033[0m\n";
}
===== ./poem_fstream.cpp =====
#include <iostream>
#include <fstream>
#include <string>

using namespace std;

int main() {
    string poem_output = "poem.txt";
    ifstream vector(poem_output);

    if (vector.is_open()) {
        string line;
        while (getline(vector, line)) {
            cout << line << endl;
        }
        vector.close();
    } else {
        cout << "Failed to open the poem." << endl;
    }
    return 0;
}
===== ./menu_Orchastrator.cpp =====
#include <iostream>
#include <map>
#include <string>
#include <cstdlib>
#include <ctime>
#include <iomanip>
#include <vector>
#include <algorithm>
#include "ArrayStats.h"
#include "InsertionSort.h"
#include "SelectionSort.h"
#include "records_sorter.h"
#define GREEN   "\x1b[32m"
#define YELLOW  "\x1b[33m"
#define RESET   "\x1b[0m"

using namespace std;

// Forward declarations for program_option1 and program_option2
void program_option1();
void program_option2();
void program_option3();
void program_option4();
void generatePassword(char* array, int size);
void randomizeDoubles(double* array, int size);

// Define MainMenu class
class MainMenu {
private:
    std::map<std::string, std::pair<std::string, void(*)()>> topics;

public:
    MainMenu() {
        topics = {
            {"1", {"\033[94mProgram1\033[0m", &program_option1}},
            {"2", {"\033[95mProgram2\033[0m", &program_option2}},
            {"3", {"\033[96mProgram3\033[0m", &program_option3}},
            {"4", {"\033[97mProgram4\033[0m", &program_option4}},
            // Add other topics here...
        };
    }

    void display() {
        std::cout << "\033[96m    Main Menu   \033[0m" << std::endl;
        for (const auto& topic : topics) {
            std::cout << topic.first << ". " << topic.second.first << std::endl;
        }
        std::cout << "0. Exit" << std::endl;
    }

    void selectTopic(const std::string& choice) {
        if (topics.find(choice) != topics.end()) {
            topics[choice].second();
        } else {
            std::cout << "Invalid choice!" << std::endl;
        }
    }
};


void sequence(int n, int steps) {
    if (n == 1 || steps >= n) {
        cout << "n              = " << GREEN << n << RESET << endl;
        cout << "Number of steps = " << YELLOW << steps << RESET << endl;
        return;
    }
    cout << "n              = " << GREEN << n << RESET << endl;
    if (n % 2 == 0) {
        cout << "n * 3 + 1      = " << YELLOW << n * 3 + 1 << RESET << endl;
        sequence(n / 2, steps + 1);
    } else {
        cout << "n / 2          = " << YELLOW << n / 2 << RESET << endl;
        sequence(3 * n + 1, steps + 1);
    }
}

void printArray(const vector<int>& arr) {
    for (int num : arr) {
        cout << "\033[1;36m" << setw(4) << num << "\033[0m";
    }
    cout << endl;
}

vector<int>::iterator findMinIndex(vector<int>::iterator start, vector<int>::iterator end) {
    return min_element(start, end);
}

void selectionSortRecursive(vector<int>& arr, vector<int>::iterator start, vector<int>::iterator end) {
    if (start == end) {
        return;
    }
    auto minIndex = findMinIndex(start, end);
    if (minIndex != start) {
        iter_swap(minIndex, start);
    }
    selectionSortRecursive(arr, start + 1, end);
}


// Define generatePassword function
void generatePassword(char* array, int size) {
    const char charset[] = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
    srand(time(nullptr));
    for (int i = 0; i < size; ++i) {
        array[i] = charset[rand() % (sizeof(charset) - 1)]; // Exclude null terminator
    }
}

// Define randomizeDoubles function
void randomizeDoubles(double* array, int size) {
    srand(time(nullptr));
    for (int i = 0; i < size; ++i) {
        array[i] = (rand() % 10000) / 100.0; // Random doubles between 0.00 and 99.99
    }
}



int main() {
    // Instantiate MainMenu object
    MainMenu menu;
    std::string choice;

    // Main menu loop
    do {
        menu.display();
        std::cout << "\033[98m\nEnter your choice: \033[0m";
        std::cin >> choice;

        if (choice == "0") {
            break;
        }

        menu.selectTopic(choice);
    } while (true);

    return 0;
}
// Define program_option1 function
void program_option1() {
    try {
        int size;
        cout << "Enter the size of the arrays: ";
        cin >> size;

        ArrayStats<int> intArray(size, 10);
        intArray.randomizeValues();
        cout << "\033[1;32mMax value in intArray: \033[0m" << intArray.findMax() << endl;
        cout << "\033[1;33mMin value in intArray: \033[0m" << intArray.findMin() << endl;

        ArrayStats<double> doubleArray(size, 10.5);
        randomizeDoubles(doubleArray.getArray(), size);
        cout << "\033[1;34mMax value in doubleArray: \033[0m" << doubleArray.findMax() << endl;
        cout << "\033[1;35mMin value in doubleArray: \033[0m" << doubleArray.findMin() << endl;

        ArrayStats<char> charArray(8, ' '); // Password-like string of up to 8 characters
        generatePassword(charArray.getArray(), 8);
        cout << "\033[1;36mPassword-like string in charArray: \033[0m";
        for (int i = 0; i < 8; ++i) {
            cout << charArray.getArray()[i];
        }
        cout << endl;
    } catch (const invalid_argument& e) {
        cerr << "\033[1;38mError: \033[0m" << e.what() << endl;
    }
}
// Define program_option2 function
void program_option2() {
    // Implement program_option2 logic here
    int input_value;

    cout << "Enter the starting point: " << GREEN << RESET << endl;
    cin >> input_value;

    sequence(input_value, 0);
}

void program_option3() {
    srand(time(nullptr));

    const int SIZE = 20;
    const int MAX_RANDOM_VALUE = 100;
    vector<int> arr(SIZE);
    for (int i = 0; i < SIZE; ++i) {
        arr[i] = rand() % MAX_RANDOM_VALUE;
    }

    cout << "\nUnsorted array:" << endl;
    for (int num : arr) {
        cout << num << " ";
    }
    cout << endl;

    sort(arr.begin(), arr.end());

    cout << "\nSorted array:" << endl;
    for (int num : arr) {
        cout << num << " ";
    }
    cout << endl;
}

void program_option4() {
    // Implement program_option2 logic here
    vector<Student> students;
    int option;

    do {
        cout << "|---------------------------------------|" << endl;
        cout << "|         Student Records Sorter        |" << endl;
        cout << "|---------------------------------------|" << endl;
        cout << "|Option | Description                   |" << endl;
        cout << "|-------|-------------------------------|" << endl;
        cout << "| 1     | Load student records          |" << endl;
        cout << "| 2     | View data                     |" << endl;
        cout << "| 3     | MergeSort data                |" << endl;
        cout << "| 4     | QuickSort data                |" << endl;
        cout << "| 5     | Exit                          |" << endl;
        cout << "|---------------------------------------|" << endl;
        cout << endl;
        cout << "Choose an option: ";
        cin >> option;
        cout << endl;

        switch (option) {
            case 1:
                cout << "Loading Student Data...";
                loadStudentRecords(students);
                break;
            case 2:
                viewData(students);
                break;
            case 3:
                mergeSortData(students);
                viewData(students);
                break;
            case 4:
                quickSortData(students, 0, students.size() - 1);
                viewData(students);
                break;
            case 5:
                cout << "Exiting..." << endl;
                break;
            default:
                cout << "Invalid option. Please try again." << endl;
                break;
        }

        cout << endl;
    } while (option != 5);
}
===== ./gb18030-ranges.json =====
{"uChars":[128,165,169,178,184,216,226,235,238,244,248,251,253,258,276,284,300,325,329,334,364,463,465,467,469,471,473,475,477,506,594,610,712,716,730,930,938,962,970,1026,1104,1106,8209,8215,8218,8222,8231,8241,8244,8246,8252,8365,8452,8454,8458,8471,8482,8556,8570,8596,8602,8713,8720,8722,8726,8731,8737,8740,8742,8748,8751,8760,8766,8777,8781,8787,8802,8808,8816,8854,8858,8870,8896,8979,9322,9372,9548,9588,9616,9622,9634,9652,9662,9672,9676,9680,9702,9735,9738,9793,9795,11906,11909,11913,11917,11928,11944,11947,11951,11956,11960,11964,11979,12284,12292,12312,12319,12330,12351,12436,12447,12535,12543,12586,12842,12850,12964,13200,13215,13218,13253,13263,13267,13270,13384,13428,13727,13839,13851,14617,14703,14801,14816,14964,15183,15471,15585,16471,16736,17208,17325,17330,17374,17623,17997,18018,18212,18218,18301,18318,18760,18811,18814,18820,18823,18844,18848,18872,19576,19620,19738,19887,40870,59244,59336,59367,59413,59417,59423,59431,59437,59443,59452,59460,59478,59493,63789,63866,63894,63976,63986,64016,64018,64021,64025,64034,64037,64042,65074,65093,65107,65112,65127,65132,65375,65510,65536],"gbChars":[0,36,38,45,50,81,89,95,96,100,103,104,105,109,126,133,148,172,175,179,208,306,307,308,309,310,311,312,313,341,428,443,544,545,558,741,742,749,750,805,819,820,7922,7924,7925,7927,7934,7943,7944,7945,7950,8062,8148,8149,8152,8164,8174,8236,8240,8262,8264,8374,8380,8381,8384,8388,8390,8392,8393,8394,8396,8401,8406,8416,8419,8424,8437,8439,8445,8482,8485,8496,8521,8603,8936,8946,9046,9050,9063,9066,9076,9092,9100,9108,9111,9113,9131,9162,9164,9218,9219,11329,11331,11334,11336,11346,11361,11363,11366,11370,11372,11375,11389,11682,11686,11687,11692,11694,11714,11716,11723,11725,11730,11736,11982,11989,12102,12336,12348,12350,12384,12393,12395,12397,12510,12553,12851,12962,12973,13738,13823,13919,13933,14080,14298,14585,14698,15583,15847,16318,16434,16438,16481,16729,17102,17122,17315,17320,17402,17418,17859,17909,17911,17915,17916,17936,17939,17961,18664,18703,18814,18962,19043,33469,33470,33471,33484,33485,33490,33497,33501,33505,33513,33520,33536,33550,37845,37921,37948,38029,38038,38064,38065,38066,38069,38075,38076,38078,39108,39109,39113,39114,39115,39116,39265,39394,189000]}===== ./Course 1 Terms Module 1.txt =====
Glossary terms from course 1, module 1
Terms and definitions from Course 1, Module 1 
Automation: The process of replacing a manual step with one that happens automatically

Client-side scripting language: Primarily for web programming; the scripts are transferred from a web server to the end-user’s internet browser, then executed in the browser

Code editors: Tools to provide features, including syntax highlighting, automatic indentation, error checking, and autocompletion

Computer program: A step-by-step list of instructions that a computer follows to reach an intended goal

Functions: A reusable block of code that performs a specific task

IDE: A software application that provides comprehensive facilities for software development

Interpreter: The program that reads and executes code

Input: Information that is provided to a program by the end user

Logic errors: Errors in code that prevent it from running correctly 

Machine language: Lowest-level computer language. It communicates directly with computing machines in binary code (ones and zeros)

Object-oriented programming language: Most coding elements are considered to be objects with configurable properties

Output: the end result of a task performed by a function or computer program

Platform-specific scripting language: Language used by system administrators on those specific platforms 

Programming: The process of writing a program to behave in different ways 

Programming code: A set of written computer instructions, guided by rules, using a computer programming language

Programming languages: Language with syntax and semantics to write computer programs

Python: A general purpose programming language 

Python interpreter: Program that reads and executes Python code by translating Python code into computer instructions

Script: Often used to automate specific tasks

Semantics: The intended meaning or effect of statements, or collections of words, in both human and computer languages

Syntax: The rules for how each statements are constructed in both human and computer languages

Variables: These are used to temporarily store changeable values in programming code===== ./airplaine_in_c.c =====
#include <stdio.h>

int main()
{
int r[]={0,0,0,0,0,0,0,0,0,0}; 
int n=0;
while(n<10){
int myNum;
int mySeat=0;


printf("Choose the arrangement you want \n");
printf("Enter 1 for first class\n");
printf("Enter 2 for economy class\n");
scanf("%d", &myNum);



if (myNum==1){
printf("You chose  first class\n");
  for(int i=0;i<5;i++){
      if(r[i]==0){
         mySeat=i+1;
         r[i]=1;
        printf("Your sit number is %d",mySeat);
        printf("\n");
         break;
      }
  }
  if(mySeat==0){printf("All seats are full\n");}
}
else if(myNum==2){
printf("You choose economy class\n");
for(int i=5;i<=9;i++){
      if(r[i]==0){
         mySeat=i+1;
         r[i]=1;
         printf("Your sit number is %d",mySeat);
         printf("\n");
         break;
      }
      
  }
  if(mySeat==0){printf("All seats are full\n");}
}
    
}
    return 0;
}


        ===== ./salary calculator.txt =====


                                                                                                                                                                                                             
#include <stdio.h>

int main(void)
{
        printf("Your Wage for this Week\n");
        int choice;
        double managerWeeklySalary = 1000.00;
        double hourlyWage = 15;
        double numberOfHours, fullTimeHours, overTimeHours;
        double commissionBase = 250;
        double grossWeeklySales;
        double salary;
        double pieceAmount = 1.5;
        int piecesNum;

        do{
                printf("1. Manager\n");
                printf("2. Employee\n");
                printf("3. Commission Worker\n");
                printf("4. Piece Worker\n");
                printf("5. Exit\n");
                scanf("%d", &choice);

        switch(choice){

                case 1:

                        printf("Your Weekly Salary is: %lf\n", managerWeeklySalary);
                        break;

                case 2:

                        printf("Employee\n");
                        printf("Enter the number of hours worked:");
                        scanf("%lf", &numberOfHours);

                        if(numberOfHours > 40){

                        fullTimeHours = 40;
                        overTimeHours = numberOfHours - 40;
                        }

                        else{
                        fullTimeHours = numberOfHours;
                        overTimeHours = 0;
                        }

                        salary = fullTimeHours * hourlyWage + overTimeHours * hourlyWage * 1.5;
                        printf("Your Weekly Salary is: %.2f\n", salary);
                        break;

                case 3:

                        printf("Enter Your Weekly Sales:\n");
                        scanf("%lf", &grossWeeklySales);
                        salary = commissionBase + grossWeeklySales * 5.7/100;
                        printf("Your Weekly Salary is: %.2f\n", salary);
                        break;

                case 4:
                		printf("How many pieces did you make?\n");
                        scanf("%d", &piecesNum);
                        salary = piecesNum * pieceAmount;
                        printf("Your Weekly Salary is: %.2f\n", salary);
                        break;

                case 5:

                        printf("Goodbye!");
                        break;
                        }

        }while(choice!=5);

        return 0;

}===== ./circuit_schematic.cpp =====
#include <iostream>
using namespace std;

int main() {
    cout << "\033[0;37m        +---------+                +---------+           \n";
    cout << "\033[0;37m   +----| " << setw(7) << fixed << setprecision(3) << R1 << " |--["
         << setw(6) << fixed << setprecision(3) << I1 << " A]----| " << setw(7) << R2 << " |----+      \n";
    cout << "\033[0;37m   |    +---------+             |  +---------+    |      \n";
    cout << "\033[0;37m   |                            |                 |      \n";
    cout << "\033[0;37m  [ " << setw(5) << V1 << "V ]                    |               ["
         << setw(6) << I2 << " A]   \n";
    cout << "\033[0;37m   |                   +---------+                |      \n";
    cout << "\033[0;37m   |                   | " << setw(7) << R3 << " |        +---------+\n";
    cout << "\033[0;37m   |                   +---------+        | " << setw(7) << R4 << " |\n";
    cout << "\033[0;37m   |                       |              +---------+\n";
    cout << "\033[0;37m   |      +---------+      |                      |      \n";
    cout << "\033[0;37m   +------| " << setw(7) << R5 << " |------+--[ " << setw(5) << V2 << "V ]----------+      \n";
    cout << "\033[0;37m          +---------+                                \033[0m\n";
}===== ./program9.cpp =====
#include <iostream>
using namespace std;

int main ()
{
        //5.11 (Find the Smallest Value) Write a program that finds the smallest of several integers. Assume that the first value read specifies the number of values to input from the user.

        int count    = 0;
        int smallest = 99999;
        int number   = 0;
        int numValues;

        cout << "How many numbers will you be entering? ";
        cin  >> numValues;

        while(count < numValues){
                cout << "Enter number: ";
                cin  >> number;
                if (number < smallest)
                        smallest = number;
                count = count + 1;
        }

        cout << "The smallest value is " << smallest << "." << endl;


        return 0;
}
===== ./color_mixer.cpp =====
#include <iostream>
#include <string>
using namespace std;

int main() {
  int primary_color_1;
  cout << "Select one of the three primary colors: " << endl;
  cout << "1. Red" << endl;
  cout << "2. Blue" << endl;
  cout << "3. Yellow" << endl; 
  	
  cin >> primary_color_1;

  int primary_color_2;
  cout << "Select another primary color: " << endl;
  cout << "1. Red" << endl;
  cout << "2. Blue" << endl;
  cout << "3. Yellow" << endl;
  cin >> primary_color_2;

  string result_color;
  if (primary_color_1 == 1 && primary_color_2 == 2) {
    result_color = "Purple";
  } else if (primary_color_1 == 2 && primary_color_2 == 3) {
    result_color = "Green";
  } else if (primary_color_1 == 1 && primary_color_2 == 3) {
    result_color = "Orange";
  } else {
    result_color = "Invalid combination";
  }

  cout << "Your color is " << result_color << "." << endl;

  return 0;
}
===== ./PhoneNumber.h =====
// PhoneNumber.h

#ifndef PhoneNumber_H
#define PhoneNumber_H

#include <iostream>
#include <string> // Add this line

class PhoneNumber {
    friend std::ostream& operator<<(std::ostream&, const PhoneNumber&);
    friend std::istream& operator>>(std::istream&, PhoneNumber&); // Change ifstream to istream
private:
    std::string areaCode;
    std::string exchange;
    std::string line; // Change Time to line
};

#endif
===== ./clientData.h =====
#ifndef CLIENTDATA_H
#define CLIENTDATA_H

#include <stdio.h>

struct clientData {
    int acctNum;
    char lastName[15];
    char firstName[10];
    double balance;
};

/* function prototypes */
int enterChoice(void);
void textFile(FILE *readPtr);
void updateRecord(FILE *fPtr);
void newRecord(FILE *fPtr);
void deleteRecord(FILE *fPtr);

#endif
===== ./functions_Average_Grade.c =====
TITLE MASM Template						(main.asm)

INCLUDE Irvine32.inc
.data

myMessage BYTE "Please enter the name",0dh,0ah,0
mymessage2 byte "Please enter 3 grades",0dh,0ah,0
name1 byte "              ",0
name2 byte "              ",0ah,0dh,0
msg byte "'s sum is ",0

.Code
;--------------------------GetName------------------------------
getName proc
	mov edx, offset mymessage
	call writestring
	mov edx, ebx
	mov ebx, eax
	call readstring				;ebx better have our sum before this!!

ret
getName endp
;--------------------------end of GetName--------------------------

;-------------------------GetGrades--------------------------------
getGrades proc

mov edx, offset mymessage2
call writestring
call readint
mov ebx, eax
call readint
add ebx, eax
call readint
add ebx, eax		;ebx has our sum!
ret
getGrades endp
;---------------------------end of Get Grades----------------------

;------------------------------Display-----------------------------
display proc
	mov edx, offset name1
	call writestring
	mov edx, offset msg
	call writestring
	mov eax, ecx
	call writeint
	call crlf

	mov edx, offset name2
	call writestring
	mov edx, offset msg
	call writestring
	mov eax, ebx
	call writeint
	call crlf
ret
display endp
;---------------------------------end of display--------------------


main PROC
	;call Clrscr					;clear screen
	
	
	mov ecx, sizeof name1
	mov ebx, offset name1
	call getname

	call getgrades
	
	mov eax, ebx			;first sum is in eax!
	mov ecx, sizeof name2
	mov ebx, offset name2

	call getname

	mov ecx, ebx
	call getgrades
	;ebx has 2nd sum, ecx has first sum.

	call display

	

	exit
main ENDP

END main===== ./students.txt =====
Andrew,Koch,2.0
Landyn,Adkins,2.6
Jakobe,Carey,2.7
Troy,Murray,2.9
Cullen,Dyer,3.0
Zaire,Murphy,2.2
Zaniyah,Martinez,3.7
Nolan,Lynch,0.6
Josh,Harris,1.3
Alejandra,Stevens,2.1
Reginald,Graves,1.9
Raelynn,Castro,3.8
Oscar,Norman,1.1
Emerson,Randolph,4.0
Mitchell,Roman,3.0
Alessandro,Huff,0.9
Clarissa,Rocha,3.1
Pedro,Acevedo,1.1
Katelyn,Gilmore,1.9
Julianna,Carroll,4.0===== ./averages.txt =====
===== ./course_2_glossary.txt =====
IT Automation with Python________________________________________
Terms and definitions from Course 2
A
Absolute path: A full path to the resource in the file system
Alteration: RegEx that matches any one of the alternatives separated by the pipe symbol
Automatic testing: A process where software checks itself for errors and confirms that it works correctly
B
Backreference: This is applied when using re.sub() to substitute the value of a capture group into the output
Bash: The most commonly used shell on Linux
Bash script: A script that contains multiple commands
Black-box tests: A test where there is an awareness of what the program is supposed to do but not how it does it
C
Character classes: These are written inside square brackets and let us list the characters we want to match inside of those brackets
Character ranges: Ranges used to match a single character against a set of possibilities
Comma separated values (CSV): A very common data format used to store data as segment of text separated by commas
Command line arguments: Inputs provided to a program when running it from the command line
Compiled or compiled language: Supportable code that can be executed on different platforms
Cut: A command that can split and take only bits of each line using spaces
D
Dialects: Rules that define how a CSV file is structured
E
Edge cases: Inputs to code that produce unexpected results, found at the extreme ends of the ranges of input
Environment variables: Settings and data stored outside a program that can be accessed by it to alter how the program behaves in a particular environment
F
File systems: Methods and structures used to organize and control how data is stored and accessed
G
Globs: Characters that create list of files, like the star and question mark 
grep: An especially easy to use yet extremely powerful tool for applying RegExes
I
Input / Output (I/O): These streams are the basic mechanism for performing input and output operations in your programs
Integrated Development Environment (IDE): A code editor with extra capabilities to simplify script writing
Interpreter or interpreted language: An intermediary program used to execute the instructions specified in the code
K
Kernel: The main core of an operating system that talks directly to hardware and manages the system’s resource
L
Linux: An open source operating system where the software is free to share, modify, and distribute
Log files: Log files are records or text files that store a history of events, actions, or errors generated by a computer system, software, or application for diagnostic, troubleshooting, or auditing purposes
Lookahead: RegEx that matches a pattern only if it’s followed by another pattern
M
Mac OS: Operating system developed by Apple
Mode: The format controlling what you can do with a recently opened file
O
Operating system (OS): Software that manages everything that goes on in the computer, composed of two main parts: the kernel and the user space
P
Pipes: A process of connecting the output of one program to the input of another
Piping: A process of connecting multiple scripts, commands, or other programs together into a data processing pipeline
Pytest: A powerful Python testing tool that assists programmers in writing more effective and stable programs
Q
Qwiklabs: An online learning environment or virtual machine to simulate real-world scenarios
R
Reader objects:  Object that represents an element or entity within a scene that needs to be rendered to the screen
Redirection: A process of sending a stream to a different destination
Regular expression: A search query for text that's expressed by string pattern, also known as RegEx or RegExp
Relative path: A portion of a path to show where the resource is located in relation to the current working directory
S
Signals: Tokens delivered to running processes to indicate a desired action
Software testing: A process of evaluating computer code to determine whether or not it does what is expected
Standard input stream commonly (STDIN): A channel between a program and a source of input
Standard output stream (STDOUT): A pathway between a program and a target of output, like a display
Standard error (STDERR): This displays output like standard out, but is used specifically as a channel to show error messages and diagnostics from the program
Shell: The application that reads and executes all commands 
Subprocesses: A process to call and run other applications from within Python, including other Python scripts
T
Test case: This is the individual unit of testing that looks for a specific response to a set of inputs
Test fixture: This prepared to perform one or more tests
Test suite: This is used to compile tests that should be executed together
Test runner: This runs the test and provides developers with the outcome’s data
U
unittest: A set of Python tools to construct and run unit tests
Unit tests: A test to verify that small isolated parts of a program work correctly
User space: Everything outside of the kernel that users interact with directly
V
Virtual environment: A tool that allows you to create isolated environments for your Python projects
Virtual machine (VM): A computer simulated through software
W
White-box test: A test where test creator knows how the code works and can write test cases that use the understanding to make sure it performs as expected
Wildcard: A character that can match more than one character
Windows OS: Operating system developed by Microsoft
Writer objects: The capability to write data to a CSV file

===== ./program1.cpp =====
#include <iostream>
using namespace std;

int main () {
        int total {0};
        unsigned int gradeCounter{1};

while (gradeCounter <= 10) {
        cout << "Enter grade: ";
        int grade;
        cin  >> grade;
        total = total + grade;
        gradeCounter = gradeCounter + 1;
}

int average{total / 10};

cout << "\nTotal of all 10 grades is " << total;
cout << "\nClass average is "          << average << endl;
}                                                                                                                 ===== ./module_1.txt =====

purplebox.py
strace - trace system calls made by these
programs
strace purplebox.py
system calls the application makes to the
system kernel. 
strace -o store the contents into a file.
strace -o falure.strace ./purplebox.py
shift g will skroll to the end of the FileExistsError
makedir ~/.config/purplebox
./purplebox.py will allow us to fix the problem
immediate remediation - create the dir 
long-term remediation - let the developers know
strace ./script.py | less
Piping the less command allows you to scroll 
through a lot of text output
tcpdump allow you to:
    - Capture packets flowing over a network
    - Filter traffic over various criteria
    - Analyze content of cptured packets
      to diagnose network issues or monitor network
Strace is a powerful diagnostic tool in linux 
it allows you to monitor and trace system calls
What were you trying to do?
What steps did you follow?
What was the expected results?
What was the actual result?
Simplest of explanations first. Avoid loosing time chasing 
the wrong problem.
Root Cause. 
By reproducing the problem, we can cut the troubleshooting
problem in half. 
Ticketing and inventory websites are important to check.
SSH - Is a linux system, where the load average would tell Us
how long the CPU was working. 
By looking at the list of processes. 
Kill-STOP will kill the system until you decide to terminate it.
This is an example of immediate remediation. 
Creating a reproduction case: To verify if the problem is present 
or not. 
Sometimes the reproduction case is obvious. 
If an application won't start, it could be the users environment.
- permissions problem
Linux - /var/log/syslog.xsession-errors
MacOs - /Library/Logs
Windown - /Event Viewer
remember to always look at the system log to find the problem
strace and ltrace helps us build a good reproduction case.
A report explaining to open the program without the specific 
directory on the computer will help the developers be able to 
find long-term remediation. 
The backups system was overloaded, the network traffic is saturated
understaning the root cause will help us understand the problem
such that preforming a hypothisis. Problem solving creativity will 
be essential to new possibilities to find what is at fault. 
Trying our code in a new machine. 
Specific environmen t problem. 
Understaning the root cause is essential for providing the long-term
resolution
In that case will will need to wait for another server to be able to 
test the problem. Therefore we need to reproduce a test server, if the 
problem continues on the test server
iotop which is a similar to top that lets us see which processes 
are using the most input and output. 
iostat,vmstat are other related tools that show statistics for the 
input and output issures. 
Another option would 
iftop allows us to see other bandwidth thats being transferred
intermittent issues - bugs that come and go are hard to solve.
- a bugs in a system that come and go can be difficult to fix
- logging configuation give us a better picture about the Environment
- several iterations can help us understand the issue
Heisenbug, observer effect, when just monitoring the problem
the problem goes away. 
Another type of intermettient issue is when we turn something on 
and off again. 
not managing resources correctly, is a sign of software problem. 
Power cycling releses resources stored in cache or momory, which gets 
rid of the problem. 
---------------------------------------------------------
1) /meeting_reminder$ ./meeting_reminder.staticmethod
'''the user is asking for help, therefore we need to reproduce the problem'''
2)
#!/bin/bash
meeting_info=$(zenity --forms \
    --title 'Meeting' --text 'Reminder information' \
    --add-calendar 'Date' --add-entry 'Title' \
    --add-entry 'Emails' \
    2>/dev/null)
if [[ -n "$meeting_info" ]]; then
    python3 send_reminders.py "$meeting_info"
fi
3)
def main():
    if len(sys.argv) < 2:
        return usage()
    try:
        date, title, emails = sys.argv[1].split('|')
        message = message_template(date, title)
        send_message(message, emails)
        print("Successfully sent reminders to:", emails)
    except Exception as e:
        print("Failure to send email", file=sys.stderr)
    except Exception as e:
       print("Failure to send email: {}".format(e), file=sys.stderr)
4)
#!/bin/bash
meeting_info=$(zenity --forms \
    --title 'Meeting' --text 'Reminder information' \
    --add-calendar 'Date' --add-entry 'Title' \
    --add-entry 'Emails' \
    --forms-date-format='%Y-%m-%d' \
    2>/dev/null)
echo $meeting_info
if [[ -n "$meeting_info" ]]; then
    python3 send_reminders.py "$meeting_info"
fi
5)
#!/usr/bin/env python3
# To trigger the error message, LANG=en_US.UTF-8
import datetime
import email
import smtplib
import system
def usage():
    print("send_reminders: Send meeting reminders")
    print() 
    print("invocation:")
    print("     send_reminders 'date|Meeting Title|Emails' ")
    return 1
def dow(date):
    dateobj = datetime.datetime.strptime(date, r"%Y-%m-%d")
    return dateobj.strftime("%A")
def message_template(date, title):
    message = email.message.EmailMessage()
    weekday = dow(date)
6)
#!/usr/bin/env python3
import sys
import datetime
import email
import smtplib
def main():
    if len(sys.argv) < 2:
        return usage()
    try:
        date, title, emails = sys.argv[1].split('|')
        message = message_template(date, title)
        send_message(message, emails)
        print("Successfully sent reminders to:", emails)
    except Exception as e:
        print("Failure to send email: {}".format(e), file=sys.stderr)
def usage():
    print("send_reminders: Send meeting reminders")
    print() 
    print("invocation:")
    print("     send_reminders 'date|Meeting Title|Emails' ")
    return 1
def message_template(date, title):
    message = email.message.EmailMessage()
    message['Subject'] = f'Meeting Reminder: {title}'
    message.set_content(f"Hi,\n\nJust a reminder that you have a meeting on {date}.\n\nBest regards,\nYour Team")
    return message
def send_message(message, emails):
    smtp_server = "smtp.example.com"  # Update this with your SMTP server
    sender_email = "your_email@example.com"  # Update this with your email address
    # You may need to provide credentials for authentication
    # smtp.login(sender_email, "your_password")
    try:
        smtp = smtplib.SMTP(smtp_server)
        smtp.send_message(message, sender_email, emails.split('|'))
        smtp.quit()
    except Exception as e:
        print("Failed to send email:", e, file=sys.stderr)
if __name__ == "__main__":
    sys.exit(main())
7) 
#!/usr/bin/env python3
import sys
import datetime
import email
import smtplib
import locale
def main():
    if len(sys.argv) < 2:
        return usage()
    try:
        date, title, emails = sys.argv[1].split('|')
        message = message_template(date, title)
        send_message(message, emails)
        print("Successfully sent reminders to:", emails)
    except Exception as e:
        print("Failure to send email: {}".format(e), file=sys.stderr)
def usage():
    print("send_reminders: Send meeting reminders")
    print() 
    print("invocation:")
    print("     send_reminders 'date|Meeting Title|Emails' ")
    return 1
def get_date_format():
    try:
        locale.setlocale(locale.LC_TIME, "")
        return "%Y-%m-%d"  # Default format
    except locale.Error:
        return "%m/%d/%Y"  # Fallback format
def message_template(date, title):
    current_datetime = datetime.datetime.now().strftime("%B %d, %Y %I:%M %p")
    message = email.message.EmailMessage()
    message['Subject'] = f'Meeting Reminder: {title}'
    formatted_date = datetime.datetime.strptime(date, get_date_format()).strftime("%B %d, %Y")
    message.set_content(f"Hi,\n\nJust a reminder that you have a meeting on {formatted_date}.\n\nThis reminder was sent on: {current_datetime}\n\nBest regards,\nYour Team")
    return message
def send_message(message, emails):
    smtp_server = "smtp.example.com"  # Update this with your SMTP server
    sender_email = "your_email@example.com"  # Update this with your email address
    # You may need to provide credentials for authentication
    # smtp.login(sender_email, "your_password")
    try:
        smtp = smtplib.SMTP(smtp_server)
        smtp.send_message(message, sender_email, emails.split('|'))
        smtp.quit()
    except Exception as e:
        print("Failed to send email:", e, file=sys.stderr)
if __name__ == "__main__":
    sys.exit(main())

---------------------------------------------------
import re
def compare_strings(string1, string2):
    # Convert both strings to lowercase
    # and remove leading and trailing blanks
    string1 = string1.lower().strip()
    string2 = string2.lower().strip()
    # Ignore punctuation
    punctuation = r"[^a-z0-9\s\-]"  # Escaped '-' character
    string1 = re.sub(punctuation, r"", string1)
    string2 = re.sub(punctuation, r"", string2)
    # DEBUG CODE GOES HERE
    print(string1 == string2)
    return string1 == string2
print(compare_strings("Have a Great Day!", "Have a great day?"))  # True
print(compare_strings("It's raining again.", "its raining, again"))  # True
print(compare_strings("Learn to count: 1, 2, 3.", "Learn to count: one, two, three."))  # False
print(compare_strings("They found some body.", "They found somebody."))  # False
-------------------------------------------------------
8)
import datetime
from datetime import date
def add_year(date_obj):
    try:
        new_date_obj = date_obj.replace(year=date_obj.year + 1)
    except ValueError:
        # This gets executed when the above method fails, 
        # which means that we're making a Leap Year calculation
        new_date_obj = date_obj.replace(year=date_obj.year + 4)
    print("Original date:", date_obj)
    print("New date:", new_date_obj)
    return new_date_obj
def next_date(date_string):
    # Convert the argument from string to date object
    date_obj = datetime.datetime.strptime(date_string, "%Y-%m-%d")
    next_date_obj = add_year(date_obj)
    # Convert the datetime object to string, 
    # in the format of "yyyy-mm-dd"
    next_date_string = next_date_obj.strftime("%Y-%m-%d")
    return next_date_string
today = date.today()  # Get today's date
print(next_date(str(today))) 
# Should return a year from today, unless today is Leap Day
print(next_date("2021-01-01")) # Should return 2022-01-01
print(next_date("2020-02-29")) # Should return 2024-02-29
--------------------------------------------------
When searching through a list of multiple arrays it is 
preferable to look through a sorted list before taking 
advantage of the binary search algorithm. 

--------------------------------------------------
Linear and binary search:
1)
def linear_search(list, key):
    """If key is in the list returns its position in the list,
       otherwise returns -1."""
    for i, item in enumerate(list):
        if item == key:
            return i
    return -1
-------------------------------------------------
2)
def binary_search(list, key):
    """Returns the position of key in the list if found, -1 otherwise.
    List must be sorted.
    """
    left = 0
    right = len(list) - 1
    while left <= right:
        middle = (left + right) // 2
        
        if list[middle] == key:
            return middle
        if list[middle] > key:
            right = middle - 1
        if list[middle] < key:
            left = middle + 1
    return -1

Binary Search in Troubleshooting:
    - Binary search algorithms is efficent for finding 
      elements in sorted list. 
    - Applicable in troubleshooting to test long list of 
      hypotheses.
    - Reduce problem by half until one option remains.
    - List of elements include entries in a file, enable 
      extensions, connected server boards, on lines of 
      code in a release.
Bisecting Process:
    - Problem is cut in half with iteration. 
    - Approach sometimes called bisecting, meaning 
      dividing into two.
    - Example given is to identify a failing file among
      a list of files. 
Confirmation and Reproduction
    - Verifying the identified problematic file and 
      reducing the reproduction case to a single file.
    - Application of the same process to various troubleshooting
      senerios such as identifing faulty browser extensions or 
      problematic database entries. 
Application in Version Control
    - Use of binary search in version controll systems like
      Git to identify the commit causing an issue.
    - Example of using Git bisect to find the commit that broke 
      a specific functionality in open-source software.
Automating Troubleshooting
    - Importance of having a quick and easy way to check for 
      issues, possibly by creaing scripts for automaion.
    - Preview of a practical example demonstrating the application 
      of binary search in troubleshooti9ng. 
File Format: You might bisect different versions or formats
of XML to identify if a specific format change is causing the 
failure. 
Variables: If the XML configurfatiuon file includes variables or
parameters, you could bisect these to pinpoint which variable 
change is causing the failure. The list of variables in the File
can be bisected or tested in halves countinoyusly until a single
root cause is found. 
---------------------------------------------------------
1)
/import_data$ cat contacts.csv | ./import.py --server test


/import_data$ wc -l contacts.csv 


/import_data$ head -15 contacts.csv 


/import_data$ tail -20 contacts.csv 

/import_data$ head -50 contacts.csv | ./import.py --server test

/import_data$ head -50 contacts.csv | head -25 | ./import.py --server test

/import_data$ head -50 contacts.csv | tail -25 | ./import.py --server test

/import_data$ head -50 contacts.csv | tail -25 | head -13 | ./import.py --server test

/import_data$ head -50 contacts.csv | tail -25 | tail -12 | head -6 | ./import.py --server test

/import_data$ head -50 contacts.csv | tail -25 | tail -12 | head -6 | head -3 

/import_data$ cat contacts.csv | ./import.py --server test
------------------------------------------------------
2) EXPLENATION
cat contacts.csv | ./import.py --server test: This command pipes the contents of the 
contacts.csv file into the import.py script, which likely processes the data and sends 
it to a server named "test".
wc -l contacts.csv: This command counts the number of lines in the contacts.csv file.
head -15 contacts.csv: This command displays the first 15 lines of the contacts.csv file.
tail -20 contacts.csv: This command displays the last 20 lines of the contacts.csv file.
head -50 contacts.csv | ./import.py --server test: This command pipes the first 50 lines 
of the contacts.csv file into the import.py script for processing.
head -50 contacts.csv | head -25 | ./import.py --server test: This command pipes the first 
50 lines of the contacts.csv file into another head command, which then takes the first 25 
lines and passes them to the import.py script for processing.
head -50 contacts.csv | tail -25 | ./import.py --server test: This command pipes the first 
50 lines of the contacts.csv file into a tail command, which then takes the last 25 lines 
and passes them to the import.py script for processing.
head -50 contacts.csv | tail -25 | head -13 | ./import.py --server test: This command pipes 
the first 50 lines of the contacts.csv file into a tail command, which then takes the last 
25 lines. The output is then piped into a head command, which takes the first 13 lines and 
passes them to the import.py script for processing.
head -50 contacts.csv | tail -25 | tail -12 | head -6 | ./import.py --server test: This 
command combines head and tail commands to select specific ranges of lines from the 
contacts.csv file, which are then passed to the import.py script for processing.
head -50 contacts.csv | tail -25 | tail -12 | head -6 | head -3: This command pipes the 
output from the previous command into another head command, which takes the first 3 lines 
from the output.
cat contacts.csv | ./import.py --server test: This command is similar to the first 
command, piping the contents of the contacts.csv file into the import.py script for processing.
----------------------------------------------------
1) we have a program that testes the contacts.csv file,
    Running this file against the import server. 
cat contacts.csv | ./import.py -- server test
wc -l contacts.csv
output: 
100 contacts.csv
head/tail command
head -15 would print the first 15 lines
tail -15 would print the last 15 lines
head -50 contacts.csv | head -25 | ./import.py -- server test
import is successful because the error lies in the second quarter
of the file. 
we can then refine the search of the failure by spliting the 
search. 
head -50 contacts.csv | tail -25 | tail -12 | head -6 | head -3 
./import.py --server test. 
the comma is that the csv file should be separated by commas rather
than quotaions ("  "), this bisect method allows us to fix the 
short term remediation. 

----------------------------------------------------
def find_item(list, item):
 #Returns True if the item is in the list, False if not.
  if len(list) == 0:
   return False

 #Is the item in the center of the list?
  middle = len(list)//2
  if list[middle] == item:
   return True

 #Is the item in the first half of the list?
  if item < list[middle]:
   #Call the function with the first half of the list
   return find_item(list[:middle], item)
  else:
   #Call the function with the second half of the list
   return find_item(list[middle+1:], item)

  return False

#Do not edit below this line - This code helps check your work!
list_of_names = ["Parker", "Drew", "Cameron", "Logan", "Alex", "Chris", "Terry", "Jamie", "Jordan", "Taylor"]

print(find_item(list_of_names, "Alex")) # True
print(find_item(list_of_names, "Andrew")) # False
print(find_item(list_of_names, "Drew")) # True
print(find_item(list_of_names, "Jared")) # False
-----------------------------------------------------
def find_item(list, item):
    #Returns True if the item is in the list, False if not.
    if len(list) == 0:
        print("Item not found.")
        return False

    #Is the item in the center of the list?
    middle = len(list)//2
    if list[middle] == item:
        print("Item found at index", middle)
        return True

 #Is the item in the first half of the list?
    if item < list[middle]:
        print("Searching through first half of the list.")
   #Call the function with the first half of the list
        return find_item(list[:middle], item)
    else:
        print("Searching through the second half of the list.")
   #Call the function with the second half of the list
        return find_item(list[middle+1:], item)
    print("Debug line")
    return False
#Do not edit below this line - This code helps check your work!
list_of_names = ["Parker", "Drew", "Cameron", "Logan", "Alex", "Chris", "Terry", "Jamie", "Jordan", "Taylor"]
print(find_item(list_of_names, "Alex"))   # True
print(find_item(list_of_names, "Andrew")) # False
print(find_item(list_of_names, "Drew"))   # True
print(find_item(list_of_names, "Jared"))  # False
---------------------------------------------------
def binary_search(list, key):
    list.sort() # Binary search starts with a sorted list
    left = 0 # The first value of the list
    right = len(list) - 1 # The last value of the list

    while left <= right:
        middle = (left + right) // 2

        if list[middle] == key:
            print("Middle element")
            return middle
        elif list[middle] > key:
            print("Checking the rights side")
            # Add debug statement here
            return binary_search(right = middle - 1)
        else:
            print("Checking the left side")
            # Add debug statement here
            return binary_search(left = middle + 1)
       return -1
print(binary_search([10, 2, 9, 6, 7, 1, 5, 3, 4, 8], 1))

print(binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5))
print(binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))

-----------------------------------------------------
    
def binary_search(list, key):
    list.sort() # Binary search starts with a sorted list
    left = 0 # The first value of the list
    right = len(list) - 1 # The last value of the list

    while left <= right:
        middle = (left + right) // 2

        if list[middle] == key:
            print("Middle element")
            return middle
        elif list[middle] > key:
            # Add debug statement here
            print("Checking the right side")
            right = middle - 1
        else:
            # Add debug statement here
            print("Checking the left side")
            left = middle + 1
    return -1
print(binary_search([10, 2, 9, 6, 7, 1, 5, 3, 4, 8], 1))

print(binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5))
print(binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))
    
------------------------------------------------------
def linear_search(list, key):
   # Returns the number of steps to determine if key is in the list
   # Initialize the counter of steps
   steps = 0
   for i, item in enumerate(list):
       steps += 1
       if item == key:
           break
   return steps
def binary_search(list, key):
   # Returns the number of steps to determine if key is in the list
   # List must be sorted:
   list.sort()
   # The Sort was 1 step, so initialize the counter of steps to 1
   steps = 1
   left = 0
   right = len(list) - 1
   while left <= right:
       steps += 1
       middle = (left + right) // 2
       if list[middle] == key:
           break
       elif list[middle] > key:
           right = middle - 1
       else:
           left = middle + 1
   return steps
def best_search(list, key):
   steps_linear = linear_search(list, key)
   steps_binary = binary_search(list, key)
   results = "Linear: " + str(steps_linear) + " steps, "
   results += "Binary: " + str(steps_binary) + " steps. "
   if steps_linear < steps_binary:
       results += "Best Search is Linear."
   elif steps_binary < steps_linear:
       results += "Best Search is Binary."
   else:
       results += "Result is a Tie."
   return results
print(best_search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1))
# Should be: Linear: 1 steps, Binary: 4 steps. Best Search is Linear.
print(best_search([10, 2, 9, 1, 7, 5, 3, 4, 6, 8], 1))
# Should be: Linear: 4 steps, Binary: 4 steps. Result is a Tie.
print(best_search([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 7))
# Should be: Linear: 4 steps, Binary: 5 steps. Best Search is Linear.
print(best_search([1, 3, 5, 7, 9, 10, 2, 4, 6, 8], 10))
# Should be: Linear: 6 steps, Binary: 5 steps. Best Search is Binary.
print(best_search([5, 1, 8, 2, 4, 10, 7, 6, 3, 9], 11))
# Should be: Linear: 10 steps, Binary: 5 steps. Best Search is Binary.
---------------------------------------------------
#fixed
    
def find_item(list, item):
    # Returns True if the item is in the list, False if not.
    if len(list) == 0:
        print("Item not found.")
        return False
    # Check if the item is in the list
    if item in list:
        index = list.index(item)
        print("Item found at index", index)
        return True
    else:
        print("Item not found.")
        return False
# Do not edit below this line - This code helps check your work!
list_of_names = ["Parker", "Drew", "Cameron", "Logan", "Alex", "Chris", "Terry", "Jamie", "Jordan", "Taylor"]
print(find_item(list_of_names, "Alex"))   # True
print(find_item(list_of_names, "Andrew")) # False
print(find_item(list_of_names, "Drew"))   # True
print(find_item(list_of_names, "Jared"))  # False
    
---------------------------------------------------
    
#fixed
def binary_search(list, key):
    list.sort()  # Binary search starts with a sorted list
    left = 0  # The first value of the list
    right = len(list) - 1  # The last value of the list
    while left <= right:
        middle = (left + right) // 2
        if list[middle] == key:
            print("Middle element")
            return middle
        elif list[middle] > key:
            print("Checking the left side")  # Print when checking the left side
            right = middle - 1
        else:
            print("Checking the right side")  # Print when checking the right side
            left = middle + 1
    return -1
print(binary_search([10, 2, 9, 6, 7, 1, 5, 3, 4, 8], 1))
print(binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5))
print(binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))
output:
    
Item found at index 4
True
Item not found.
False
Item found at index 1
True
Item not found.
False
    
---------------------------------------------------
#fixed
def linear_search(list, key):
   # Returns the number of steps to determine if key is in the list
   # Initialize the counter of steps
   steps = 0
   for i, item in enumerate(list):
       steps += 1
       if item == key:
           break
   return steps
def binary_search(list, key):
   # Returns the number of steps to determine if key is in the list
   # List must be sorted:
   list.sort()
   # The Sort was 1 step, so initialize the counter of steps to 1
   steps = 1
   left = 0
   right = len(list) - 1
   while left <= right:
       steps += 1
       middle = (left + right) // 2
       if list[middle] == key:
           break
       elif list[middle] > key:
           right = middle - 1
       else:
           left = middle + 1
   return steps
def best_search(list, key):
   steps_linear = linear_search(list, key)
   steps_binary = binary_search(list, key)
   results = "Linear: " + str(steps_linear) + " steps, "
   results += "Binary: " + str(steps_binary) + " steps. "
   if steps_linear < steps_binary:
       results += "Best Search is Linear."
   elif steps_binary < steps_linear:
       results += "Best Search is Binary."
   else:
       results += "Result is a Tie."
   return results
print(best_search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1))
# Should be: Linear: 1 steps, Binary: 4 steps. Best Search is Linear.
print(best_search([10, 2, 9, 1, 7, 5, 3, 4, 6, 8], 1))
# Should be: Linear: 4 steps, Binary: 4 steps. Result is a Tie.
print(best_search([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 7))
# Should be: Linear: 4 steps, Binary: 5 steps. Best Search is Linear.
print(best_search([1, 3, 5, 7, 9, 10, 2, 4, 6, 8], 10))
# Should be: Linear: 6 steps, Binary: 5 steps. Best Search is Binary.
print(best_search([5, 1, 8, 2, 4, 10, 7, 6, 3, 9], 11))
# Should be: Linear: 10 steps, Binary: 5 steps. Best Search is Binary.
output:
Linear: 4 steps, Binary: 4 steps. Result is a Tie.
Linear: 4 steps, Binary: 5 steps. Best Search is Linear.
Linear: 6 steps, Binary: 5 steps. Best Search is Binary.
Linear: 10 steps, Binary: 5 steps. Best Search is Binary.
-----------------------------------------------------
    
#fixed correct!
    
def find_item(list, item):
    # Returns True if the item is in the list, False if not.
    if len(list) == 0:
        print("Item not found.")
        return False
    # Check if the item is in the list
    if item in list:
        index = list.index(item)
        print("Item found at index", index)
        return True
    else:
        print("Item not found.")
        return False
# Do not edit below this line - This code helps check your work!
list_of_names = ["Parker", "Drew", "Cameron", "Logan", "Alex", "Chris", "Terry", "Jamie", "Jordan", "Taylor"]
print(find_item(list_of_names, "Alex"))   # True
print(find_item(list_of_names, "Andrew")) # False
print(find_item(list_of_names, "Drew"))   # True
print(find_item(list_of_names, "Jared"))  # False
    
output:
    
Item found at index 4
True
Item not found.
False
Item found at index 1
True
Item not found.
False
    
--------------------------------------------------

Keyterms:

Binary Search: A search algorithm used to find a specific item in a sorted list or array 
by repeatedly dividing the search space in half until the desired item is found or 
determined to be absent.

Bisecting: Dividing into two, also a Git command

Debuggers: Tools that follow the code line by line, inspect changes in variable 
assignements, interrupt the program when specific condition is met and more. 

Heisenbug: A bug that disappears or alters its behavior when an attempt is made to
study it.

Intermittent Issue: A problem that occurs sporadically, making it difficult to
reproduce and troubleshoot.

Reproduction Case: A set of steps to reproduce a problem or bug in a controlled
environment.

Root Cause: The underlying reason for a problem or bug.
    
Linear Search: The process of searching each line of data until the desired data entry
is located. 

Observer Effect: A phenomenon in which the act of observing a system changes the
behavior of the system.

System Calls: Requests made by an application to the operating system kernel to
perform tasks such as reading and writing files, creating network
connections, and more.

Troubleshooting: The process of identifying, diagnosing, and resolving problems in
a system or application.

Recurring Issue: A problem that happens repeatedly, indicating a persistent underlying
cause.

Recurring Problem: A problem that happens repeatedly, indicating a persistent underlying
cause, and may require a long-term solution.

--------------------------------------------------

when debugging scripts, the primary type of issue that effective debugging can address is 
syntax errors.

when is it permissable to calculate the sum of two different data types in Python?
- When the data types are compatible and the operation is valid.

you can add two different data types directly in Python as long as:
- the data types are compatible
- the operation is valid
===== ./Hare.cpp =====
#include "Hare.h"
#include <iostream>

Hare::Hare() {
    square = 1;
}

bool Hare::victor() {
    return square >= 70;
}

void Hare::win() {
    std::cout << "HARE WINS?" << std::endl;
}

void Hare::bigHop() {
    square += 9;
    if (square > 70)
        square = 70;
}

void Hare::bigSlip() {
    square -= 12;
    if (square < 1)
        square = 1;
}

void Hare::smallHop() {
    square += 1;
}

void Hare::smallSlip() {
    square -= 2;
    if (square < 1)
        square = 1;
}
===== ./Bubblesort_Linked_List_2.cpp =====
#include <iostream>
#include <fstream>
using namespace std;

struct ListNode
{
	double value;
	ListNode *next;

	ListNode(double value1, ListNode *next1 = NULL)
	{
		value = value1;
		next = next1;
	}
};

int main()
{
	ifstream inFile;
	inFile.open("Grades.txt");
	ListNode *head= NULL;
	double value;
	for (int x=0; x<10; x++)
	{
		inFile>>value;
		head = new ListNode(value,head);
	}
	ListNode *ptr1;
	double temp;
	for (int x=0; x<10; x++)
	{
		ptr1=head;
		for (int y=0; y<10-1-x; y++)
		{
			if (ptr1->value > ptr1->next->value)
			{
				temp = ptr1->value;
				ptr1->value = ptr1->next->value;
				ptr1->next->value = temp;
			}
			ptr1=ptr1->next;
		}
	}


	ListNode *ptr = head;
	for (int x=0; x<10; x++)
	{
		cout<<ptr->value<<endl;
		ptr=ptr->next;
	}

	return 0;
}===== ./README.md =====
# 🖥️ C++ Ultimate Repo — Immerse into the Etches of ASCII  

[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](LICENSE)
[![Patreon](https://img.shields.io/badge/Sponsor-Patreon/jrivas12-orange.svg)](https://patreon.com/jrivas12)
[![Cash App](https://img.shields.io/badge/CashApp-$joerivas801-green.svg)](https://cash.app/$joerivas801)

> **From fundamental algorithms to unapologetically verbose, teachable source.**  

---

## 📚 About This Project  

This is my dedicated **C++ stronghold** — where fundamentals get stress-tested, recursion earns its keep, and verbosity is a feature, not a bug.  

I don’t toss snippets over the wall; I build coherent, runnable programs with mains, headers, forward declarations, and disciplined indentation that actually teach.  
If you’re here for quick hacks, keep walking.  
If you’re here to see **C++ worked like a craft**, pull up a chair.  

I work native down to ASCII: clear terminals, ANSI color, deterministic output. I prefer explicitness over mystery, and I’ll expose internals if it helps the next student climb faster.  
Clone the repo and run it.  
You’ll get more than results — you’ll get reasoning.  

---

## 🗂️ What’s Inside (Selected Highlights)

- **Polyhedra Lab** — CSV/flat-file ingestion into structured records; tabular reporting with `setw`, and side-by-side stack vs. queue traversals to make data-structure order visible.  
  *Files:* `polyhedra.txt`, Polyhedra model, Stack/Queue demos.

- **Kirchhoff’s Circuit Law (Lab 6)** — Interactive solver with colorized terminal output, precise `setprecision`, and a straight path from input → formulation → currents `I1`, `I2`.  
  *Files:* `kirchhoffs_Law_Calculator.cpp`

- **Essay Analyzer** — Text ingestion → tokenization → frequency and adjacency checks, with interactive prompts so learners can iterate fast.  
  *Files:* `essay.txt` + analyzer program.

- **Array Grades (C)** — Minimalist C array analytics for `min` / `max` / `average`; a reminder that pointer-level thinking still matters in 2025.  
  *Files:* classic multi-dimensional array patterns.

- **Tortoise vs. Hare (ASCII Race)** — Timed simulation, ANSI art, and a clean separation of state vs. render. Deterministic enough to reason about; theatrical enough to remember.  
  *Files:* `Tortoise.h`, `Hare.h`, race driver.

- **Main Menu Orchestrator** — A hub that wires in templated `ArrayStats`, Insertion/Selection/Quick/Merge sort paths, and utilities like password generation and randomized doubles.  
  *Files:* `ArrayStats.h`, `InsertionSort.h`, `SelectionSort.h`, `records_sorter.h`, program options 1–4.

---

## 🚀 Why This Repo Is Different  

- 🎓 *Academic lens, practitioner’s rigor:* forward declarations, operator-aware design, indentation as grammar, verbose logs for teachability.  
- 🧠 *Fundamentals first:* data structures, I/O, formatting, and algorithmic thinking before toys and frameworks.  
- 🔎 *Deliberately visible complexity:* recursion, selection strategies, queue/stack order, and numeric routines are shown, not hidden.  
- ❤️ *It’s mine:* you can clone the source; you can’t clone the years of dedicated passion that shaped it.  

---

## 👥 Who This Is For  

- 📝 Students who want examples that compile, communicate, and explain.  
- 🧑‍🏫 TAs/instructors who need compact demos that show stack/queue order, sort behavior, or numerical pipelines.  
- 🖥️ Curious devs who appreciate explicit style and clean terminal output.  

---

## 💖 Sponsor This Work  

If this helped you learn (or teach) C++, back the builder behind it.  
Sponsorship lets me ship more polished labs, richer docs, and deeper examples.  

[![Patreon](https://img.shields.io/badge/Sponsor-Patreon/jrivas12-orange.svg)](https://patreon.com/jrivas12)  
[![Cash App](https://img.shields.io/badge/CashApp-$joerivas801-green.svg)](https://cash.app/$joerivas801)  

---

> _“Native to ASCII. Verbose on purpose. Elegant when earned.”_  
===== ./program3.txt =====
#include <iostream>

using namespace std;

using std::cout;
using std::endl;
using std::cin;

int main()
{
    int number1{0};
    int number2{0};
        
    cout << " Enter two integers to compare: ";
    cin >> number1 >> number2;
    
    if  (number1 != number2) {
    	cout << number1 << " == " << number2 << endl;
    	}
    	
     if  (number1 != number2) {
    	cout << number1 << " != " << number2 << endl;
    	}
    	
    	 if  (number1 != number2) {
    	cout << number1 << " < " << number2 << endl;
    	}
    	
    	 if  (number1 != number2) {
    	cout << number1 << " > " << number2 << endl;
    	}
    	
    	 if  (number1 != number2) {
    	cout << number1 << " <= " << number2 << endl;
    	}
}===== ./car.cpp =====
#include <iostream>
#include <string>
using namespace std;

class Car {

private:
    int year;
    string make;
    string model;
    int speed = 0;

public:
    void setYear(int);
    void setMake(string);
    void setModel(string);
    void setSpeed(int);
    int getYear();
    string getMake();
    string getModel();
    int getSpeed();
    void accelerate();
    void brake();
};

void Car::setYear(int x) {
    year = x;
}

int Car::getYear() {
    return year;
}

void Car::setMake(string y) {
    make = y;
}

string Car::getMake() {
    return make;
}

void Car::setModel(string z) {
    model = z;
}

string Car::getModel() {
    return model;
}

void Car::setSpeed(int spd) {
    speed = spd;
}

int Car::getSpeed() {
    return speed;
}

void Car::accelerate() {
    speed += 5;
}

void Car::brake() {
    if (speed > 5) {
        speed -= 5;
    } else {
        speed = 0;
    }
}

int main() {
    Car myCar;
    int Year = 0;
    string Make, Model;
    cout << "Please enter the year of the vehicle: ";
    cin >> Year;
    cout << "Please enter the make of the vehicle: ";
    cin >> Make;
    cout << "Please enter the model of the vehicle: ";
    cin >> Model;

    myCar.setYear(Year);
    cout << "You entered the year of the car as " << myCar.getYear() << endl;
    myCar.setMake(Make);
    cout << "You entered the make of the car as " << myCar.getMake() << endl;
    myCar.setModel(Model);
    cout << "You entered the model of the car as " << myCar.getModel() << endl;

    for (int i = 0; i < 5; ++i) {
        myCar.accelerate();
        cout << "Accelerating. The current speed of the car is: " << myCar.getSpeed() << endl;
    }

    for (int j = 0; j < 5; ++j) {
        myCar.brake();
        cout << "Decelerating. The current speed of the car is: " << myCar.getSpeed() << endl;
    }

    return 0;
}===== ./account.cpp =====
#include <iostream>
#include "Account.h"
using namespace std;

int main () {
        Account account1{"Jane Green", 50};
        Account account2{"John Blue", -7};

        cout << "account1: " << account1.getName() << " balance is $"
                << account1.getBalance();
        cout << "\naccount2: " << account2.getName() << " balance is $"
                << account2.getBalance();

        cout << "\n\nEnter deposit amount for account1: ";
        int depositAmount;
        cin >> depositAmount;
        cout << "adding " << depositAmount << " to account1 balance";
        account1.deposit(depositAmount);

        cout << "\n\naccount1: " << account1.getName() << " balance is $"
                << account1.getBalance();
        cout << "\naccount2: " << account2.getName() << " balance is $"
                << account2.getBalance();

        cout << "\n\nEnter deposit amount for account2: ";
        cin >> depositAmount;
        cout << "adding " << depositAmount << " to account2 balance";
        account2.deposit(depositAmount);

        cout << "\n\naccount1: " << account1.getName() << " balance is $"
                << account1.getBalance();
        cout << "\naccount2: " << account2.getName() << " balance is $"
                << account2.getBalance() << endl;
}
===== ./read.json =====
{
    "1": {
      "name": "Rate Limiting",
      "description": "Rate Limiting: Rate limiting restricts the number of requests from a single IP address.\nBy setting a threshold, you can block or delay excessive requests from suspicious sources."
    },
    "2": {
      "name": "Web Application Firewall (WAF)",
      "description": "Web Application Firewall (WAF): A WAF can analyze incoming HTTP requests and filter out potentially malicious ones.\nIt helps protect the web server from common attack patterns and vulnerabilities."
    },
    "3": {
      "name": "Anomaly Detection",
      "description": "Anomaly Detection: Anomaly detection mechanisms can identify unusual traffic patterns.\nIt helps to detect DDoS attacks by monitoring traffic behavior and identifying deviations from normal traffic."
    },
    "4": {
      "name": "Cloud-Based DDoS Protection",
      "description": "Cloud-Based DDoS Protection: Leveraging cloud-based DDoS protection services can offload attack traffic away from the target server.\nCloud providers have robust infrastructure to absorb and mitigate large-scale DDoS attacks."
    },
    "5": {
      "name": "Blackhole Routing",
      "description": "Blackhole Routing: In severe DDoS attacks, blackhole routing can be used to drop traffic to the target IP address.\nThis approach takes the target offline temporarily, preventing collateral damage to the rest of the network."
    }
  }
  ===== ./credit_App.c =====
#include <stdio.h>
#include <stdlib.h>

/* Structure definition */
struct clientData {
    int acctNum;
    char lastName[15];
    char firstName[10];
    double balance;
};

/* Function prototypes */
int enterChoice(void);
void textFile(FILE *readPtr);
void updateRecord(FILE *fPtr);
void newRecord(FILE *fPtr);
void deleteRecord(FILE *fPtr);

/* ==============================
   Main Function
   ============================== */
int main(void)
{
    FILE *cfPtr;
    int choice;

    /* Try to open file for read/write, create if missing */
    if ((cfPtr = fopen("credit.dat", "rb+")) == NULL) {
        if ((cfPtr = fopen("credit.dat", "wb+")) == NULL) {
            printf("File could not be opened.\n");
            return 1;
        }
    }

    /* Menu loop */
    while ((choice = enterChoice()) != 5) {
        switch (choice) {
        case 1:
            textFile(cfPtr);
            break;
        case 2:
            updateRecord(cfPtr);
            break;
        case 3:
            newRecord(cfPtr);
            break;
        case 4:
            deleteRecord(cfPtr);
            break;
        default:
            printf("Incorrect choice\n");
            break;
        }
    }

    fclose(cfPtr);
    return 0;
}

/* ==============================
   Display Menu
   ============================== */
int enterChoice(void)
{
    int menuChoice;
    printf("\nEnter your choice\n"
           "1 - store a formatted text file of accounts called\n"
           "    \"accounts.txt\" for printing\n"
           "2 - update an account\n"
           "3 - add a new account\n"
           "4 - delete an account\n"
           "5 - end program\n? ");
    scanf("%d", &menuChoice);
    return menuChoice;
}

/* ==============================
   Create Formatted Text File
   ============================== */
void textFile(FILE *readPtr)
{
    FILE *writePtr;
    struct clientData client = {0, "", "", 0.0};

    if ((writePtr = fopen("accounts.txt", "w")) == NULL) {
        printf("File could not be opened.\n");
        return;
    }

    rewind(readPtr);
    fprintf(writePtr, "%-6s%-16s%-11s%10s\n",
            "Acct", "Last Name", "First Name", "Balance");

    while (fread(&client, sizeof(struct clientData), 1, readPtr) == 1) {
        if (client.acctNum != 0) {
            fprintf(writePtr, "%-6d%-16s%-11s%10.2f\n",
                    client.acctNum, client.lastName,
                    client.firstName, client.balance);
        }
    }

    fclose(writePtr);
    printf("accounts.txt created successfully.\n");
}

/* ==============================
   Update Record
   ============================== */
void updateRecord(FILE *fPtr)
{
    struct clientData client = {0, "", "", 0.0};
    int account;
    double transaction;

    printf("Enter account to update (1 - 100): ");
    scanf("%d", &account);

    fseek(fPtr, (account - 1) * sizeof(struct clientData), SEEK_SET);
    fread(&client, sizeof(struct clientData), 1, fPtr);

    if (client.acctNum == 0) {
        printf("Account #%d has no information.\n", account);
    } else {
        printf("%-6d%-16s%-11s%10.2f\n\n",
               client.acctNum, client.lastName,
               client.firstName, client.balance);
        printf("Enter charge (+) or payment (-): ");
        scanf("%lf", &transaction);
        client.balance += transaction;

        printf("%-6d%-16s%-11s%10.2f\n",
               client.acctNum, client.lastName,
               client.firstName, client.balance);

        fseek(fPtr, (account - 1) * sizeof(struct clientData), SEEK_SET);
        fwrite(&client, sizeof(struct clientData), 1, fPtr);
        fflush(fPtr);
    }
}

/* ==============================
   Delete Record
   ============================== */
void deleteRecord(FILE *fPtr)
{
    struct clientData client;
    struct clientData blankClient = {0, "", "", 0.0};
    int accountNum;

    printf("Enter account number to delete (1 - 100): ");
    scanf("%d", &accountNum);

    fseek(fPtr, (accountNum - 1) * sizeof(struct clientData), SEEK_SET);
    fread(&client, sizeof(struct clientData), 1, fPtr);

    if (client.acctNum == 0) {
        printf("Account %d does not exist.\n", accountNum);
    } else {
        fseek(fPtr, (accountNum - 1) * sizeof(struct clientData), SEEK_SET);
        fwrite(&blankClient, sizeof(struct clientData), 1, fPtr);
        fflush(fPtr);
        printf("Account %d deleted successfully.\n", accountNum);
    }
}

/* ==============================
   Add New Record
   ============================== */
void newRecord(FILE *fPtr)
{
    struct clientData client = {0, "", "", 0.0};
    int accountNum;

    printf("Enter new account number (1 - 100): ");
    scanf("%d", &accountNum);

    fseek(fPtr, (accountNum - 1) * sizeof(struct clientData), SEEK_SET);
    fread(&client, sizeof(struct clientData), 1, fPtr);

    if (client.acctNum != 0) {
        printf("Account #%d already contains information.\n", client.acctNum);
    } else {
        printf("Enter last name, first name, balance\n? ");
        scanf("%s%s%lf", client.lastName, client.firstName, &client.balance);
        client.acctNum = accountNum;

        fseek(fPtr, (client.acctNum - 1) * sizeof(struct clientData), SEEK_SET);
        fwrite(&client, sizeof(struct clientData), 1, fPtr);
        fflush(fPtr);
        printf("Account #%d created successfully.\n", client.acctNum);
    }
}
===== ./shiftjis.json =====
[
["0","\u0000",128],
["a1","｡",62],
["8140","　、。，．・：；？！゛゜´｀¨＾￣＿ヽヾゝゞ〃仝々〆〇ー―‐／＼～∥｜…‥‘’“”（）〔〕［］｛｝〈",9,"＋－±×"],
["8180","÷＝≠＜＞≦≧∞∴♂♀°′″℃￥＄￠￡％＃＆＊＠§☆★○●◎◇◆□■△▲▽▼※〒→←↑↓〓"],
["81b8","∈∋⊆⊇⊂⊃∪∩"],
["81c8","∧∨￢⇒⇔∀∃"],
["81da","∠⊥⌒∂∇≡≒≪≫√∽∝∵∫∬"],
["81f0","Å‰♯♭♪†‡¶"],
["81fc","◯"],
["824f","０",9],
["8260","Ａ",25],
["8281","ａ",25],
["829f","ぁ",82],
["8340","ァ",62],
["8380","ム",22],
["839f","Α",16,"Σ",6],
["83bf","α",16,"σ",6],
["8440","А",5,"ЁЖ",25],
["8470","а",5,"ёж",7],
["8480","о",17],
["849f","─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂"],
["8740","①",19,"Ⅰ",9],
["875f","㍉㌔㌢㍍㌘㌧㌃㌶㍑㍗㌍㌦㌣㌫㍊㌻㎜㎝㎞㎎㎏㏄㎡"],
["877e","㍻"],
["8780","〝〟№㏍℡㊤",4,"㈱㈲㈹㍾㍽㍼≒≡∫∮∑√⊥∠∟⊿∵∩∪"],
["889f","亜唖娃阿哀愛挨姶逢葵茜穐悪握渥旭葦芦鯵梓圧斡扱宛姐虻飴絢綾鮎或粟袷安庵按暗案闇鞍杏以伊位依偉囲夷委威尉惟意慰易椅為畏異移維緯胃萎衣謂違遺医井亥域育郁磯一壱溢逸稲茨芋鰯允印咽員因姻引飲淫胤蔭"],
["8940","院陰隠韻吋右宇烏羽迂雨卯鵜窺丑碓臼渦嘘唄欝蔚鰻姥厩浦瓜閏噂云運雲荏餌叡営嬰影映曳栄永泳洩瑛盈穎頴英衛詠鋭液疫益駅悦謁越閲榎厭円"],
["8980","園堰奄宴延怨掩援沿演炎焔煙燕猿縁艶苑薗遠鉛鴛塩於汚甥凹央奥往応押旺横欧殴王翁襖鴬鴎黄岡沖荻億屋憶臆桶牡乙俺卸恩温穏音下化仮何伽価佳加可嘉夏嫁家寡科暇果架歌河火珂禍禾稼箇花苛茄荷華菓蝦課嘩貨迦過霞蚊俄峨我牙画臥芽蛾賀雅餓駕介会解回塊壊廻快怪悔恢懐戒拐改"],
["8a40","魁晦械海灰界皆絵芥蟹開階貝凱劾外咳害崖慨概涯碍蓋街該鎧骸浬馨蛙垣柿蛎鈎劃嚇各廓拡撹格核殻獲確穫覚角赫較郭閣隔革学岳楽額顎掛笠樫"],
["8a80","橿梶鰍潟割喝恰括活渇滑葛褐轄且鰹叶椛樺鞄株兜竃蒲釜鎌噛鴨栢茅萱粥刈苅瓦乾侃冠寒刊勘勧巻喚堪姦完官寛干幹患感慣憾換敢柑桓棺款歓汗漢澗潅環甘監看竿管簡緩缶翰肝艦莞観諌貫還鑑間閑関陥韓館舘丸含岸巌玩癌眼岩翫贋雁頑顔願企伎危喜器基奇嬉寄岐希幾忌揮机旗既期棋棄"],
["8b40","機帰毅気汽畿祈季稀紀徽規記貴起軌輝飢騎鬼亀偽儀妓宜戯技擬欺犠疑祇義蟻誼議掬菊鞠吉吃喫桔橘詰砧杵黍却客脚虐逆丘久仇休及吸宮弓急救"],
["8b80","朽求汲泣灸球究窮笈級糾給旧牛去居巨拒拠挙渠虚許距鋸漁禦魚亨享京供侠僑兇競共凶協匡卿叫喬境峡強彊怯恐恭挟教橋況狂狭矯胸脅興蕎郷鏡響饗驚仰凝尭暁業局曲極玉桐粁僅勤均巾錦斤欣欽琴禁禽筋緊芹菌衿襟謹近金吟銀九倶句区狗玖矩苦躯駆駈駒具愚虞喰空偶寓遇隅串櫛釧屑屈"],
["8c40","掘窟沓靴轡窪熊隈粂栗繰桑鍬勲君薫訓群軍郡卦袈祁係傾刑兄啓圭珪型契形径恵慶慧憩掲携敬景桂渓畦稽系経継繋罫茎荊蛍計詣警軽頚鶏芸迎鯨"],
["8c80","劇戟撃激隙桁傑欠決潔穴結血訣月件倹倦健兼券剣喧圏堅嫌建憲懸拳捲検権牽犬献研硯絹県肩見謙賢軒遣鍵険顕験鹸元原厳幻弦減源玄現絃舷言諺限乎個古呼固姑孤己庫弧戸故枯湖狐糊袴股胡菰虎誇跨鈷雇顧鼓五互伍午呉吾娯後御悟梧檎瑚碁語誤護醐乞鯉交佼侯候倖光公功効勾厚口向"],
["8d40","后喉坑垢好孔孝宏工巧巷幸広庚康弘恒慌抗拘控攻昂晃更杭校梗構江洪浩港溝甲皇硬稿糠紅紘絞綱耕考肯肱腔膏航荒行衡講貢購郊酵鉱砿鋼閤降"],
["8d80","項香高鴻剛劫号合壕拷濠豪轟麹克刻告国穀酷鵠黒獄漉腰甑忽惚骨狛込此頃今困坤墾婚恨懇昏昆根梱混痕紺艮魂些佐叉唆嵯左差査沙瑳砂詐鎖裟坐座挫債催再最哉塞妻宰彩才採栽歳済災采犀砕砦祭斎細菜裁載際剤在材罪財冴坂阪堺榊肴咲崎埼碕鷺作削咋搾昨朔柵窄策索錯桜鮭笹匙冊刷"],
["8e40","察拶撮擦札殺薩雑皐鯖捌錆鮫皿晒三傘参山惨撒散桟燦珊産算纂蚕讃賛酸餐斬暫残仕仔伺使刺司史嗣四士始姉姿子屍市師志思指支孜斯施旨枝止"],
["8e80","死氏獅祉私糸紙紫肢脂至視詞詩試誌諮資賜雌飼歯事似侍児字寺慈持時次滋治爾璽痔磁示而耳自蒔辞汐鹿式識鴫竺軸宍雫七叱執失嫉室悉湿漆疾質実蔀篠偲柴芝屡蕊縞舎写射捨赦斜煮社紗者謝車遮蛇邪借勺尺杓灼爵酌釈錫若寂弱惹主取守手朱殊狩珠種腫趣酒首儒受呪寿授樹綬需囚収周"],
["8f40","宗就州修愁拾洲秀秋終繍習臭舟蒐衆襲讐蹴輯週酋酬集醜什住充十従戎柔汁渋獣縦重銃叔夙宿淑祝縮粛塾熟出術述俊峻春瞬竣舜駿准循旬楯殉淳"],
["8f80","準潤盾純巡遵醇順処初所暑曙渚庶緒署書薯藷諸助叙女序徐恕鋤除傷償勝匠升召哨商唱嘗奨妾娼宵将小少尚庄床廠彰承抄招掌捷昇昌昭晶松梢樟樵沼消渉湘焼焦照症省硝礁祥称章笑粧紹肖菖蒋蕉衝裳訟証詔詳象賞醤鉦鍾鐘障鞘上丈丞乗冗剰城場壌嬢常情擾条杖浄状畳穣蒸譲醸錠嘱埴飾"],
["9040","拭植殖燭織職色触食蝕辱尻伸信侵唇娠寝審心慎振新晋森榛浸深申疹真神秦紳臣芯薪親診身辛進針震人仁刃塵壬尋甚尽腎訊迅陣靭笥諏須酢図厨"],
["9080","逗吹垂帥推水炊睡粋翠衰遂酔錐錘随瑞髄崇嵩数枢趨雛据杉椙菅頗雀裾澄摺寸世瀬畝是凄制勢姓征性成政整星晴棲栖正清牲生盛精聖声製西誠誓請逝醒青静斉税脆隻席惜戚斥昔析石積籍績脊責赤跡蹟碩切拙接摂折設窃節説雪絶舌蝉仙先千占宣専尖川戦扇撰栓栴泉浅洗染潜煎煽旋穿箭線"],
["9140","繊羨腺舛船薦詮賎践選遷銭銑閃鮮前善漸然全禅繕膳糎噌塑岨措曾曽楚狙疏疎礎祖租粗素組蘇訴阻遡鼠僧創双叢倉喪壮奏爽宋層匝惣想捜掃挿掻"],
["9180","操早曹巣槍槽漕燥争痩相窓糟総綜聡草荘葬蒼藻装走送遭鎗霜騒像増憎臓蔵贈造促側則即息捉束測足速俗属賊族続卒袖其揃存孫尊損村遜他多太汰詑唾堕妥惰打柁舵楕陀駄騨体堆対耐岱帯待怠態戴替泰滞胎腿苔袋貸退逮隊黛鯛代台大第醍題鷹滝瀧卓啄宅托択拓沢濯琢託鐸濁諾茸凧蛸只"],
["9240","叩但達辰奪脱巽竪辿棚谷狸鱈樽誰丹単嘆坦担探旦歎淡湛炭短端箪綻耽胆蛋誕鍛団壇弾断暖檀段男談値知地弛恥智池痴稚置致蜘遅馳築畜竹筑蓄"],
["9280","逐秩窒茶嫡着中仲宙忠抽昼柱注虫衷註酎鋳駐樗瀦猪苧著貯丁兆凋喋寵帖帳庁弔張彫徴懲挑暢朝潮牒町眺聴脹腸蝶調諜超跳銚長頂鳥勅捗直朕沈珍賃鎮陳津墜椎槌追鎚痛通塚栂掴槻佃漬柘辻蔦綴鍔椿潰坪壷嬬紬爪吊釣鶴亭低停偵剃貞呈堤定帝底庭廷弟悌抵挺提梯汀碇禎程締艇訂諦蹄逓"],
["9340","邸鄭釘鼎泥摘擢敵滴的笛適鏑溺哲徹撤轍迭鉄典填天展店添纏甜貼転顛点伝殿澱田電兎吐堵塗妬屠徒斗杜渡登菟賭途都鍍砥砺努度土奴怒倒党冬"],
["9380","凍刀唐塔塘套宕島嶋悼投搭東桃梼棟盗淘湯涛灯燈当痘祷等答筒糖統到董蕩藤討謄豆踏逃透鐙陶頭騰闘働動同堂導憧撞洞瞳童胴萄道銅峠鴇匿得徳涜特督禿篤毒独読栃橡凸突椴届鳶苫寅酉瀞噸屯惇敦沌豚遁頓呑曇鈍奈那内乍凪薙謎灘捺鍋楢馴縄畷南楠軟難汝二尼弐迩匂賑肉虹廿日乳入"],
["9440","如尿韮任妊忍認濡禰祢寧葱猫熱年念捻撚燃粘乃廼之埜嚢悩濃納能脳膿農覗蚤巴把播覇杷波派琶破婆罵芭馬俳廃拝排敗杯盃牌背肺輩配倍培媒梅"],
["9480","楳煤狽買売賠陪這蝿秤矧萩伯剥博拍柏泊白箔粕舶薄迫曝漠爆縛莫駁麦函箱硲箸肇筈櫨幡肌畑畠八鉢溌発醗髪伐罰抜筏閥鳩噺塙蛤隼伴判半反叛帆搬斑板氾汎版犯班畔繁般藩販範釆煩頒飯挽晩番盤磐蕃蛮匪卑否妃庇彼悲扉批披斐比泌疲皮碑秘緋罷肥被誹費避非飛樋簸備尾微枇毘琵眉美"],
["9540","鼻柊稗匹疋髭彦膝菱肘弼必畢筆逼桧姫媛紐百謬俵彪標氷漂瓢票表評豹廟描病秒苗錨鋲蒜蛭鰭品彬斌浜瀕貧賓頻敏瓶不付埠夫婦富冨布府怖扶敷"],
["9580","斧普浮父符腐膚芙譜負賦赴阜附侮撫武舞葡蕪部封楓風葺蕗伏副復幅服福腹複覆淵弗払沸仏物鮒分吻噴墳憤扮焚奮粉糞紛雰文聞丙併兵塀幣平弊柄並蔽閉陛米頁僻壁癖碧別瞥蔑箆偏変片篇編辺返遍便勉娩弁鞭保舗鋪圃捕歩甫補輔穂募墓慕戊暮母簿菩倣俸包呆報奉宝峰峯崩庖抱捧放方朋"],
["9640","法泡烹砲縫胞芳萌蓬蜂褒訪豊邦鋒飽鳳鵬乏亡傍剖坊妨帽忘忙房暴望某棒冒紡肪膨謀貌貿鉾防吠頬北僕卜墨撲朴牧睦穆釦勃没殆堀幌奔本翻凡盆"],
["9680","摩磨魔麻埋妹昧枚毎哩槙幕膜枕鮪柾鱒桝亦俣又抹末沫迄侭繭麿万慢満漫蔓味未魅巳箕岬密蜜湊蓑稔脈妙粍民眠務夢無牟矛霧鵡椋婿娘冥名命明盟迷銘鳴姪牝滅免棉綿緬面麺摸模茂妄孟毛猛盲網耗蒙儲木黙目杢勿餅尤戻籾貰問悶紋門匁也冶夜爺耶野弥矢厄役約薬訳躍靖柳薮鑓愉愈油癒"],
["9740","諭輸唯佑優勇友宥幽悠憂揖有柚湧涌猶猷由祐裕誘遊邑郵雄融夕予余与誉輿預傭幼妖容庸揚揺擁曜楊様洋溶熔用窯羊耀葉蓉要謡踊遥陽養慾抑欲"],
["9780","沃浴翌翼淀羅螺裸来莱頼雷洛絡落酪乱卵嵐欄濫藍蘭覧利吏履李梨理璃痢裏裡里離陸律率立葎掠略劉流溜琉留硫粒隆竜龍侶慮旅虜了亮僚両凌寮料梁涼猟療瞭稜糧良諒遼量陵領力緑倫厘林淋燐琳臨輪隣鱗麟瑠塁涙累類令伶例冷励嶺怜玲礼苓鈴隷零霊麗齢暦歴列劣烈裂廉恋憐漣煉簾練聯"],
["9840","蓮連錬呂魯櫓炉賂路露労婁廊弄朗楼榔浪漏牢狼篭老聾蝋郎六麓禄肋録論倭和話歪賄脇惑枠鷲亙亘鰐詫藁蕨椀湾碗腕"],
["989f","弌丐丕个丱丶丼丿乂乖乘亂亅豫亊舒弍于亞亟亠亢亰亳亶从仍仄仆仂仗仞仭仟价伉佚估佛佝佗佇佶侈侏侘佻佩佰侑佯來侖儘俔俟俎俘俛俑俚俐俤俥倚倨倔倪倥倅伜俶倡倩倬俾俯們倆偃假會偕偐偈做偖偬偸傀傚傅傴傲"],
["9940","僉僊傳僂僖僞僥僭僣僮價僵儉儁儂儖儕儔儚儡儺儷儼儻儿兀兒兌兔兢竸兩兪兮冀冂囘册冉冏冑冓冕冖冤冦冢冩冪冫决冱冲冰况冽凅凉凛几處凩凭"],
["9980","凰凵凾刄刋刔刎刧刪刮刳刹剏剄剋剌剞剔剪剴剩剳剿剽劍劔劒剱劈劑辨辧劬劭劼劵勁勍勗勞勣勦飭勠勳勵勸勹匆匈甸匍匐匏匕匚匣匯匱匳匸區卆卅丗卉卍凖卞卩卮夘卻卷厂厖厠厦厥厮厰厶參簒雙叟曼燮叮叨叭叺吁吽呀听吭吼吮吶吩吝呎咏呵咎呟呱呷呰咒呻咀呶咄咐咆哇咢咸咥咬哄哈咨"],
["9a40","咫哂咤咾咼哘哥哦唏唔哽哮哭哺哢唹啀啣啌售啜啅啖啗唸唳啝喙喀咯喊喟啻啾喘喞單啼喃喩喇喨嗚嗅嗟嗄嗜嗤嗔嘔嗷嘖嗾嗽嘛嗹噎噐營嘴嘶嘲嘸"],
["9a80","噫噤嘯噬噪嚆嚀嚊嚠嚔嚏嚥嚮嚶嚴囂嚼囁囃囀囈囎囑囓囗囮囹圀囿圄圉圈國圍圓團圖嗇圜圦圷圸坎圻址坏坩埀垈坡坿垉垓垠垳垤垪垰埃埆埔埒埓堊埖埣堋堙堝塲堡塢塋塰毀塒堽塹墅墹墟墫墺壞墻墸墮壅壓壑壗壙壘壥壜壤壟壯壺壹壻壼壽夂夊夐夛梦夥夬夭夲夸夾竒奕奐奎奚奘奢奠奧奬奩"],
["9b40","奸妁妝佞侫妣妲姆姨姜妍姙姚娥娟娑娜娉娚婀婬婉娵娶婢婪媚媼媾嫋嫂媽嫣嫗嫦嫩嫖嫺嫻嬌嬋嬖嬲嫐嬪嬶嬾孃孅孀孑孕孚孛孥孩孰孳孵學斈孺宀"],
["9b80","它宦宸寃寇寉寔寐寤實寢寞寥寫寰寶寳尅將專對尓尠尢尨尸尹屁屆屎屓屐屏孱屬屮乢屶屹岌岑岔妛岫岻岶岼岷峅岾峇峙峩峽峺峭嶌峪崋崕崗嵜崟崛崑崔崢崚崙崘嵌嵒嵎嵋嵬嵳嵶嶇嶄嶂嶢嶝嶬嶮嶽嶐嶷嶼巉巍巓巒巖巛巫已巵帋帚帙帑帛帶帷幄幃幀幎幗幔幟幢幤幇幵并幺麼广庠廁廂廈廐廏"],
["9c40","廖廣廝廚廛廢廡廨廩廬廱廳廰廴廸廾弃弉彝彜弋弑弖弩弭弸彁彈彌彎弯彑彖彗彙彡彭彳彷徃徂彿徊很徑徇從徙徘徠徨徭徼忖忻忤忸忱忝悳忿怡恠"],
["9c80","怙怐怩怎怱怛怕怫怦怏怺恚恁恪恷恟恊恆恍恣恃恤恂恬恫恙悁悍惧悃悚悄悛悖悗悒悧悋惡悸惠惓悴忰悽惆悵惘慍愕愆惶惷愀惴惺愃愡惻惱愍愎慇愾愨愧慊愿愼愬愴愽慂慄慳慷慘慙慚慫慴慯慥慱慟慝慓慵憙憖憇憬憔憚憊憑憫憮懌懊應懷懈懃懆憺懋罹懍懦懣懶懺懴懿懽懼懾戀戈戉戍戌戔戛"],
["9d40","戞戡截戮戰戲戳扁扎扞扣扛扠扨扼抂抉找抒抓抖拔抃抔拗拑抻拏拿拆擔拈拜拌拊拂拇抛拉挌拮拱挧挂挈拯拵捐挾捍搜捏掖掎掀掫捶掣掏掉掟掵捫"],
["9d80","捩掾揩揀揆揣揉插揶揄搖搴搆搓搦搶攝搗搨搏摧摯摶摎攪撕撓撥撩撈撼據擒擅擇撻擘擂擱擧舉擠擡抬擣擯攬擶擴擲擺攀擽攘攜攅攤攣攫攴攵攷收攸畋效敖敕敍敘敞敝敲數斂斃變斛斟斫斷旃旆旁旄旌旒旛旙无旡旱杲昊昃旻杳昵昶昴昜晏晄晉晁晞晝晤晧晨晟晢晰暃暈暎暉暄暘暝曁暹曉暾暼"],
["9e40","曄暸曖曚曠昿曦曩曰曵曷朏朖朞朦朧霸朮朿朶杁朸朷杆杞杠杙杣杤枉杰枩杼杪枌枋枦枡枅枷柯枴柬枳柩枸柤柞柝柢柮枹柎柆柧檜栞框栩桀桍栲桎"],
["9e80","梳栫桙档桷桿梟梏梭梔條梛梃檮梹桴梵梠梺椏梍桾椁棊椈棘椢椦棡椌棍棔棧棕椶椒椄棗棣椥棹棠棯椨椪椚椣椡棆楹楷楜楸楫楔楾楮椹楴椽楙椰楡楞楝榁楪榲榮槐榿槁槓榾槎寨槊槝榻槃榧樮榑榠榜榕榴槞槨樂樛槿權槹槲槧樅榱樞槭樔槫樊樒櫁樣樓橄樌橲樶橸橇橢橙橦橈樸樢檐檍檠檄檢檣"],
["9f40","檗蘗檻櫃櫂檸檳檬櫞櫑櫟檪櫚櫪櫻欅蘖櫺欒欖鬱欟欸欷盜欹飮歇歃歉歐歙歔歛歟歡歸歹歿殀殄殃殍殘殕殞殤殪殫殯殲殱殳殷殼毆毋毓毟毬毫毳毯"],
["9f80","麾氈氓气氛氤氣汞汕汢汪沂沍沚沁沛汾汨汳沒沐泄泱泓沽泗泅泝沮沱沾沺泛泯泙泪洟衍洶洫洽洸洙洵洳洒洌浣涓浤浚浹浙涎涕濤涅淹渕渊涵淇淦涸淆淬淞淌淨淒淅淺淙淤淕淪淮渭湮渮渙湲湟渾渣湫渫湶湍渟湃渺湎渤滿渝游溂溪溘滉溷滓溽溯滄溲滔滕溏溥滂溟潁漑灌滬滸滾漿滲漱滯漲滌"],
["e040","漾漓滷澆潺潸澁澀潯潛濳潭澂潼潘澎澑濂潦澳澣澡澤澹濆澪濟濕濬濔濘濱濮濛瀉瀋濺瀑瀁瀏濾瀛瀚潴瀝瀘瀟瀰瀾瀲灑灣炙炒炯烱炬炸炳炮烟烋烝"],
["e080","烙焉烽焜焙煥煕熈煦煢煌煖煬熏燻熄熕熨熬燗熹熾燒燉燔燎燠燬燧燵燼燹燿爍爐爛爨爭爬爰爲爻爼爿牀牆牋牘牴牾犂犁犇犒犖犢犧犹犲狃狆狄狎狒狢狠狡狹狷倏猗猊猜猖猝猴猯猩猥猾獎獏默獗獪獨獰獸獵獻獺珈玳珎玻珀珥珮珞璢琅瑯琥珸琲琺瑕琿瑟瑙瑁瑜瑩瑰瑣瑪瑶瑾璋璞璧瓊瓏瓔珱"],
["e140","瓠瓣瓧瓩瓮瓲瓰瓱瓸瓷甄甃甅甌甎甍甕甓甞甦甬甼畄畍畊畉畛畆畚畩畤畧畫畭畸當疆疇畴疊疉疂疔疚疝疥疣痂疳痃疵疽疸疼疱痍痊痒痙痣痞痾痿"],
["e180","痼瘁痰痺痲痳瘋瘍瘉瘟瘧瘠瘡瘢瘤瘴瘰瘻癇癈癆癜癘癡癢癨癩癪癧癬癰癲癶癸發皀皃皈皋皎皖皓皙皚皰皴皸皹皺盂盍盖盒盞盡盥盧盪蘯盻眈眇眄眩眤眞眥眦眛眷眸睇睚睨睫睛睥睿睾睹瞎瞋瞑瞠瞞瞰瞶瞹瞿瞼瞽瞻矇矍矗矚矜矣矮矼砌砒礦砠礪硅碎硴碆硼碚碌碣碵碪碯磑磆磋磔碾碼磅磊磬"],
["e240","磧磚磽磴礇礒礑礙礬礫祀祠祗祟祚祕祓祺祿禊禝禧齋禪禮禳禹禺秉秕秧秬秡秣稈稍稘稙稠稟禀稱稻稾稷穃穗穉穡穢穩龝穰穹穽窈窗窕窘窖窩竈窰"],
["e280","窶竅竄窿邃竇竊竍竏竕竓站竚竝竡竢竦竭竰笂笏笊笆笳笘笙笞笵笨笶筐筺笄筍笋筌筅筵筥筴筧筰筱筬筮箝箘箟箍箜箚箋箒箏筝箙篋篁篌篏箴篆篝篩簑簔篦篥籠簀簇簓篳篷簗簍篶簣簧簪簟簷簫簽籌籃籔籏籀籐籘籟籤籖籥籬籵粃粐粤粭粢粫粡粨粳粲粱粮粹粽糀糅糂糘糒糜糢鬻糯糲糴糶糺紆"],
["e340","紂紜紕紊絅絋紮紲紿紵絆絳絖絎絲絨絮絏絣經綉絛綏絽綛綺綮綣綵緇綽綫總綢綯緜綸綟綰緘緝緤緞緻緲緡縅縊縣縡縒縱縟縉縋縢繆繦縻縵縹繃縷"],
["e380","縲縺繧繝繖繞繙繚繹繪繩繼繻纃緕繽辮繿纈纉續纒纐纓纔纖纎纛纜缸缺罅罌罍罎罐网罕罔罘罟罠罨罩罧罸羂羆羃羈羇羌羔羞羝羚羣羯羲羹羮羶羸譱翅翆翊翕翔翡翦翩翳翹飜耆耄耋耒耘耙耜耡耨耿耻聊聆聒聘聚聟聢聨聳聲聰聶聹聽聿肄肆肅肛肓肚肭冐肬胛胥胙胝胄胚胖脉胯胱脛脩脣脯腋"],
["e440","隋腆脾腓腑胼腱腮腥腦腴膃膈膊膀膂膠膕膤膣腟膓膩膰膵膾膸膽臀臂膺臉臍臑臙臘臈臚臟臠臧臺臻臾舁舂舅與舊舍舐舖舩舫舸舳艀艙艘艝艚艟艤"],
["e480","艢艨艪艫舮艱艷艸艾芍芒芫芟芻芬苡苣苟苒苴苳苺莓范苻苹苞茆苜茉苙茵茴茖茲茱荀茹荐荅茯茫茗茘莅莚莪莟莢莖茣莎莇莊荼莵荳荵莠莉莨菴萓菫菎菽萃菘萋菁菷萇菠菲萍萢萠莽萸蔆菻葭萪萼蕚蒄葷葫蒭葮蒂葩葆萬葯葹萵蓊葢蒹蒿蒟蓙蓍蒻蓚蓐蓁蓆蓖蒡蔡蓿蓴蔗蔘蔬蔟蔕蔔蓼蕀蕣蕘蕈"],
["e540","蕁蘂蕋蕕薀薤薈薑薊薨蕭薔薛藪薇薜蕷蕾薐藉薺藏薹藐藕藝藥藜藹蘊蘓蘋藾藺蘆蘢蘚蘰蘿虍乕虔號虧虱蚓蚣蚩蚪蚋蚌蚶蚯蛄蛆蚰蛉蠣蚫蛔蛞蛩蛬"],
["e580","蛟蛛蛯蜒蜆蜈蜀蜃蛻蜑蜉蜍蛹蜊蜴蜿蜷蜻蜥蜩蜚蝠蝟蝸蝌蝎蝴蝗蝨蝮蝙蝓蝣蝪蠅螢螟螂螯蟋螽蟀蟐雖螫蟄螳蟇蟆螻蟯蟲蟠蠏蠍蟾蟶蟷蠎蟒蠑蠖蠕蠢蠡蠱蠶蠹蠧蠻衄衂衒衙衞衢衫袁衾袞衵衽袵衲袂袗袒袮袙袢袍袤袰袿袱裃裄裔裘裙裝裹褂裼裴裨裲褄褌褊褓襃褞褥褪褫襁襄褻褶褸襌褝襠襞"],
["e640","襦襤襭襪襯襴襷襾覃覈覊覓覘覡覩覦覬覯覲覺覽覿觀觚觜觝觧觴觸訃訖訐訌訛訝訥訶詁詛詒詆詈詼詭詬詢誅誂誄誨誡誑誥誦誚誣諄諍諂諚諫諳諧"],
["e680","諤諱謔諠諢諷諞諛謌謇謚諡謖謐謗謠謳鞫謦謫謾謨譁譌譏譎證譖譛譚譫譟譬譯譴譽讀讌讎讒讓讖讙讚谺豁谿豈豌豎豐豕豢豬豸豺貂貉貅貊貍貎貔豼貘戝貭貪貽貲貳貮貶賈賁賤賣賚賽賺賻贄贅贊贇贏贍贐齎贓賍贔贖赧赭赱赳趁趙跂趾趺跏跚跖跌跛跋跪跫跟跣跼踈踉跿踝踞踐踟蹂踵踰踴蹊"],
["e740","蹇蹉蹌蹐蹈蹙蹤蹠踪蹣蹕蹶蹲蹼躁躇躅躄躋躊躓躑躔躙躪躡躬躰軆躱躾軅軈軋軛軣軼軻軫軾輊輅輕輒輙輓輜輟輛輌輦輳輻輹轅轂輾轌轉轆轎轗轜"],
["e780","轢轣轤辜辟辣辭辯辷迚迥迢迪迯邇迴逅迹迺逑逕逡逍逞逖逋逧逶逵逹迸遏遐遑遒逎遉逾遖遘遞遨遯遶隨遲邂遽邁邀邊邉邏邨邯邱邵郢郤扈郛鄂鄒鄙鄲鄰酊酖酘酣酥酩酳酲醋醉醂醢醫醯醪醵醴醺釀釁釉釋釐釖釟釡釛釼釵釶鈞釿鈔鈬鈕鈑鉞鉗鉅鉉鉤鉈銕鈿鉋鉐銜銖銓銛鉚鋏銹銷鋩錏鋺鍄錮"],
["e840","錙錢錚錣錺錵錻鍜鍠鍼鍮鍖鎰鎬鎭鎔鎹鏖鏗鏨鏥鏘鏃鏝鏐鏈鏤鐚鐔鐓鐃鐇鐐鐶鐫鐵鐡鐺鑁鑒鑄鑛鑠鑢鑞鑪鈩鑰鑵鑷鑽鑚鑼鑾钁鑿閂閇閊閔閖閘閙"],
["e880","閠閨閧閭閼閻閹閾闊濶闃闍闌闕闔闖關闡闥闢阡阨阮阯陂陌陏陋陷陜陞陝陟陦陲陬隍隘隕隗險隧隱隲隰隴隶隸隹雎雋雉雍襍雜霍雕雹霄霆霈霓霎霑霏霖霙霤霪霰霹霽霾靄靆靈靂靉靜靠靤靦靨勒靫靱靹鞅靼鞁靺鞆鞋鞏鞐鞜鞨鞦鞣鞳鞴韃韆韈韋韜韭齏韲竟韶韵頏頌頸頤頡頷頽顆顏顋顫顯顰"],
["e940","顱顴顳颪颯颱颶飄飃飆飩飫餃餉餒餔餘餡餝餞餤餠餬餮餽餾饂饉饅饐饋饑饒饌饕馗馘馥馭馮馼駟駛駝駘駑駭駮駱駲駻駸騁騏騅駢騙騫騷驅驂驀驃"],
["e980","騾驕驍驛驗驟驢驥驤驩驫驪骭骰骼髀髏髑髓體髞髟髢髣髦髯髫髮髴髱髷髻鬆鬘鬚鬟鬢鬣鬥鬧鬨鬩鬪鬮鬯鬲魄魃魏魍魎魑魘魴鮓鮃鮑鮖鮗鮟鮠鮨鮴鯀鯊鮹鯆鯏鯑鯒鯣鯢鯤鯔鯡鰺鯲鯱鯰鰕鰔鰉鰓鰌鰆鰈鰒鰊鰄鰮鰛鰥鰤鰡鰰鱇鰲鱆鰾鱚鱠鱧鱶鱸鳧鳬鳰鴉鴈鳫鴃鴆鴪鴦鶯鴣鴟鵄鴕鴒鵁鴿鴾鵆鵈"],
["ea40","鵝鵞鵤鵑鵐鵙鵲鶉鶇鶫鵯鵺鶚鶤鶩鶲鷄鷁鶻鶸鶺鷆鷏鷂鷙鷓鷸鷦鷭鷯鷽鸚鸛鸞鹵鹹鹽麁麈麋麌麒麕麑麝麥麩麸麪麭靡黌黎黏黐黔黜點黝黠黥黨黯"],
["ea80","黴黶黷黹黻黼黽鼇鼈皷鼕鼡鼬鼾齊齒齔齣齟齠齡齦齧齬齪齷齲齶龕龜龠堯槇遙瑤凜熙"],
["ed40","纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏"],
["ed80","塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱"],
["ee40","犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙"],
["ee80","蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑"],
["eeef","ⅰ",9,"￢￤＇＂"],
["f040","",62],
["f080","",124],
["f140","",62],
["f180","",124],
["f240","",62],
["f280","",124],
["f340","",62],
["f380","",124],
["f440","",62],
["f480","",124],
["f540","",62],
["f580","",124],
["f640","",62],
["f680","",124],
["f740","",62],
["f780","",124],
["f840","",62],
["f880","",124],
["f940",""],
["fa40","ⅰ",9,"Ⅰ",9,"￢￤＇＂㈱№℡∵纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊"],
["fa80","兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯"],
["fb40","涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神"],
["fb80","祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙"],
["fc40","髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑"]
]
===== ./Course 1 Terms Module 2.txt =====
Terms
expression - a combination of numbers, symbols, or other values that produce a result when evaluated

data types - classes of data (e.g., string, int, float, Boolean, etc.), which include the properties and behaviors of instances of the data type (variables)

variable - an instance of a data type class, represented by a unique name within the code, that stores changeable values of the specific data type

implicit conversion - when the Python interpreter automatically converts one data type to another

explicit conversion - when code is written to manually convert one data type to another using a data type conversion function:

str() - converts a value (often numeric) to a string data type

int() - converts a value (usually a float) to an integer data type

float() - converts a value (usually an integer) to a float data type


Variables Annotated by Type
Type annotations are optional in Python. They can be very helpful, though, because they make code easier to read. Annotations make the variable types clear to those reading the code. They can also help you catch errors during compilation. In the example below, we are using the typing module to annotate the different types of variables.

set_of_numbers: typing.Set[int] = {1, 2, 3}

Coding skills

Skill Group 1
Use variables to store values

Use basic arithmetic operators with variables to create expressions

Use explicit conversion to change a data type from float to string

# The following lines assign the variable to the left of the = 
# assignment operator with the values and arithmetic expressions 
# on the right side of the = assignment operator.
hotel_room = 100
tax = hotel_room * 0.08
total = hotel_room + tax
room_guests = 4
share_per_person = total/room_guests


# This line outputs the result of the final calculation stored
# in the variable "share_per_person"
print("Each person needs to pay: " + str(share_per_person)) # change a data type

Skill Group 2
Output multiple string variables on a single line to form a sentence

Use the plus (+) connector or a comma to connect strings in a print() function

Create spaces between variables in  a print() function

# The following 5 lines assign strings to a list of variables.
salutation = "Dr."
first_name = "Prisha"
middle_name = "Jai"
last_name = "Agarwal"
suffix = "Ph.D."
 
print(salutation + " " + first_name + " " + middle_name + " " + last_name + ", " + suffix) 
# The comma as a string ", " adds the conventional use of a comma plus a 
# space to separate the last name from the suffix.
 
# Alternatively, you could use commas in place of the + connector:
print(salutation, first_name, middle_name, last_name,",", suffix)
# However, you will find that this produces a space before a comma within a string.

Skill Group 3
Resolve TypeError caused by a data type mismatch issue

Use an explicit conversion function

# The following code causes a type error between a string 
# and an integer:

print("5 * 3 = " + str(5*3)) 


# Resolution: 
# print("5 * 3 = " + str(5*3))
#
# To avoid a type error between the string and the integer within the
# print() function, you can make an explicit data type conversion by
# using the str() function to convert the integer to a string.  

numerator = 7
denominator = 2   # Possible resolution: Change the denominator value 
result = (numerator / denominator)
print(result)


# One possible assumption for a number divided by zero error might
# include the issue of a null value as a denominator (could happen when
# using a loop to iterate over values in a database). In such cases, the
# desired outcome may be to leave the numerator value intact. The
# numerator value can be preserved by reassigning the denominator with 
# the integer value of 1. The result would then equal the numerator.

def greeting(name):
    print("Welcome, " + name)
    
greeting("Kay")
greeting("Cameron")

Welcome, Kay
Welcome, Cameron

def greeting(name, department):
    print("Welcome, " + name)
    print("You are part of " + department)
    
greeting("Blake", "Software engineering")
greeting("Ellis", "Software engineering")

Welcome, Blake
You are part of Software engineering
Welcome, Ellis
You are part of Software engineering

___________________________________________________________________________________________

def area_triangle(base, height):
    return 0.5 * base * height

area_a = area_triangle(5, 4)
area_b = area_triangle(7, 3)

def area_triangle(base, height):
    return 0.5 * base * height

# Taking input for the first triangle
base_a = float(input("Enter the base of the first triangle: "))
height_a = float(input("Enter the height of the first triangle: "))
area_a = area_triangle(base_a, height_a)
print("Area of the first triangle:", area_a)

# Taking input for the second triangle
base_b = float(input("Enter the base of the second triangle: "))
height_b = float(input("Enter the height of the second triangle: "))
area_b = area_triangle(base_b, height_b)
print("Area of the second triangle:", area_b)

# Calculating the sum of areas
sum = area_a + area_b
print("The sum of both areas is:", sum)


def area_triangle(base, height):
    return base*height/2
area_a = area_triangle(5,4)
area_b = area_triangle(7,3)
sum = area_a + area_b
print("The sum of both areas is: " + str(sum))

# Example usage:
total_seconds = 3665  # Replace this with your desired number of seconds
hours, minutes, remaining_seconds = convert_seconds(total_seconds)

print(f"{total_seconds} seconds is equal to {hours} hours, {minutes} minutes, and {remaining_seconds} seconds.")

def convert_seconds(seconds):
    hours = seconds // 3600
    minutes = (seconds - hours * 3600) // 60
    remaining_seconds = seconds - hours * 3600 - minutes * 60
    return hours, minutes, remaining_seconds

# Example usage:
total_seconds = 3665
hours, minutes, remaining_seconds = convert_seconds(total_seconds)

# Define terms before the f-string
total_seconds, hours, minutes, remaining_seconds = 3665, *convert_seconds(3665)
print(f"{total_seconds} seconds is equal to {hours} hours, {minutes} minutes, and {remaining_seconds} seconds.")

hours = 2  # Replace this with your desired number of hours
total_seconds = hours * 3600  # Convert hours to seconds
hours, minutes, seconds = convert_seconds(total_seconds)
print(hours, minutes, seconds)

def convert_seconds(seconds):
    hours = seconds // 3600
    minutes = (seconds - hours * 3600) // 60
    remaining_seconds = seconds - hours * 3600 - minutes * 60
    return hours, minutes, remaining_seconds
 
hours, minutes, seconds = convert_seconds(5000)
print(hours, minutes, seconds)

def greeting(name):
    print("Welcome, " + name)
result = greeting("Christine")
print(result)

name = "Kay"
number = len(name) * 9

print("Hello " + name + ". Your lucky number is " + str(number))

name = "Cameron"
number = len(name) * 9

print("Hello " + name + ". Your lucky number is " + str(number))

output:

Hello Kay. Your lucky number is 27
Hello Cameron. Your lucky number is 63


def lucky_number(name):
    number = len(name) * 9
    print("Hello " + name + ". Your lucky number is " + str(number))

lucky_number("Kay")
lucky_number("Cameron")

output: 

Hello Kay. Your lucky number is 27
Hello Cameron. Your lucky number is 63

def calculate(d):
    q = 3.14
    z = q * (d ** 2)
    print(z)

calculate(5)
#Output is 78.5

output: 

78.5

def circle_area(radius):
    pi = 3.14
    area = pi * (radius ** 2)
    print(area)

circle_area(5)

output: 

78.5


# are passed to the function through the function’s parameters.
def find_total_days(years, months, days):
# Assign a variable to hold the calculations for the number of days in
# a year (years*365) plus the number of days in a month (months*30) plus
# the number of days provided through the "days" parameter variable.
    my_days = (years*365) + (months*30) + days
# Use the "return" keyword to send the result of the "my_days"  
# calculation to the function call. 
    return my_days
 
# Function call with user provided parameter values. 
print(find_total_days(2,5,23))

output: 

903


def convert_volume(fluid_ounces):
    milliliters = fluid_ounces * 29.5735  # Approximate conversion factor
    return milliliters

# Call the conversion from within the print() function using 2 fluid ounces.
# Convert the return value from a float to a string.
print("The volume in milliliters is " + str(convert_volume(2)))

# Call the function again and double the 2 fluid ounces from within
# the print function.
print("The volume in milliliters is " + str(convert_volume(2) * 2))
# Alternative calculation:
# print("The volume in milliliters is " + str(convert_volume(4)))

output:

The volume in milliliters is 59.147
The volume in milliliters is 118.294

def convert_distance(km):
	m = km * 1000  # exactly 1000 meters in 1 kilometer
	return m


# Do not indent any of the following lines of code as they are
# meant to be located outside of the function above


my_trip_kilometers = 55


# 2) Convert my_trip_kilometers to meters by calling the function above
my_trip_meters = int(my_trip_kilometers)


# 3) Fill in the blank to print the result of converting my_trip_kilometers
print("The distance in meters is " + str(my_trip_meters))

output: 

The distance in meters is 55

def print_seconds(hours, minutes, seconds):
   total_seconds = hours * 3600 + minutes * 60 + seconds
   print(total_seconds)

print_seconds(1,2,3)
#output will print to the screen

output: 

3723

# 1) Complete the code to return the result of the conversion
def convert_distance(km):
	# m = km * 1000 exactly 1000 meters in 1 kilometer
	return km * 1000


# Do not indent any of the following lines of code as they are
# meant to be located outside of the function above


my_trip_kilometers = 55


# 2) Convert my_trip_kilometers to meters by calling the function above
my_trip_meters = convert_distance(my_trip_kilometers)


# 3) Fill in the blank to print the result of converting my_trip_kilometers
print("The distance in meters is " + str(my_trip_meters))

output:

The distance in meters is 55000

______________________________________________________________________________________________________


print(10>1)
#True
print("cat" == "dog")
#False
print (1 != 2)
#True


print(str(1) < "1")
#False

print(1 == "1")
#False


print("Yellow" > "Cyan" and "Brown" > "Magenta")
#False

print(25 > 50 or 1 != 2)
#True


print(not 42 == "Answer")
#True

logical operators:

==    (equality) 

!=     (not equal to) 

>       (greater than)

<      (less than)

>=    (greater than or equal to)

<=    (less than or equal to)


print(32 == 30+2)   # The == operator checks if the 2 values are 
True                # equal to each other. If they are equal, 
                    # Python returns a True result.


print(5+10 == 6+7)  # If the two values are not equal, as in the
False               # expression 5+10 == 6+7 (or 15 == 13), Python          
                    # returns a False result.


print(10-4 != 10+4) # The != operator checks if the 2 values are
True                # NOT equal to each other. If true, Python              
                    # returns a True result. 


print(9/3 != 3*1)   # In this last example, 9/3 != 3*1 (or 3 != 3)
False               # is false. So, Python returns a False value.

output:

True
False
True
False
False

# The == operator can check if two strings are equal to each other. 
# If they are equal, the Python interpreter returns a True result.
print("a string" == "a string")
True


# In this example, the equality == comparison is between "4 + 5" and
# 4 + 5. Since the left data type is a string and the right data type
# is an integer, the two values cannot be equal. So, the comparison
# returns a False result.
print("4 + 5" == 4 + 5)
False


# The != operator can check if the two strings are NOT equal to each
# other. If they are indeed not equal, then Python returns a True result.
print("rabbit" != "frog")
True


# In this example, the variable event_city has been assigned the string 
# value "Shanghai". This variable is compared to a static string, 
# "Shanghai", using the != operator. As, the strings "Shanghai" and 
# "Shanghai" are the same, the comparison of "Shanghai" != "Shanghai" 
# is false. Accordingly, Python will return a False result.
event_city = "Shanghai"
print(event_city != "Shanghai")
False

# This last example illustrates the result of trying to compare two
# items of different data types using the equality == operator. The
# two items are not equal, so the comparison returns False.
print("three" == 3)
False

output:

True
False
True
False
False
False

# Example 1

print((6*3 >= 18) and (9+9 <= 36/2))


output:

True

# Example 2

print("Nairobi" < "Milan" and "Nairobi" > "Hanoi")

output:

False

# True or True returns True
print((15/3 < 2+4) or (0 >= 6-7))
True

# False or True returns True
print(country == "New York City" or city == "New York City")
True

# True or False returns True
print(16 <= 4**2 or 9**(0.5) != 3)
True

# False or False returns False
print("B_name" > "C_name" or "B_name" < "A_name")


# Test Example 1:

x = 2*3 > 6
print("The value of x is:")
print(x)

print("")  # Prints a blank line

print("The inverse value of x is:")
print(not x)

output:


The value of x is:
False

The inverse value of x is:
True



today = "Monday"
print(not today == "Tuesday") 

output:

True

Expression

Description

a == a and a != b

True if both sides are True, otherwise False.

a > b or a <= c

True if either side is True. False if both sides are False.

not a == b

True if the statement is False, False if the statement is True.



def hint_username(username):
    if len(username) < 3:
        print("Invalid username. Must be at least 3 characters long")

def hint_username(username):
    if len(username) < 3:
        print("Invalid username. Must be at least 3 characters long")
    else:
        print("Valid username")

def is_even(number):
    if number % 2 == 0:
        return True
    return False
    
result1 = is_even(4)  # Output: True
result2 = is_even(7)  # Output: False

print(result1)
print(result2)

output: 

True 
False

def hint_username(username):
    if len(username) < 3:
        print("Invalid username. Must be at least 3 characters long")
    elif len(username) > 15:
        print("Invalid username. Must be at most 15 characters long")
    else:
        print("Valid username")

# Example usage:
hint_username("ab")   # Output: "Invalid username. Must be at least 3 characters long"
hint_username("abcdefghijklmno")  # Output: "Invalid username. Must be at most 15 characters long"
hint_username("valid_username")   # Output: "Valid username"


output:

Invalid username. Must be at least 3 characters long
Valid username
Valid username

def hint_username(username):
    username_length = len(username)

    if username_length < 3:
        print(f"Error: Username '{username}' is too short. Must be at least 3 characters long.")
    elif username_length > 15:
        print(f"Error: Username '{username}' is too long. Must be at most 15 characters long.")
    else:
        print(f"Valid username: {username}")

# Example usage:
hint_username("ab")   # Output: "Error: Username 'ab' is too short. Must be at least 3 characters long."
hint_username("valid_username")   # Output: "Valid username: valid_username"
hint_username("a_very_long_username")  # Output: "Error: Username 'a_very_long_username' is too long. Must be at most 15 characters long."


output:

Error: Username 'ab' is too short. Must be at least 3 characters long.
Valid username: valid_username
Error: Username 'a_very_long_username' is too long. Must be at most 15 characters long.

Comparison operators with numerical values
Comparison expressions return a Boolean result (True or False). 

x == y        If x is equal to y, return True. Else, return False.

x != y         If x is not equal to y, return True. Else, return False.

x < y          If x is less than y, return True. Else, return False.

x <= y        If x is less than or equal to y, return True. Else, return False.

x > y          If x is greater than y, return True. Else, return False.

x >= y        If x is greater or equal to y, return True. Else, return False.

Comparison operators with strings
Comparison expressions with strings also return a Boolean result (True or False).

"x" == "y"  If the words are the same, return True. Else, return False.

"x" != "y"   If the words are not the same, return True. Else, return False.

When used with strings, the following comparison expressions will alphabetize the strings.

"x" < "y"   	If string "x"  has a smaller Unicode value than string "y", return True.  Else, return False.

"x" <= "y" 	If the Unicode value for string "x" is smaller than or equal to the Unicode value of string "y", return True. Else, return False.

"x" > "y"    	If string "x" has a larger Unicode value than string "y", return True. Else, return False.

"x" >= "y"  	If the Unicode value for string "x" is greater than or equal to the Unicode value of string "y", return True. Else, return False.


# The value of 10*4 (40) is greater than 14+23 (37), therefore this 
# comparison expression will return the Boolean value of True.


print(10*4 > 14+23) # Should print True

# The letter "t" has a Unicode value of 116 and the letter "s" has a
# Unicode value of 115. Since 116 is not less than 115, the 
# comparison of "tall" < "short" (or 116 < 115) is False. 

print("tall" < "short")  # Should print False

output:

True 
False

def greeting(name):
  if name == "Taylor":
    return "Welcome back Taylor!"
  else:
    return "Hello there, " + name

print(greeting("Taylor"))
print(greeting("John"))

output:

Welcome back Taylor!
Hello there, John

number = 10

if number > 11: 
  print(0)
elif number != 10:
  print(1)
elif number >= 20 or number < 12:
  print(2)
else:
  print(3)

output: 

2

_______________________________________________________________________________________

Constructors and Other Special Methods


class Apple:
    def __init__(self):
        self.color = "red"
        self.flavor = "sweet"

honeycrisp = Apple()
print(honeycrisp.color)

# prints "red"


class Apple:
    def __init__(self, color, flavor):
        self.color = color
        self.flavor = flavor

honeycrisp = Apple("red", "sweet")
fuji = Apple("red", "tart")
print(honeycrisp.flavor)
print(fuji.flavor)

# prints "sweet" and "tart"



class Apple:
    def __init__(self, color, flavor):
        self.color = color
        self.flavor = flavor

    def __str__(self):
        return "an apple which is {} and {}".format(self.color, self.flavor)

honeycrisp = Apple("red", "sweet")
print(honeycrisp)

# prints "an apple which is red and sweet"

class Apple:
    def __init__(self, color, flavor):
        self.color = color
        self.flavor = flavor


jonagold = Apple("red", "sweet")
print(jonagold.color)


class Apple:
    def __init__(self, color, flavor):
        self.color = color
        self.flavor = flavor
    def __str__(self):
        return "This apple is {} and its flavor is {}".format(self.color, self.flavor)



Different types of special operators  
Python supports a variety of different operators that you can use in your code to make life easier for you. Some of the more common operators are:

Arithmetic operators. These include + (addition), - (subtraction), * (multiplication), / (division), and ** (exponentiation).

Comparison operators. These include == (equality), != (inequality), < (less than), and  >= (greater than or equal to)

Logical operators. These include and, or, and not.

Assignment operators. These include = (simple assignment), += (addition assignment), and  %= (modulo assignment)

Note: This is not an all-inclusive list, but different examples of common operators that you would use in Python.

Performing special operations
Every special operator has a corresponding dunder method that implements the operation. In Python, you denote a dunder method by placing double underscores at the beginning and end of the name; in fact, the term “dunder” comes from this use of double underscores. You can change how an operator behaves with an instance of your object by overriding the implementation. Let’s look at an example:




class Triangle:

  def __init__(self, base, height):

    self.base = base

    self.height = height

In this example, the Triangle class has a method __init__()which is called a constructor and is used to initialize the object’s attributes.

  def area(self):

    return 0.5 * self.base * self.height

This part of the code, area(self) method, computes the area of the triangle based on its height and base length.

  def __add__(self, other):

    return self.area() + other.area()

This method overrides the + operator to "add" two triangles together.

triangle1 = Triangle(10, 5)

triangle2 = Triangle(6, 8)

print("The area of triangle 1 is", triangle1.area())

print("The area of triangle 2 is", triangle2.area())

print("The area of both triangles is", triangle1 + triangle2)


The output of this problem is:

The area of triangle 1 is 25.0 

The area of triangle 2 is 24.0 

The area of both triangles is 49.0




class Triangle:
    def __init__(self, base, height):
        self.base = base
        self.height = height
    def area(self):
        return 0.5 * self.base * self.height
    def __add__(self, other):
        return self.area() + other.area()
    
triangle1 = Triangle(10, 5)
triangle2 = Triangle(6, 8)
print("The area of triangle 1 is", triangle1.area())
print("The area of triangle 2 is", triangle2.area())
print("The area of both triangles is", triangle1 + triangle2)




class ClassName:
    def method_name(self, other_parameters):
        # Your actual code for the method goes here
        result = "This is the result based on other_parameters: {}".format(other_parameters)
        print(result)

# Create an instance of the class
my_instance = ClassName()

# Call the method with some parameters
my_instance.method_name("example_parameter")



TERMS AND DEFINITIONS FROM COURSE 1, MODULE 2:



Built-in functions: Functions that exist within Python and can be called directly

Comments: Notes to yourself and/or other programmers to make the purpose of the code clear

Data types: Classes of data (e.g., string, int, float, Boolean, etc.), which include the properties and behaviors of instances of the data type (variables)

Explicit conversion: This occurs when code is written to manually convert one data type to another using a data type conversion function

Expression: A combination of numbers, symbols, or other values that produce a result when evaluated

Implicit conversion: This occurs when the Python interpreter automatically converts one data type to another

Logical operators: Operators used to combine or manipulate boolean values (True or False) to create complex conditions for decision-making. 

Parameter (argument): A value passed into a function for use within the function, controlling the behavior of the CSV reader and writer

Refactoring: When a code is updated to be more self-documenting and clarify the intent 

Return value: This is the value or variable returned as the end result of a function





# A function is created with the def() keyword. The parameter
# variable "time_as_string" is passed to the function through a 
# call to the function.
def task_reminder(time_as_string):

    # The following if-elif-else block assigns various strings to
    # the variable "task" depending on specific conditions. The
    # test conditions are set using the == equality comparison 
    # operator. In this case, the time passed through the 
    # "time_as_string" parameter variable is tested as the 
    # specific condition. So, if the time  is "11:30 a.m.", then 
    # "task" is assigned the value: "Run TPS report".
    if time_as_string == "8:00 a.m.":
        task = "Check overnight backup images"
    elif time_as_string == "11:30 a.m.":
        task = "Run TPS report"
    elif time_as_string == "5:30 p.m.":
        task = "Reboot servers"
    # The else statement is a catchall for all other values of 
    # the "time_as_string" parameter variable not listed in the
    # if-elif block of code.
    else:
        task = "Provide IT Support to employees"

    # This line returns the value of "task" to the function call.
    return task

# This line calls the function and passes a parameter  
# ("10:00 a.m.") to the function.
print(task_reminder("10:00 a.m."))
# Should print "Provide IT Support to employees"

output: 


Provide IT Support to employees


# Example 1
# Evaluate the output of this print statement

def product(a, b):
        return(a*b)

print(product(product(2,4), product(3,5)))
 
#################################

# Example 2 
# Evaluate the output of this print statement

def difference(a, b):
        return(a-b)

def sum(a, b):
        return(a+b)

print(difference(sum(2,2), sum(3,3)))


#################################


# Example 3
# Evaluate the Boolean output of this comparison


print((5 >= 2*4) and (5 <= 4*3))


#################################


# Example 4 
# Evaluate the value of the comparison in the if statement 


x = 3
if x+5 > x**2 or x % 4 != 0:
        print("This comparison is True")


#################################


# Example 5 
# Evaluate the output of this if-elif-else statement



number = 6
if number * 2 < 14:
        print(number * 6 % 3)
elif number > 7:
        print(100 / number)
else:
        print(7 - number)


# Click Run to check your answers. If you are having trouble 
# calculating the correct answers manually, please review the
# Practice Quiz Study Guides, videos, and readings in this Module.


output:

120
-2
False
This comparison is True
0


def get_remainder(x, y):
 
  if x == 0 or y == 0 or x ==y:
    remainder = 0
  else:
    remainder = (x % y) / y
  return remainder


print(get_remainder(10, 3))

output:

0.3333333333333333

name = "Marjery"
home_address = "1234 Mockingbird Lane"
print(f"{name} lives at her home address of {home_address}")
# Should print "Marjery lives at her home address of 1234 Mockingbird Lane"

output:

Marjery lives at her home address of 1234 Mockingbird Lane


7 < "number"

output:

TypeError

def identify_IP(IP_address):
    if IP_address == "192.168.1.1":
        IP_description = "Network router"
    elif IP_address == "8.8.8.8" or IP_address == "8.8.4.4":
        IP_description = "Google DNS server"
    elif IP_address == "142.250.191.46":
        IP_description = "Google.com"
    else:
        IP_description = "unknown"
    return IP_description


print(identify_IP("8.8.4.4")) # Should print 'Google DNS server'
print(identify_IP("142.250.191.46")) # Should print 'Google.com'
print(identify_IP("192.168.1.1")) # Should print 'Network router'
print(identify_IP("8.8.8.8")) # Should print 'Google DNS server'
print(identify_IP("10.10.10.10")) # Should print 'unknown'
print(identify_IP("")) # Should Should print 'unknown'

output:

Google DNS server
Google.com
Network router
Google DNS server
unknown
unknown

def difference(x, y):
    z = x - y
    return z


print(difference(5, 3))

output:

2

def fractional_part(numerator, denominator):
    # Operate with numerator and denominator to
    # keep just the fractional part of the quotient 
    if denominator == 0:
        return "undefined"
    else:
        quotient = numerator / denominator
        integer_part = numerator // denominator
        fractional_part = quotient - integer_part
    return fractional_part

print(fractional_part(5, 5))  # Should print 0.0
print(fractional_part(5, 4))  # Should print 0.25
print(fractional_part(5, 3))  # Should print approx 0.666
print(fractional_part(5, 2))  # Should print 0.5
print(fractional_part(5, 0))  # Should print "undefined"
print(fractional_part(0, 5))  # Should print 0.0

x =   0
while x < 5:
    print("Not there yet, x=" + str(x))
    x = x + 1
print("x=" + str(x))

output:

Not there yet, x=0
Not there yet, x=1
Not there yet, x=2
Not there yet, x=3
Not there yet, x=4
x=5


x = 0
while x < 5:
    print("Not there yet, x=" + str(x))
    x = x + 1
print("x=" + str(x))
x=5 

output:

Not there yet, x=0
Not there yet, x=1
Not there yet, x=2
Not there yet, x=3
Not there yet, x=4
x=5
5

def get_username():
    # This function could ask the user to input a username
    username = input("Please enter a username: ")
    return username

def valid_username(username):
    # This function could check if the username meets certain criteria
    # For example, let's say a valid username is at least 3 characters long
    if len(username) == 3:
        return False
    else:
        return True

username = get_username()
while not valid_username(username):
    print("Invalid username")
    username = get_username()

output:

Please enter a username: joe
Invalid username
Please enter a username: Jacob


def get_username():
    # This function could ask the user to input a username
    username = input("Please enter a username: ")
    return username

def valid_username(username):
    # This function could check if the username meets certain criteria
    # For example, let's say a valid username is at least 3 characters long
    if len(username) == 3:
        return False
    else:
        return True

username = get_username()
while not valid_username(username):
    print("Invalid username")
    username = get_username()
else:
    print(f'Welcome Back {username}')

output:

Please enter a username: joe
Invalid username
Please enter a username: jacob
Welcome Back jacob

def attempts(n):
    x = 1
    while x <= n:
        print("Attempt " + str(x))
        x += 1
    print("Done")

attempts(5)

output:

Attempt 1
Attempt 2
Attempt 3
Attempt 4
Attempt 5
Done

my_variable = 0
while my_variable < 10:
    print("Hello")
    my_variable += 1

output:

Hello
Hello
Hello
Hello
Hello

x = 1
sum = 0
while x < 10:
    sum = sum + x
    x = x + 1

product = 1
while x < 10:
    product = product * x
    x = x + 1

print(sum, product)

ouput:

45 1

x = 8  # Define x before using it in the loop

while x != 0 and x % 2 == 0:
    x = x / 2
# This loop will keep dividing x by 2 as long as x is not 0 and x is even.

x = 8  # Reset x to its original value

if x != 0:
    while x % 2 == 0:
        x = x / 2
# This code does the same thing as the first loop, but it checks if x is not 0 before entering the loop.

x = 8  # Reset x to its original value

while x % 2 == 0:
    x = x / 2
# This loop will keep dividing x by 2 as long as x is even. If x is initially 0, it will result in an infinite loop.


output:

5
10
15
20
25
30
35
45
50
Done


# This function counts the number of integer factors for a 
# "given_number" variable, passed through the function’s parameters.
# The "count" return value includes the "given_number" itself as a 
# factor (n*1). 
def count_factors(given_number):

    # To include the "given_number" variable as a "factor", initialize
    # the "factor" variable with the value 1 (if the "factor" variable
    # were to start at 2, the "given_number" itself would be excluded). 
    factor = 1
    count = 1

    # This "if" block will run if the "given_number" equals 0.
    if given_number == 0:
        # If True, the return value will be 0 factors. 
        return 0

    # The while loop will run while the "factor" is still less than
    # the "given_number" variable.
    while factor < given_number:
        # This "if" block checks if the "given_number" can be divided by
        # the "factor" variable without leaving a remainder. The modulo
        # operator % is used to test for a remainder.
        if given_number % factor == 0:
            # If True, then the "factor" variable is added to the count of
            # the "given_number"’s integer factors.
            count += 1
        # When exiting the if block, increment the "factor" variable by 1
        # to divide the "given_number" variable by a new "factor" value
        # inside the while loop.
        factor += 1

    # When the interpreter exits either the while loop or the top if
    # block, it will return the value of the "count" variable.
    return count


print(count_factors(0)) # Count value should be 0
print(count_factors(3)) # Should count 2 factors (1x3)
print(count_factors(10)) # Should count 4 factors (1x10, 2x5)
print(count_factors(24)) # Should count 8 factors (1x24, 2x12, 3x8, and 4x6).


output:

0
2
4
8

# This function outputs an addition table. It is written to end after
# printing 5 lines of the addition table, but it will break out of the
# loop if the "my_sum" variable exceeds 20.

# The function accepts a "given_number" variable through its
# parameters.
def addition_table(given_number):

	# The "iterated_number" and "my_sum" variables are initialized with
	# the value of 1. Although the "my_sum" variable does not need any
	# specific initial value, it still must be assigned a data type
	# before being used in the while loop. By initializing "my_sum"
	# with any integer, the data type will be set to int.
	iterated_number = 1
	my_sum = 1

	# The while loop will run while it is True that the
	# "iterated_number" is less than or equal to 5.
	while iterated_number <= 5:

		# The "my_sum" variable is assigned the value of the
		# "given_number" plus the "iterated_number" variables.
		my_sum = given_number + iterated_number

		# Test to see if the "my_sum" variable is greater than 20.
		if my_sum > 20:
			# If True, then use the break keyword to exit the loop.
			break

		# If False, the Python interpreter will move to the next line
		# in the while loop after the if-statement has ended.

		# The print function will output the "given_number" plus
		# the "iterated_number" equals "my_sum".
		print(str(given_number), "+", str(iterated_number), "=", str(my_sum))

		# Increment the "iterated_number" before the while loop starts
		# over again to print a new "my_sum" value.
		iterated_number += 1


addition_table(5)
addition_table(17)
addition_table(30)

output:

5 + 1 = 6
5 + 2 = 7
5 + 3 = 8
5 + 4 = 9
5 + 5 = 10
17 + 1 = 18
17 + 2 = 19
17 + 3 = 20
None



def is_power_of_two(number):
  # This while loop checks if the "number" can be divided by two
  # without leaving a remainder. How can you change the while loop to
  # avoid a Python ZeroDivisionError?
  if number == 0:
      return False
  while number % 2 == 0:
    number = number / 2
  # If after dividing by 2 "number" equals 1, then "number" is a power
  # of 2.
  if number == 1:
    return True
  else:
    return False
  
# Calls to the function
print(is_power_of_two(0)) # Should be False
print(is_power_of_two(1)) # Should be True
print(is_power_of_two(8)) # Should be True
print(is_power_of_two(9)) # Should be False

output:

False
True
True
False

def sum_of_integers(n):
    if n < 1:
        return 0

    i = 1
    sum = 0
    while i <= n:
        sum = sum + i
        i = i + 1

    return sum

print(sum_of_integers(3))  # should print 6
print(sum_of_integers(4))  # should print 10
print(sum_of_integers(5))  # should print 15


output:

6
10
15


===== ./grade_Templete.c =====
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

#define MAX_STUDENTS 100
#define STRING_LENGHT 255
#define TEST_SCORES 7
#define TRUE 1
#define FALSE 0



// METHOD 1 : REMOVING EXTRA WHITE SPACE
typedef struct {

    char name[STRING_LENGHT];
    char letterGrade;
    int scores[TEST_SCORES];

} STUDENT;

char *trimString(char *string)
{
    char *end = NULL;

    while (isspace(*string)) string++;

    if (*string == 0)
        return string;

    end = string + strlen(string) - 1;

    while (end > string && isspace(*end))
        end--;

    *(end + 1) = 0;

    return string;

}

// METHOD 2 : READ FROM INPUT FILE
int loadStudents(char *filename, STUDENT students[MAX_STUDENTS], int *numStudents)
{
    FILE *inFile = NULL;

    char *tokenizer = NULL;
    char line[STRING_LENGHT];
    char token[STRING_LENGHT];

    int i = 0;

    inFile = fopen(filename, "r");

    if (!inFile)
    {
        printf("FAIL! Cannot open %s\n", filename);
        return FALSE;

    }

    *numStudents = 0;

    while (fgets(line, STRING_LENGHT, inFile))
    {

        trimString(line);
        tokenizer = strtok(line,",");

        strcpy(token, tokenizer);
        strcpy(token, trimString(token));
        strcpy(students[*numStudents].name, token);

        for (i = 0; i < TEST_SCORES; i++)
        {
            tokenizer = strtok(NULL, ",");
            strcpy(token, tokenizer);
            strcpy(token, trimString(token));
            students[*numStudents].scores[i] = atoi(token);

        } 

        (*numStudents)++;

     } 

    return TRUE;

} 


// METHOD 3 : CALCULATING INDIVIDUAL STUDENT SCORE
double calculateGrade(int scores[TEST_SCORES])
{
    double weights[] = { 0.10, 0.10, 0.10, 0.10, 0.20, 0.15, 0.25 };
    double grade = 0;
    int i = 0;

    for (i = 0; i < TEST_SCORES; i++)
    grade += scores[i] * weights[i];

    return grade;

} 

   // METHOD 4 : CONVERTING FROM STUDENT TOTAL SCORE TO LETTER GRADE
char calculateLetterGrade(double grade)
{
//average = total / 3;
printf("average = %.1f", grade);
        if (grade > 90 && grade <= 100)
                printf("The average grade is: A");
        else if (grade > 80 && grade <= 90)
                printf("The average grade is: B");
        else if (grade > 70 && grade <= 80)
                printf("The average grade is: C");
        else if (grade > 60 && grade <= 70)
                printf("The average grade is: D");
        else if (grade < 60)
                printf("The average grade is: F");
    return grade;
}

// METHOD 5 : CALCULATING STUDENT GRADE
void calculateStudentGrades(STUDENT students[MAX_STUDENTS], int numStudents)
{
    int i = 0;

    for (i = 0; i < numStudents; i++)
        students[i].letterGrade = calculateLetterGrade(calculateGrade(students[i].scores));
}

// METHOD 6 : SORTING STUDENT NAME ALPHABETICALLY
void sortStudents(STUDENT students[MAX_STUDENTS], int numStudents)
{
    int i = 0;
    int j = 0;

    STUDENT temp;

    for (i = 0; i < numStudents - 1; i++)
    {
        for (j = i + 1; j < numStudents; j++)
        {
            if (strcmp(students[i].name, students[j].name) > 0)
            {
                temp = students[i];
                students[i] = students[j];
                students[j] = temp;

            } 
        }         
    }

}

// METHOD 7 : WRITING STUDENT LETTER GRADE TO OUTPUT FILE
int writeGrade(char *filename, char *inputFilename, STUDENT students[MAX_STUDENTS], int numStudents)

{
    FILE *outFile = NULL;
    int i = 0;

    outFile = fopen(filename, "w");

    if (!outFile)

    {
        printf("Error: failed to open %s\n", filename);
        return FALSE;

    } 

    fprintf(outFile, "Letter grade for %d students listed in file %s\n\n\n Here is the class average:\n\n", numStudents, inputFilename);

    for (i = 0; i < numStudents; i++)
        fprintf(outFile, "%s%c\n", strcat(students[i].name, ":"), students[i].letterGrade);

    fclose(outFile);
    return TRUE;

} 


// METHOD 8 : CALCULATING INDIVIDUAL TESTS AVERAGE
double calculateAverage(STUDENT students[MAX_STUDENTS], int numStudents, int scoreCategory)

{
    double sum = 0;
    int i = 0;

    for (i = 0; i < numStudents; i++)
        sum += students[i].scores[scoreCategory];

    return sum / numStudents;

}


// METHOD 9 : BUBBLE SORT AND EXTRACTING MINIMUM SCORE OF EACH TEST
int findMinimumScore(STUDENT students[MAX_STUDENTS], int numStudents, int scoreCategory)

{
    int min = -1;
    int i = 0;

    for (i = 0; i < numStudents; i++)
        if (min == -1 || students[i].scores[scoreCategory] < min)
            min = students[i].scores[scoreCategory];

    return min;

} 


// METHOD 10 : BUBBLE SORT AND EXTRACTING MAXIMUM SCORE OF EACH TEST
int findMaximumScore(STUDENT students[MAX_STUDENTS], int numStudents, int scoreCategory)
{
    int max = -1;
    int i = 0;

    for (i = 0; i < numStudents; i++)
        if (max == -1 || students[i].scores[scoreCategory] > max)
            max = students[i].scores[scoreCategory];

    return max;

}===== ./student_records_sorter.cpp =====
#include "records_sorter.h"
#include <iostream>
using namespace std;

int main() {
    vector<Student> students;
    int option;

    do {
        cout << "|---------------------------------------|" << endl;
        cout << "|         Student Records Sorter        |" << endl;
        cout << "|---------------------------------------|" << endl;
        cout << "|Option | Description                   |" << endl;
        cout << "|-------|-------------------------------|" << endl;
        cout << "| 1     | Load student records          |" << endl;
        cout << "| 2     | View data                     |" << endl;
        cout << "| 3     | MergeSort data                |" << endl;
        cout << "| 4     | QuickSort data                |" << endl;
        cout << "| 5     | Exit                          |" << endl;
        cout << "|---------------------------------------|" << endl;
        cout << endl;
        cout << "Choose an option: ";
        cin >> option;
        cout << endl;

        switch (option) {
            case 1:
                cout << "Loading Student Data...";
                loadStudentRecords(students);
                break;
            case 2:
                viewData(students);
                break;
            case 3:
                mergeSortData(students);
                viewData(students);
                break;
            case 4:
                quickSortData(students, 0, students.size() - 1);
                viewData(students);
                break;
            case 5:
                cout << "Exiting..." << endl;
                break;
            default:
                cout << "Invalid option. Please try again." << endl;
                break;
        }

        cout << endl;
    } while (option != 5);

    return 0;
}

===== ./Person.cpp =====
// Person.cpp
#include "Person.h"
#include <cstdlib>
#include <ctime>

Person::Person(const std::string& name) : name(name) {
    age = rand() % 13 + 20;
}

std::string Person::getName() const {
    return name;
}

int Person::getAge() const {
    return age;
}===== ./c_cpp_properties.json =====
{
    "configurations": [
        {
            "name": "Win32",
            "includePath": [
                "${workspaceFolder}/**"
            ],
            "defines": [
                "_DEBUG",
                "UNICODE",
                "_UNICODE"
            ],
            "windowsSdkVersion": "10.0.22621.0",
            "compilerPath": "cl.exe",
            "cStandard": "c17",
            "cppStandard": "c++17",
            "intelliSenseMode": "windows-msvc-x64"
        }
    ],
    "version": 4
}===== ./test.cpp =====
===== ./ListNode.cpp =====
//ListNode.cpp
#include "ListNode.h"

ListNode::ListNode(double value1, ListNode *next1)
{
    value = value1;
    next = next1;
}===== ./date2.h =====
#ifndef DATE_H
#define DATE_H

#include <array>
#include <iostream>

class Date {
        friend std::ostream& operator<<(std::ostream&, const Date&);
public:
        Date(int m= 1, int d = 1, int y = 1900);
        void setDate(int, int, int);
        Date& operator++();
        Date operator++(int);
        Date & operator+=(unsigned int);
        static bool leapYear(int);
        bool endOfMonth(int) const;
private:
        unsigned int month;
        unsigned int day;
        unsigned int year;

        static const std::array<unsigned int, 13> days;
        void helpIncrement();
};
#endif
===== ./program6.cpp =====
#include <iostream>
#include <string>

int main() {
  int primary_color_1;
  std::cout << "Select one of the three primary colors: " << std::endl;
  std::cout << "1. Red" << std::endl;
  std::cout << "2. Blue" << std::endl;
  std::cout << "3. Yellow" << std::endl;
  std::cin >> primary_color_1;

  int primary_color_2;
  std::cout << "Select another primary color: " << std::endl;
  std::cout << "1. Red" << std::endl;
  std::cout << "2. Blue" << std::endl;
  std::cout << "3. Yellow" << std::endl;
  std::cin >> primary_color_2;

  std::string result_color;
  if (primary_color_1 == 1 && primary_color_2 == 2) {
    result_color = "Purple";
  } else if (primary_color_1 == 2 && primary_color_2 == 3) {
    result_color = "Green";
  } else if (primary_color_1 == 1 && primary_color_2 == 3) {
    result_color = "Orange";
  } else {
    result_color = "Invalid combination";
  }

  std::cout << "Your color is " << result_color << "." << std::endl;

  return 0;
}
===== ./polyhedra.txt =====
Tetrahedron,3 | 2 3,Td,C15,W001,U01,K06,4,6,4,4{3}
Triangular prism,2 3 | 2,D3h,C33a,—,U76a,K01a,6,9,5,2{3}+3{4}
Truncated tetrahedron,2 3 | 3,Td,C16,W006,U02,K07,12,18,8,4{3}+4{6}
Truncated cube,2 3 | 4,Oh,C21,W008,U09,K14,24,36,14,8{3}+6{8}
Truncated dodecahedron,2 3 | 5,Ih,C29,W010,U26,K31,60,90,32,20{3}+12{10}
Cube,3 | 2 4,Oh,C18,W003,U06,K11,8,12,6,6{4}
Pentagonal prism,2 5 | 2,D5h,C33b,—,U76b,K01b,10,15,7,5{4}+2{5}
Hexagonal prism,2 6 | 2,D6h,C33c,—,U76c,K01c,12,18,8,6{4}+2{6}
Heptagonal prism,2 7 | 2,D7h,C33d,—,U76d,K01d,14,21,9,7{4}+2{7}
Octagonal prism,2 8 | 2,D8h,C33e,—,U76e,K01e,16,24,10,8{4}+2{8}
Enneagonal prism,2 9 | 2,D9h,C33f,—,U76f,K01f,18,27,11,9{4}+2{9}
Decagonal prism,2 10 | 2,D10h,C33g,—,U76g,K01g,20,30,12,10{4}+2{10}
Hendecagonal prism,2 11 | 2,D11h,C33h,—,U76h,K01h,22,33,13,11{4}+2{11}
Dodecagonal prism,2 12 | 2,D12h,C33i,—,U76i,K01i,24,36,14,12{4}+2{12}
Truncated octahedron,2 4 | 3,Oh,C20,W007,U08,K13,24,36,14,6{4}+8{6}
Truncated cuboctahedron,2 3 4 |,Oh,C23,W015,U11,K16,48,72,26,12{4}+8{6}+6{8}
Truncated icosidodecahedron,2 3 5 |,Ih,C31,W016,U28,K33,120,180,62,30{4}+20{6}+12{10}
Dodecahedron,3 | 2 5,Ih,C26,W005,U23,K28,20,30,12,12{5}
Truncated icosahedron,2 5 | 3,Ih,C27,W009,U25,K30,60,90,32,12{5}+20{6}
Octahedron,4 | 2 3,Oh,C17,W002,U05,K10,6,12,8,8{3}
Square antiprism,| 2 2 4,D4d,C34a,—,U77a,K02a,8,16,10,8{3}+2{4}
Pentagonal antiprism,| 2 2 5,D5d,C34b,—,U77b,K02b,10,20,12,10{3}+2{5}
Hexagonal antiprism,| 2 2 6,D6d,C34c,—,U77c,K02c,12,24,14,12{3}+2{6}
Heptagonal antiprism,| 2 2 7,D7d,C34d,—,U77d,K02d,14,28,16,14{3}+2{7}
Octagonal antiprism,| 2 2 8,D8d,C34e,—,U77e,K02e,16,32,18,16{3}+2{8}
Enneagonal antiprism,| 2 2 9,D9d,C34f,—,U77f,K02f,18,36,20,18{3}+2{9}
Decagonal antiprism,| 2 2 10,D10d,C34g,—,U77g,K02g,20,40,22,20{3}+2{10}
Hendecagonal antiprism,| 2 2 11,D11d,C34h,—,U77h,K02h,22,44,24,22{3}+2{11}
Dodecagonal antiprism,| 2 2 12,D12d,C34i,—,U77i,K02i,24,48,26,24{3}+2{12}
Cuboctahedron,2 | 3 4,Oh,C19,W011,U07,K12,12,24,14,8{3}+6{4}
Rhombicuboctahedron,3 4 | 2,Oh,C22,W013,U10,K15,24,48,26,8{3}+(6+12){4}
Rhombicosidodecahedron,3 5 | 2,Ih,C30,W014,U27,K32,60,120,62,20{3}+30{4}+12{5}
Icosidodecahedron,2 | 3 5,Ih,C28,W012,U24,K29,30,60,32,20{3}+12{5}
Icosahedron,5 | 2 3,Ih,C25,W004,U22,K27,12,30,20,20{3}
Snub cube,| 2 3 4,O,C24,W017,U12,K17,24,60,38,(8+24){3}+6{4}
Snub dodecahedron,| 2 3 5,I,C32,W018,U29,K34,60,150,92,(20+60){3}+12{10}
Octahemioctahedron,3/2 3 | 3,Oh,C37,W068,U03,K08,12,24,12,8{3}+4{6}
Tetrahemihexahedron,3/2 3 | 2,Td,C36,W067,U04,K09,6,12,7,4{3}+3{4}
Cubohemioctahedron,4/3 4 | 3,Oh,C51,W078,U15,K20,12,24,10,6{4}+4{6}
Great dodecahedron,5/2 | 2 5,Ih,C44,W021,U35,K40,12,30,12,12{5}
Great icosahedron,5/2 | 2 3,Ih,C69,W041,U53,K58,12,30,20,20{3}
Great ditrigonal icosidodecahedron,3/2 | 3 5,Ih,C61,W087,U47,K52,20,60,32,20{3}+12{5}
Small rhombihexahedron,2 4 (3/2 4/2) |,Oh,C60,W086,U18,K23,24,48,18,12{4}+6{8}
Small cubicuboctahedron,3/2 4 | 4,Oh,C38,W069,U13,K18,24,48,20,8{3}+6{4}+6{8}
Great rhombicuboctahedron,3/2 4 | 2,Oh,C59,W085,U17,K22,24,48,26,8{3}+(6+12){4}
Small dodecahemiicosahedron,5/4 5 | 5,Ih,C65,W091,U51,K56,30,60,18,12{5}+6{10}
Great dodecahemidodecahedron,5/4 5 | 3,Ih,C81,W102,U65,K70,30,60,22,12{5}+10{6}
Small icosihemidodecahedron,3/2 3 | 5,Ih,C63,W089,U49,K54,30,60,26,20{3}+6{10}
Small dodecicosahemidodecahedron,3/2 5 | 5,Ih,C42,W072,U33,K38,60,120,44,20{3}+12{5}+12{10}
Rhombicosahedron,2 3 (5/4 5/2) |,Ih,C72,W096,U56,K61,60,120,50,30{4}+20{6}
Great icosicosidodecahedron,3/2 3 | 5/3,Ih,C79,W101,U63,K68,60,120,52,20{3}+12{5}+20{6}
Great rhombidodecahedron,2 5/2 (3/2 5/2) |,Ih,C89,W109,U73,K78,60,120,42,30{4}+12{10/3}
Icosidodecahedron,2 5/3 (3/2 5/4) |,Ih,C91,W118,U72,K77,60,120,44,20{3}+12{5/2}+12{5/2}
Small dodecicosahemidodecahedron,3/2 5 | 5,Ih,C90,W117,U74,K79,60,120,44,20{3}+12{5/2}+12{5/2}
Great snub cube,| 2 3 4,I,C49,W111,U40,K45,60,150,84,60{3}+12{5}+12{5/2}
Great inverted snub dodecahedron,| 2 3 5,I,C76,W114,U60,K65,60,150,84,60{3}+12{5}+12{5/2}
Great snub icosidodecahedron,| 2 3 5,I,C73,W113,U57,K62,60,150,92,(20+60){3}+12{5/2}
Great inverted snub icosidodecahedron,| 2 3 5,I,C88,W116,U69,K74,60,150,92,(20+60){3}+12{5/2}
Great inverted snub icosidodecahedron,| 2 3 5,I,C80,W115,U64,K69,60,180,104,(20+60){3}+(12+12){5/2}
Snub dodecahedron,| 5/3 2 5,I,C49,W111,U40,K45,60,150,84,(60+12){3}+12{5}+12{5/2}
Great snub dodecahedron,| 3/2 5/2 5/3,I,C73,W113,U57,K62,60,150,92,(20+60){3}+12{5/2}
Great retrosnub dodecahedron,| 3/2 5/2 5/4,I,C88,W116,U69,K74,60,150,92,(20+60){3}+12{5/2}
Great retrosnub icosidodecahedron,| 3/2 5/2 5/4,I,C80,W115,U64,K69,60,180,104,(20+60){3}+(12+12){5/2}
Great retrosnub icosidodecahedron,| 3/2 5/2 5/4,I,C90,W117,U74,K79,60,180,104,(20+60){3}+(12+12){5/2}
Great retrosnub icosicosidodecahedron,| 3/2 5/3 3 5/2,I,C92,W119,U75,K80,60,240,124,40{3}+60{4}+24{5/2}===== ./loginPrime(working).c =====
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_USERNAME_LENGTH 20
#define MAX_PASSWORD_LENGTH 20
#define MAX_SCHEDULE_LENGTH 20
#define MAX_TASKS 100
#define MAX_EMPLOYEES 5

struct Employee {
    char username[MAX_USERNAME_LENGTH];
    char password[MAX_PASSWORD_LENGTH];
};

struct Employee employees[] = {
    { "John", "123456" },
    { "Joe", "123456" },
    { "Martha", "123456" },
    { "Edward", "123456" },
    { "Sarah", "123456" }
};

struct Task {
    int id;
    char description[100];
    int status;
};


struct Task schedule[MAX_SCHEDULE_LENGTH];
struct Task tasks[MAX_TASKS];

int numEmployees = sizeof(employees) / sizeof(employees[0]);
char loggedInUser[MAX_USERNAME_LENGTH];

void login() {
    char username[MAX_USERNAME_LENGTH];
    char password[MAX_PASSWORD_LENGTH];

    printf("Enter your username: ");
    scanf("%s", username);
    printf("Enter your password: ");
    scanf("%s", password);

    for (int i = 0; i < numEmployees; i++) {
        if (strcmp(username, employees[i].username) == 0 && strcmp(password, employees[i].password) == 0) {
            strcpy(loggedInUser, username);
            printf("Login successful!\n");
            return;
        }
    }

    printf("Invalid username or password.\n");
}

void viewSchedule() {
    printf("----- Schedule -----\n");

    char filename[50];
    sprintf(filename, "%s_tasks.txt", loggedInUser); // Constructing the filename

    FILE *file = fopen(filename, "r");
    if (file == NULL) {
        printf("Error opening task file.\n");
        return;
    }

    int id, status;
    char description[100];

    while (fscanf(file, "%d ", &id) != EOF) {
        fgets(description, sizeof(description), file);
        fscanf(file, "%d", &status);
        fgetc(file); // Read the newline character

        printf("%d %s %d\n", id, description, status);
    }

    fclose(file);
}




void addTask() {
    int id;
    char description[100];

    printf("Enter the task ID: ");
    scanf("%d", &id);
    printf("Enter the task description: ");
    scanf(" %[^\n]s", description);

    int index = -1;
    for (int i = 0; i < MAX_TASKS; i++) {
        if (tasks[i].id == 0) {
            index = i;
            break;
        }
    }

    if (index != -1) {
        tasks[index].id = id;
        strcpy(tasks[index].description, description);
        tasks[index].status = 1;

        char filename[50];
        sprintf(filename, "%s_tasks.txt", loggedInUser);
        FILE *file = fopen(filename, "a");
        if (file != NULL) {
            fprintf(file, "%d %s %d\n", id, description, 1);
            fclose(file);
            printf("Task added successfully!\n");
        } else {
            printf("Error opening task file.\n");
        }
    } else {
        printf("Task storage is full. Cannot add more tasks.\n");
    }
}


void removeTask() {
    int id;

    printf("Enter the task ID to remove: ");
    scanf("%d", &id);

    char filename[50];
    sprintf(filename, "%s_tasks.txt", loggedInUser);
    FILE *file = fopen(filename, "r+");
            if (file != NULL) {
                for (int j = 0; j < MAX_TASKS; j++) {
                    if (tasks[j].id != 0) {
                        fprintf(file, "%d %s %d\n", tasks[j].id, tasks[j].description, tasks[j].status);
                    }
                }
                fclose(file);
                printf("Task removed successfully!\n");
                return;
            } else {
                printf("Error opening task file.\n");
                return;
            }
        }
    //}

//    printf("No task found with the specified ID.\n");
//}
int main() {
    login();

    if (strlen(loggedInUser) == 0) {
        printf("Authentication failed. Exiting...\n");
        return 0;
    }

    int choice;
    do {
        printf("\n----- Employee Scheduler -----\n");
        printf("1. View Schedule\n");
        printf("2. Add Task\n");
        printf("3. Remove Task\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                viewSchedule();
                break;
            case 2:
                addTask();
                break;
            case 3:
                removeTask();
                break;
            case 4:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice. Please try again.\n");
                break;
        }
    } while (choice != 4);

    return 0;
}
===== ./student_grades_struct.c =====
#include <stdio.h>

typedef struct{
    char firstName[25];
    char lastName[25];
    double grades[5];
}students;

printData(students student[], int);
int loadData(students student[]);
void averageGrade(students student[], int i);

int main()
{
    students student[10];
    int numStudents = 0;
    numStudents = loadData(student);
    printData (student, numStudents);
    

    return 0;
}

printData(students student[], int numStudents)
{
    int i = 0;
    for(i = 0; i < numStudents; i++){
        printf("%s %s", student[i].firstName, student[i].lastName);
        averageGrade(student, i);
    }
}
int loadData(students student[])
{
    FILE *fh;
    int x = 0;
    
    if((fh = fopen("grades.txt", "r"))==NULL){
        printf("File is inaccessible!");
        return 1;
    }
    fscanf(fh, "%s%s%lf%lf%lf%lf%lf", student[x].firstName, student[x].lastName, &student[x].grades[0], &student[x].grades[1], &student[x].grades[2], &student[x].grades[3], &student[x].grades[4]);
    while(!feof(fh)){
        x = x + 1;
            fscanf(fh, "%s%s%lf%lf%lf%lf%lf", student[x].firstName, student[x].lastName, &student[x].grades[0], &student[x].grades[1], &student[x].grades[2], &student[x].grades[3], &student[x].grades[4]);
    }
    fclose(fh);
    return x;
}
void averageGrade(students student[], int i){
        double average;
        double total = 0;
        int j;
            for (j = 0; j < 5; j++){
                total = total + student[i].grades[j];
            }
            average = total / 5;
            printf(" average = %.1f", average);
            if ( average > 90 && average <= 100)
                printf(" The average grade is: A\n");
            else if (average > 80 && average <= 90)
                printf(" The average grade is: B\n");
            else if (average > 70 && average <= 80)
                printf(" The average grade is: C\n");
            else if (average > 60 && average <= 70)
                printf(" The average grade is: D\n");
            else if (average < 60)
                printf(" The average grade is: F\n");
}
===== ./poem.txt =====
There once was a person named and giving
Give way too much because they love people deeply
but nobody treated them as such.
Giving started to feel empty giving had little left to give
And giving started to feel like they would never fully live
Giving met Taking but Giving didn't know how to let go
And Giving lost everything but never really let it show 
Taking eventually left, taking everything it could
And Taking never look back, even when Giving hope that they would 
Giving sat down at a bench where Giving met Time
And Time told Giving everything's going to be just fine
Giving sat there for a while waiting for someone new
And Giving started to wonder if someone was waiting for them to 
Giving eventually stood up they walked around the block
Where Giving saw somebody who was sitting next to a clock 
Giving new time but they didn't want to interrupt to greet 
so giving kept walking is that someone stood from their seat 
giving wondered about them but giving was afraid 
because Giving had always given but that love had never stayed 
but Committing wasn't afraid and Committing knew how to give 
so Committing ran up to Giving and taught them him to forgive. 
Committing meant giving and introduced them to receiving 
and Giving became so abundant they forgot they ever knew leaving.===== ./enchanted_forest_game.cpp =====
//jrivas_lab7.cpp
#include <iostream>
#include <string>
#include <thread>
#include <algorithm>
#include "Node.h"
using namespace std;

Node::Node(string desc) : description(desc), gem(false), sword(false), chest(false), cave(false), north(nullptr), south(nullptr), east(nullptr), west(nullptr) {}

void print_with_pause(string text, int pause_time = 1500);

string to_lower(string str);

void explore_forest(Node* current_location, bool& found_gem, bool& found_sword, bool& found_chest, bool& found_cave);

int main() {
    
    Node* start = new Node("\033[96m🌲 Welcome to the Enchanted Forest! As you step into the forest, you feel a gentle breeze carrying whispers of ancient magic.\033[0m");
    Node* heart_of_forest = new Node("\033[96m🌳 You've reached the heart of the Enchanted Forest. Majestic trees tower above, their branches swaying in harmony with the forest's melody.\033[0m");
    Node* fork_in_path = new Node("\033[96m🌅 At a fork in the path, you sense two distinct energies calling to you – one vibrant and lively, the other tranquil and mysterious.\033[0m");
    Node* meadow = new Node("\033[96m🌼 Entering a sun-kissed meadow, you're greeted by a chorus of singing birds and dancing flowers. Nature's symphony fills your heart with joy.\033[0m");
    Node* hidden_cave = new Node("\033[96m🏞️ Concealed behind a waterfall, you find a hidden cave. The air is thick with magic, and you can't help but feel a sense of wonder.\033[0m");
    Node* crystal_cavern = new Node("\033[96m️⛰️Venturing into the cave, you discover a breathtaking crystal cavern, its walls adorned with precious gems that twinkle like stars.\033[0m");
    Node* glade = new Node("\033[96m🌺 You stumble upon a tranquil glade, bathed in soft sunlight. Colorful flowers bloom all around, emitting a sweet fragrance.\033[0m");
    Node* ancient_ruins = new Node("\033[96m🏰 You come across ancient ruins, remnants of a once-glorious civilization. Whispers of forgotten tales linger in the air.\033[0m");
    Node* mystical_pool = new Node("\033[96m🌊 A mystical pool shimmers in the sunlight, its waters reflecting the secrets of the forest.\033[0m");
    Node* whispering_trees = new Node("\033[96m🌳 The whispering trees beckon you closer, their ancient voices carrying hints of hidden knowledge.\033[0m");
    Node* enchanted_meadow = new Node("\033[96m🍄 Walking into an enchanted meadow, you find yourself surrounded by magical mushrooms of all shapes and sizes.\033[0m");
    Node* shimmering_falls = new Node("\033[96m💧 A cascading waterfall shimmers in the distance, its mesmerizing beauty drawing you closer.\033[0m");
    Node* ethereal_clearing = new Node("\033[96m✨ You step into an ethereal clearing, bathed in the soft glow of faerie lights. Time seems to stand still in this magical place.\033[0m");
    Node* ancient_grove = new Node("\033[96m🌳 You wander into an ancient grove, where ancient spirits linger among the ancient trees.\033[0m");
    Node* forgotten_path = new Node("\033[96m🌿 You stumble upon a forgotten path, overgrown with moss and ivy. It seems to lead to an unknown destination.\033[0m");
    Node* twilight_glade = new Node("\033[96m🌄 You discover a tranquil glade bathed in twilight hues, the sky painted with shades of orange and purple.\033[0m");
    Node* luminous_lake = new Node("\033[96m🌅 A luminous lake stretches before you, its waters reflecting the colors of the setting sun.\033[0m");
    Node* ancient_altar = new Node("\033[96m⛩️ You stumble upon an ancient altar, carved with mysterious symbols. The air around it hums with ancient power.\033[0m");
    Node* hidden_clearing = new Node("\033[96m🍃 A hidden clearing appears before you, surrounded by towering trees. It seems untouched by time.\033[0m");

    crystal_cavern->gem = true;
    hidden_cave->sword = true;
    fork_in_path->chest = true;
    meadow->cave = true;

    start->north = heart_of_forest;
    heart_of_forest->south = start;
    heart_of_forest->north = fork_in_path;
    fork_in_path->south = heart_of_forest;
    fork_in_path->east = meadow;
    fork_in_path->west = hidden_cave;
    meadow->west = fork_in_path;
    hidden_cave->east = fork_in_path;
    hidden_cave->north = crystal_cavern;
    crystal_cavern->south = hidden_cave;

    start->east = ancient_ruins;
    start->west = mystical_pool;
    ancient_ruins->west = start;
    mystical_pool->east = start;

    heart_of_forest->east = whispering_trees;
    heart_of_forest->west = enchanted_meadow;
    whispering_trees->west = heart_of_forest;
    enchanted_meadow->east = heart_of_forest;

    fork_in_path->east = shimmering_falls;
    fork_in_path->west = ethereal_clearing;
    shimmering_falls->west = fork_in_path;
    ethereal_clearing->east = fork_in_path;

    hidden_cave->south = ancient_grove;
    hidden_cave->east = forgotten_path;
    ancient_grove->north = hidden_cave;
    forgotten_path->west = hidden_cave;

    meadow->north = twilight_glade;
    meadow->south = luminous_lake;
    twilight_glade->south = meadow;
    luminous_lake->north = meadow;

    crystal_cavern->east = ancient_altar;
    crystal_cavern->west = hidden_clearing;
    ancient_altar->west = crystal_cavern;
    hidden_clearing->east = crystal_cavern;

    print_with_pause("\033[96mWelcome to the Enchanted Forest!\033[0m");

    string user_name;
    cout << "\033[93mWhat's your name, brave adventurer? \033[0m";
    cin >> user_name;

    print_with_pause("\n\033[1m\033[92mGreetings, " + user_name + "! Prepare to embark on a magical journey!\033[0m");

    bool found_gem = false;
    bool found_sword = false;
    bool found_chest = false;
    bool found_cave = false;

    explore_forest(start, found_gem, found_sword, found_chest, found_cave);

    delete start;
    delete heart_of_forest;
    delete fork_in_path;
    delete meadow;
    delete hidden_cave;
    delete crystal_cavern;
    delete glade;
    delete ancient_ruins;
    delete mystical_pool;
    delete whispering_trees;
    delete enchanted_meadow;
    delete shimmering_falls;
    delete ethereal_clearing;
    delete ancient_grove;
    delete forgotten_path;
    delete twilight_glade;
    delete luminous_lake;
    delete ancient_altar;
    delete hidden_clearing;

    print_with_pause("\n\033[96mThank you for exploring the Enchanted Forest. Come back soon!\033[0m");

    return 0;
}===== ./gbk-added.json =====
[
["a140","",62],
["a180","",32],
["a240","",62],
["a280","",32],
["a2ab","",5],
["a2e3","€"],
["a2ef",""],
["a2fd",""],
["a340","",62],
["a380","",31,"　"],
["a440","",62],
["a480","",32],
["a4f4","",10],
["a540","",62],
["a580","",32],
["a5f7","",7],
["a640","",62],
["a680","",32],
["a6b9","",7],
["a6d9","",6],
["a6ec",""],
["a6f3",""],
["a6f6","",8],
["a740","",62],
["a780","",32],
["a7c2","",14],
["a7f2","",12],
["a896","",10],
["a8bc",""],
["a8bf","ǹ"],
["a8c1",""],
["a8ea","",20],
["a958",""],
["a95b",""],
["a95d",""],
["a989","〾⿰",11],
["a997","",12],
["a9f0","",14],
["aaa1","",93],
["aba1","",93],
["aca1","",93],
["ada1","",93],
["aea1","",93],
["afa1","",93],
["d7fa","",4],
["f8a1","",93],
["f9a1","",93],
["faa1","",93],
["fba1","",93],
["fca1","",93],
["fda1","",93],
["fe50","⺁⺄㑳㑇⺈⺋㖞㘚㘎⺌⺗㥮㤘㧏㧟㩳㧐㭎㱮㳠⺧⺪䁖䅟⺮䌷⺳⺶⺷䎱䎬⺻䏝䓖䙡䙌"],
["fe80","䜣䜩䝼䞍⻊䥇䥺䥽䦂䦃䦅䦆䦟䦛䦷䦶䲣䲟䲠䲡䱷䲢䴓",6,"䶮",93]
]
===== ./correctcase2.txt =====
case 2: {
            // Find the class with the highest average grade
          int max_sort = -1;
            double max_avg_grade = -1.0;
            for (int i = 0; i < num_classes; i++) {
                double sum = 0.0;
                for (int j = 0; j < NUM_GRADES; j++) {
                    sum += classes[i].grades[j];
                }
                double avg_grade = sum / NUM_GRADES;
                if (avg_grade > max_avg_grade) {
                    max_sort = i;
                    max_avg_grade = avg_grade;
                }
            }
    
            // Output the class with the highest average grade
            if (max_sort == -1) {
                std::cout << "No classes found." << std::endl;
            } else {
                std::cout << "Class with highest average grade: " << classes[max_sort].subject << std::endl;
                    }
                    break;
                }===== ./fig09_22.cpp =====
#include <iostream>
#include <sstream>
#include "Employee.h" 
#include "Date.h"
using namespace std;

int main() {
    Date birth{ 7, 24, 1949 };
    Date hire{ 3, 12, 1988 };
    Employee manager{ "Bob", "Blue", birth, hire };

    cout << "\n" << manager.toString() << endl;

}===== ./return grade.txt =====
login as: jrivas12
Keyboard-interactive authentication prompts from server:
| Password:
| Duo two-factor login for jrivas12
|
| Enter a passcode or select one of the following options:
|
|  1. Duo Push to XXX-XXX-2599
|  2. Phone call to XXX-XXX-2599
|  3. SMS passcodes to XXX-XXX-2599
|
| Passcode or option (1-3): 1
End of keyboard-interactive prompts from server
Success. Logging you in...
Last login: Thu Dec  8 10:09:28 2022 from 72.180.129.209
[jrivas12@greenfield ~]$ ls
chapter10  chapter11  chapter2  chapter3  chapter4  chapter5  chapter6  chapter7  final  sample  tests
[jrivas12@greenfield ~]$ cd chapter4
[jrivas12@greenfield chapter4]$ ;s
-bash: syntax error near unexpected token `;'
[jrivas12@greenfield chapter4]$ cd chapter5
-bash: cd: chapter5: No such file or directory
[jrivas12@greenfield chapter4]$ ls
program1.c    program2.c    program3.c    program4.c    program5.c    program6.c
program1.exe  program2.exe  program3.exe  program4.exe  program5.exe  program6.exe
[jrivas12@greenfield chapter4]$ vi program6.c
[jrivas12@greenfield chapter4]$ gcc program6.c -o program6.exe -std=c99
program6.c: In function ‘main’:
program6.c:6:2: error: ‘print’ undeclared (first use in this function)
  print
  ^
program6.c:6:2: note: each undeclared identifier is reported only once for each function it appears in
program6.c:7:2: error: expected ‘;’ before ‘int’
  int choice;
#include <stdio.h>
#define STUDENTS 2
#define EXAMS 4

int minimum(const int grades[] [EXAMS], int pupils, int test);
int maximum(const int grades[] [EXAMS], int pupils, int test);
double average(const int setOfGrades [], int test);
void printArray(const int grades[][EXAMS], int pupils, int test);


int main (void);{

int student;

const int studentGrades[STUDENTS][EXAMS]=
{{77, 68, 86, 73},
{96, 87, 89, 78},
{70, 90, 86, 81}};

printf("The array is:\n");
printArray(studentGrades, STUDENTS, EXAMS);

printf("\n\nLowest grade: %d\nHighest grade:%d\n",
                minimum(studentGrades, STUDENTS, EXAMs),
                maximum(studentGrades, STUDENTS, EXAMS));
        for(student = 0;student < STUDENTS; student++){
        printf("The average grade for student %d is %.2f\n"),
                student, average(studentGrades[student], EXAMS));
        }
return 0;
}
int minimum(const int grades[][EXAMS], int pupils, int tests)
{
        int i;
        int j;
        int lowGrade = 100;

        for (i = 0; i < pupils; i++){
                for(j = 0; j < tests; j++){
                        if(grades[i][j] < lowGrade){
                                lowgrade = grades [i][j];
                        }
                }
        }
        return lowGrade;
}
int minimum(const int grades[][EXAMS], int pupils, int tests)
{
        int i;
        int j;
        int highGrade = 0;

        for (i = 0; i < pupils; i++){
               for(j = 0; j < tests; j++){
                       if(grades[i][j] > highGrade){
                               highgrade = grades [i][j];
                       }
                }
        }
         return highGrade;
}
~
                                                                                                                                                                                                                           12,0-1        All
===== ./date_class.cpp =====
#include <iostream>
#include <string>
#include "Date.h"
using namespace std;

const array<unsigned int, 13> Date::days{
        0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

Date::Date(int month, int day, int year) {
    setDate(month, day, year);
}

void Date::setDate(int mm, int dd, int yy) {
        if (mm >= 1 && mm <= 12) {
                month = mm;
        }
        else {
                throw invalid_argument{"Month must be 1-12"};
        }
        if ( yy >= 1090 && yy <= 2100) {
                year = yy;
        }
        else {
                throw invalid_argument{"year must be >= 1900 and <= 2100"};
        }

        if ((mm == 2 && leapYear(year) && dd >= 1 && dd <= 29) || (dd >= 1 && dd <= days[mm])) {
                day = dd;
        }
        else {
                throw invalid_argument {
                        "Day is our of range for current month and year"};
        }
}

Date& Date::operator++() {
    helpIncrement();
    return *this;
}

Date Date::operator++(int) {
    Date temp{*this};
    helpIncrement();

    return temp;
}

Date& Date::operator+=(unsigned int additionalDays) {
    for (unsigned int i = 0; i < additionalDays; ++i) {
        helpIncrement();
    }

    return *this;
}

bool Date::leapYear(int testYear) {
        return (testYear % 400 == 0 ||
                (testYear % 100 != 0 && testYear % 4 == 0));
}

bool Date::endOfMonth(int testDay) const {
        if ( month == 2 && leapYear(year)) {
                return testDay == 29;
        }
        else {
                return testDay == days[month];
        }
}

void Date::helpIncrement() {
        if (!endOfMonth(day)) {
                ++day;
        }
        else {
                if (month < 12) {
                        ++month;
                        day = 1;
                }
                else {
                        ++year;
                        month = 1;
                        day = 1;
                }
        }
}

ostream& operator<<(ostream& output, const Date& d) {
        static string monthName[13] = {"", "January", "February", "March", "April", "May", "June", "July",
                "August", "September", "October", "November", "December"};
        output << monthName[d.month] << ' ' << d.day << ", " << d.year;
        return output;
}===== ./movieData3.txt =====
#include <stdio.h>

struct record{
        int inputMovie;
        char title[25]/*(dataInput)*/;
        char dir[25];
        char date[11];
        int length;
}movieArray[3];

int archMenu();
//int displayMov( void );
void dataMenu(int i);
void printMovie(int recordNum);
void printArchive(int recordNum);
//void readMovie( FILE *fMov);
//void newMovie( FILE *fMov );

void printArchive(int recordNum);
int main() { 
        //FILE *fMov;
        int dataInput=0;
        int recordNum = 0;
        //open
        //read movie
        int choiceData=0;
        do{
                dataInput = archMenu();
                switch(dataInput){
                        case 1:
                                printf("Initializing archive tools: \n");
                                dataMenu(recordNum);
                                recordNum++;
                                break;
                        case 2:
                                printf("Display Movie Data: \n");
                                printMovie(recordNum);
                                recordNum++;
                                break;
                        case 3:
                                printf("Listing All Archive Data: \n");
                                break;
                        case 4:
                                printf("Thanks for using the movie library.\n\n");
                                break;
                        default:
                                printf("error: Please enter a correct option!\n");
                                break;    
                    
                        
                        }   
                   
                }while(dataInput!=4);
                //riteto filer(file);
                //readmovie
        
        return 0;
}
int archMenu() {
//1. determinant menu
        //double dataInput;
        int choice=0;
        printf("Welcome to the Movie Library!\n");
        printf("**************************\n");
        printf("\nEnter Option\n");
        printf("\n1) Insert Movie Record\n");
        printf("\n2) List Movie\n");
        printf("\n3) Movie Catalog\n");
        printf("\n4) Exit?\n");
        printf("**************************\n");
     do{
                printf("Option: \n");
                scanf("%d", &choice);
      }while(choice<1 || choice>4);
        return choice;
}

void dataMenu(int i) {
/*1A newMov data input*/
        while((getchar())!='\n');
        printf("\t\tEnter Movie Title: ");
        fgets(movieArray[i].title,25, stdin);
        while((getchar())!='\n');
        printf("\t\tEnter Director: ");
        fgets(movieArray[i].dir,25, stdin);
        fflush(stdin);
        while((getchar())!='\n');
        printf("\t\tEnter Release Date: ");
        fgets(movieArray[i].date, 11, stdin);
        //scanf("%s",&movieArray[i].date);
        printf("\t\tEnter Length: ");
        scanf("%d",&movieArray[i].length);
}
//printmovie
void printMovie(int recordNum){
    if (recordNum<0){
        printf("Title: %s\n", movieArray[recordNum-1].title);
        printf("Director: %s\n", movieArray[recordNum-1].dir);
        printf("Date: %s\n", movieArray[recordNum-1].date);
        fprintf("Length: %d\n", movieArray[recordNum-1].length);
    }
    else
        printf("No movie found");
}
void printArchive(int recordNum){
    if(recordNum>0){
        for(int i=0; i<recordNum; i++){
            printf("Title: %s\n", movieArray[i].title);
            printf("Director: %s\n", movieArray[i].dir);
            printf("Date: %s\n", movieArray[i].date);
            printf("Lenght: %d\n", movieArray[i].length);
        }
    }
}

//void record( FILE *newMov)
//{
//    FILE *fMov; 
//    struct inputData record = { 0, 0, 0, 0 };

 
//    if ( ( newMov = fopen( "fmov.txt", "w" ) ) == NULL ) {
//        printf( "File could not be opened.\n" );
//    } 
 //   else {
//        rewind( readMov ); 
//        fprintf( newMov   , "title",
//                "dir", "date", "lenght");
//
//        while ( !feof( newMov ) ) {
//            fread( &record, sizeof( struct record ), 1, newMov );
//            
//            if (record.movie != 0 ) {
//                fprintf( newMov, "%-c%-c%-d%d\n",
//                        record.tille, record.dir, record.date, record.lengh );       
//            } 
//        } 
//     fclose( newMov );
//   } 
//  } ===== ./midterm_grades_functions.c =====
#include <stdio.h>

void checkGrade(int grade);
double average(int x, int y, int z);
int max(int x, int y, int z);
int min(int x, int y, int z);


int main()
{
    int gradeA=90;
    int gradeB=80;
    int gradeC=70;
    
    
    printf("1) Enter three grades: \n");
    printf("2) Show Avarage \n");
    printf("3) Show Highest Grade \n");
    printf("4) Show Lowest Grade \n");
    printf("5) Exit \n");
    

    return 0;
}

void checkGrade(int grade){
    
}

double average(int x, int y, int z){
    
    double average(x + y + z)/3;
    return average;
}
int max(int x, int y, int z){
    if (x >= y && x >= z)
    max = x;
    else if (y >=x && y >=z)
    max = y;
    else
    max = z;
}
int min(int x, int y, int z){
    
}
===== ./sales_linear_regression.cpp =====
#include <iostream>
#include <vector>
using namespace std;

// Function to calculate the linear regression parameters (slope and y-intercept)
void calculateLinearRegression(const vector<int>& sales, double& slope, double& yIntercept) {
  int n = sales.size();
  double sumX = 0, sumY = 0, sumXY = 0, sumX2 = 0;

  // Calculate the sums needed for linear regression
  for (int i = 0; i < n; i++) {
    sumX += i;      // x-values (month)
    sumY += sales[i]; // y-values (sales)
    sumXY += i * sales[i]; // x * y
    sumX2 += i * i; // x^2
  }

  // Calculate the slope (m) and y-intercept (b) of the linear regression line (y = mx + b)
  slope = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX);
  yIntercept = (sumY - slope * sumX) / n;
}

int main() {
  // Create a vector to store the sales data.
  vector<int> sales;
  sales.push_back(10);
  sales.push_back(12);
  sales.push_back(14);

  // Fit a straight line (linear regression) to the data points.
  double slope, yIntercept;
  calculateLinearRegression(sales, slope, yIntercept);

  // Predict the number of sales next month (assuming the next month is month 3).
  int nextMonth = 3;
  int predictedSales = slope * nextMonth + yIntercept;

  // Print the linear regression parameters and the predicted sales.
  cout << "Linear Regression Parameters:" << endl;
  cout << "Slope (m): " << slope << endl;
  cout << "Y-Intercept (b): " << yIntercept << endl;
  cout << "Predicted sales for month " << nextMonth << ": " << predictedSales << endl;

  return 0;
}
===== ./account.h =====
#include <string>
using namespace std;

class Account {
public:
        Account(std::string accountName, int initialBalance)
        : name{accountName} {
        if(initialBalance > 0) {
            balance = initialBalance;
            }
        }
        void deposit(int depositAmount) {
            if(depositAmount > 0) {
                balance = balance + depositAmount;
            }
        }
        int getBalance() const {
                return balance;
        }
        void setName(std::string accountName) {
                name = accountName;
        }
        std::string getName() const {
                return name;
        }
private:
        std::string name;
        int balance{0};

};
===== ./InsertionSort.h =====
#ifndef INSERTIONSORT_H
#define INSERTIONSORT_H

#include <vector>

class InsertionSort {
public:
    static void sort(std::vector<int>& arr);
    
private:
    static void recursiveInsertionSort(std::vector<int>& arr, int n);
};

#endif===== ./movieData6.txt =====
#include <stdio.h>

struct record{
        int inputMovie;
        char title[25];
        char dir[25];
        char date[11];
        int length;
}movieArray[3];

int archMenu();
void dataMenu(int i);
void printMovie(int recordNum);
void printArchive(int recordNum);
void readMovie( FILE *fMov);
void writeMovie( FILE *fMov);

int choiceData=0;

int main(void) {
        int dataInput=0;
        int recordNum = 0;
        do{
                dataInput = archMenu();
                switch(dataInput){
                        case 1:
                                printf("Initializing archive tools: \n");
                                dataMenu(recordNum);
                                recordNum++;
                                break;
                                //printMovie(recordNum);
                                break;
                        case 3:
                                printf("Listing all archive data...\n");
                                //printArchive(recordNum);
                                break;

                        case 4:
                                printf("Thanks for using the movie inventory.\n\n");
                                break;
                        default:
                                printf("error: Please enter a correct option!\n");
                }
        }while(dataInput!=4);
        return 0;
}
int archMenu() {
//1. Determinant menu
        int choice = 0;
        printf("Welcome to the Movie Library!\n");
        printf("**************************\n");
        printf("\nEnter Option\n");
        printf("\n1) Insert Movie Record\n");
        printf("\n2) List Movie\n");
        printf("\n3) Movie Catalog\n");
        printf("\n4) Exit?\n");
        printf("**************************\n");
        do{
                printf("Option: \n");
                scanf("%d", &choice);
        }while(choice<1 || choice>4);
        return choice;
}
void dataMenu(int i) {
        /*1A newMov data input*/
        while((getchar())!='\n');
        printf("\t\tEnter Movie Title: ");
        fgets(movieArray[i].title,25, stdin);
        while((getchar())!='\n');
        printf("\t\tEnter Director: ");
        fgets(movieArray[i].dir,25, stdin);
        fflush(stdin);
        while((getchar())!='\n');
        printf("\t\tEnter Release Date: ");
        fgets(movieArray[i].date, 11, stdin);
        //scanf("%s",&movieArray[i].date);
        printf("\t\tEnter Length: ");
        scanf("%d",&movieArray[i].length);
}
void writeMovie(FILE *fPtr){
        FILE *fPtr;
        fPtr = fopen("program4.txt", "w");
        char content[1000];
        if (fPtr != NULL){
                fgets(content, 100, fPtr);
        }else{
                 printf("file inaccesible ");
        }
        return writeMovie;
}
void printArchive(int recordNum){
        if(recordNum>0){
                for(int i=0; i<recordNum; i++){
                        printf("Title: %s\n", movieArray[i].title);
                        printf("Director: %s\n", movieArray[i].dir);
                        printf("Date: %s\n", movieArray[i].date);
                        printf("Lenght: %d\n", movieArray[i].length);
                break;
        }
}

return recordNum;
}
void readMovie(FILE* fPtr){
        FILE* fPtr;
        fPtr = fopen("program4.txt", "r");

        if (fPtr != NULL){
            printf("Successful!");
            }
        else{
                printf("inaccessible file!")
           }
        return readMovie;
}
//write movie
void writeMovie(FILE *fPtr){
        FILE *fPtr;
        fPtr = fopen("program4.txt", "w");
        char content[1000];
        if (fPtr != NULL){
                fgets(content, 100, fPtr);
        }else{
                printf("file inaccesible ");
        }

        return writeMovie;
}===== ./codes.json =====
{
  "100": "Continue",
  "101": "Switching Protocols",
  "102": "Processing",
  "103": "Early Hints",
  "200": "OK",
  "201": "Created",
  "202": "Accepted",
  "203": "Non-Authoritative Information",
  "204": "No Content",
  "205": "Reset Content",
  "206": "Partial Content",
  "207": "Multi-Status",
  "208": "Already Reported",
  "226": "IM Used",
  "300": "Multiple Choices",
  "301": "Moved Permanently",
  "302": "Found",
  "303": "See Other",
  "304": "Not Modified",
  "305": "Use Proxy",
  "307": "Temporary Redirect",
  "308": "Permanent Redirect",
  "400": "Bad Request",
  "401": "Unauthorized",
  "402": "Payment Required",
  "403": "Forbidden",
  "404": "Not Found",
  "405": "Method Not Allowed",
  "406": "Not Acceptable",
  "407": "Proxy Authentication Required",
  "408": "Request Timeout",
  "409": "Conflict",
  "410": "Gone",
  "411": "Length Required",
  "412": "Precondition Failed",
  "413": "Payload Too Large",
  "414": "URI Too Long",
  "415": "Unsupported Media Type",
  "416": "Range Not Satisfiable",
  "417": "Expectation Failed",
  "418": "I'm a Teapot",
  "421": "Misdirected Request",
  "422": "Unprocessable Entity",
  "423": "Locked",
  "424": "Failed Dependency",
  "425": "Too Early",
  "426": "Upgrade Required",
  "428": "Precondition Required",
  "429": "Too Many Requests",
  "431": "Request Header Fields Too Large",
  "451": "Unavailable For Legal Reasons",
  "500": "Internal Server Error",
  "501": "Not Implemented",
  "502": "Bad Gateway",
  "503": "Service Unavailable",
  "504": "Gateway Timeout",
  "505": "HTTP Version Not Supported",
  "506": "Variant Also Negotiates",
  "507": "Insufficient Storage",
  "508": "Loop Detected",
  "509": "Bandwidth Limit Exceeded",
  "510": "Not Extended",
  "511": "Network Authentication Required"
}
===== ./program2.cpp =====
//program2

#include <iostream>

//using namespace std;

int main()
{
   int number1{0};
   int number2{0};
   int sum{0};
   
   std::cout << "Enter the first interger: ";
   std::cin >> number1;
   
   std::cout<< "Enter second interger: ";
   std::cin >> number2;
   
   sum = number1 + number2;
   
   std::cout << "Sum is " << sum << std::endl;
   
   // return 0;
}===== ./SelectionSort.h =====
#ifndef SELECTIONSORT_H
#define SELECTIONSORT_H

#include <vector>
using namespace std;

class SelectionSort {
public:
    static void sort(vector<int>& arr);
    
private:
    static void recursiveSelectionSort(vector<int>& arr, int n);
    static int findMinIndex(vector<int>& arr, int start, int end);
};

#endif 
===== ./gradeFile.txt =====
Jose Ramos 80 95 100 100 79 
Natalie Gamez 98 100 100 100 100
Sam Smith 66 72 0 90 98 
Cyintha Luna 87 100 50 100 79
Carlos Santos 70 55 45 0 100===== ./seach(atomic).cpp =====
#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <map>

using namespace std;

int main() {
  // Open the txt file.
  ifstream file("search.txt");

  // Check if the file opened successfully.
  if (!file) {
    cout << "Error opening file." << endl;
    return 1;
  }

  // Create a vector to store the words in the file.
  vector<string> words;

  // Read the words from the file.
  string word;
  while (file >> word) {
    words.push_back(word);
  }

  // Loop until the user says they are done.
  bool done = false;
  while (!done) {

    // Prompt the user for a word to find.
    cout << "Enter a word to find: ";
    string searchWord;
    cin >> searchWord;

    // Count the number of occurrences of the search word.
    int count = 0;
    for (string word : words) {
      if (word == searchWord) {
        count++;
      }
    }

    // Calculate the percentage of the search word in the file.
    double percentage = (double)count / words.size() * 100;

    // Print the statistics.
    cout << searchWord << " appears " << count << " times in the file. This is " << percentage << "% of the total words." << endl;

    // Prompt the user for the next word.
    cout << "Enter the next word: ";
    string nextWord;
    cin >> nextWord;

    // Check if the two words are next to each other.
    bool found = false;
    for (int i = 0; i < words.size() - 1; i++) {
      if (words[i] == searchWord && words[i + 1] == nextWord) {
        found = true;
        break;
      }
    }

    // If the two words are next to each other, print the statistics.
    if (found) {
      cout << "The words '" << searchWord << "' and '" << nextWord << "' appear together " << count << " times in the file. This is " << percentage << "% of the total words." << endl;
    }

    // Prompt the user if they are done.
    cout << "Are you done? (y/n) ";
    char answer;
    cin >> answer;

    // If the user says yes, set the done flag to true.
    if (answer == 'y') {
      done = true;
    }
  }

  // Close the file.
  file.close();

  return 0;
}
===== ./population.h =====
===== ./workingP4Ch10(2).txt =====
#include <stdio.h>
//#include <cstring>
              
struct record {                              
      char title[25];          /* account number */    
      char dir[ 25 ];  /* account last name */ 
      char date[ 11 ]; /* account fi+rst name */
      char length[5];       /* account balance */   
}movieArray[3];

int main(){
    
    FILE *cfPtr;
       
    if ((cfPtr = fopen ("movie.txt", "r+") ) == NULL){
        puts("Fatal error...\n");
    //    exit(1);
   }
  //
       
    printf("1. Movie One\n");
    printf(("1.","%s", "\nEnter Title:\n"));
          fscanf("%s", "movieArray[i].title");
    printf("2. Movie Two\n");
    printf("3. Movie Three\n");
    //fputs("Enter \"Exit\"");
          
      
    int i=0;
       //printf("Enter \"exit\" as Title for exit.");
    //se{
  //  struct record movieArray[3];
       //while(4);
       //choice 
       i = 0;
       while(i>=1 && i <=3 && i!= 0){
       //!feof(cfPtr)){
       {
           //do{
          while((getchar())!='n');
          printf("%s", "\nEnter Title");
          fgets(movieArray[i].title, 25, stdin);
          fflush(stdin);
          while((getchar())!='n');
          printf("%s", "\nEnter Director");
          fgets(movieArray[i].dir, 25, stdin);
          fflush(stdin);
          while((getchar())!='n');
          printf("%s", "\nEnter Date");
          fgets(movieArray[i].date, 11, stdin);
        //fflush(stdin);
        //while((getchar())!='n');
          printf("%s", "\nEnter Title");
          fgets(movieArray[i].length, 5,stdin);
          fflush(stdin);
          
          
         //if (fwrite(movieArray[i].title, "exit") == 0);
          //  exit(1);
          //  do{
          
      //   fwrite(&movieArray[i], 3, sizeof(struct record), stdin, cfPtr);
        fwrite(&movieArray[i], sizeof(struct record), 3, cfPtr);
       }
    

    }fclose(cfPtr);
      //eturn 0;
   }===== ./program4.cpp =====
#include <iostream>
#include <cstdlib>
#include <ctime>
#include <vector>
using namespace std;

class Coin {
private:
    string sideUp;

public:
    Coin() {
        srand(static_cast<unsigned int>(time(nullptr)));
        int toss = rand() % 2;
        if (toss == 0) {
            sideUp = "heads";
        }
        else {
            sideUp = "tails";
        }
    }

    string getSideUp() {
        return sideUp;
    }

    void toss() {
        int toss = rand() % 2;
        if (toss == 0) {
            sideUp = "heads";
        }
        else {
            sideUp = "tails";
        }
    }
};

int main() {
    int headCount = 0;
    int tailCount = 0;
    Coin c;
    vector<string> tossResults;
    cout << "Coin has '" << c.getSideUp() << "' facing up." << endl;
    tossResults.push_back(c.getSideUp());

    cout << "Randomizing coin toss, 20 times:" << endl;
    for (int i = 0; i < 20; i++) {
        c.toss();
        tossResults.push_back(c.getSideUp());
    }

    for (size_t i = 0; i < tossResults.size(); i++) {
        cout << i + 1 << ". " << tossResults[i] << endl;
        if (tossResults[i] == "heads") {
            headCount++;
        }
        else if (tossResults[i] == "tails") {
            tailCount++;
        }
    }

    cout << "Heads was facing up: " << headCount << endl;
    cout << "Tails was facing up: " << tailCount << endl;

    cout << "Press Enter to exit...";
    cin.get(); // Wait for user input (Enter key) before exiting

    return 0;
}===== ./Employee.cpp =====
#include <iostream>
#include <sstream>
#include "Employee.h"
#include "Date.h"
using namespace std;

Employee::Employee(const string& first, const string& last,
    const Date& dateOfBirth, const Date& dateOfHire)
    : firstName{ first },
    lastName{ last },
    birthDate{ dateOfBirth },
    hireDate{ dateOfHire } {

    cout << "Employee object constructor: "
        << firstName << '   ' << lastName << endl;
}

string Employee::toString() const {
    ostringstream output;
    output << lastName << ".  " << firstName << " Hired: "
        << hireDate.toString() << " Birthday: " << birthDate.toString();
    return output.str();
}

Employee::~Employee() {
    cout << "Employee object deconstructor: "
        << lastName << ",  " << firstName << endl;
}
===== ./rational2.cpp =====
===== ./ProjectSettings.json =====
{
  "CurrentProjectSetting": "x86-Release"
}===== ./seachthroughprogram.cpp =====
#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <map>

using namespace std;

int main() {
  // Open the txt file.
  ifstream file("search.txt");

  // Check if the file opened successfully.
  if (!file) {
    cout << "Error opening file." << endl;
    return 1;
  }

  // Create a vector to store the words in the file.
  vector<string> words;

  // Read the words from the file.
  string word;
  while (file >> word) {
    words.push_back(word);
  }

  // Create a map to store the word counts.
  map<string, int> wordCounts;

  // Count the number of occurrences of each word.
  for (string word : words) {
    wordCounts[word]++;
  }

  // Calculate the percentage of each word.
  for (auto& pair : wordCounts) {
    pair.second /= words.size();
  }

  // Print the word counts and percentages.
  for (auto& pair : wordCounts) {
    cout << pair.first << " " << pair.second * 100 << "%" << endl;
  }

  // Close the file.
  file.close();

  return 0;
}



===== ./history_Test.cpp =====
#include <iostream>
#include <fstream>
#include <map>
#include <vector>
#include <algorithm>
using namespace std;

// Function to present a question and record the user's answer
bool askQuestion(const string& question, const string& answer, const vector<string>& incorrectAnswers) {
    cout << question << endl;
    cout << "A) " << answer << endl;
    cout << "B) " << incorrectAnswers[0] << endl;
    cout << "C) " << incorrectAnswers[1] << endl;
    cout << "D) " << incorrectAnswers[2] << endl;

    char userAnswer;
    cout << "Your answer: ";
    cin >> userAnswer;
    userAnswer = toupper(userAnswer); // Convert the answer to uppercase

    return userAnswer == 'A';
}

int main() {
    // Define questions, correct answers, and incorrect answers
    map<string, string> questions;
   
    questions["What is the Gilded Age?"] = "A time of rapid industrialization and economic growth.";
    questions["What is a trust in the context of the late 19th century?"] = "A form of business organization to reduce competition.";
    questions["What is finance capitalism?"] = "An economic system emphasizing investment, stock markets, and banking.";
    questions["What is Social Darwinism?"] = "A theory of evolution applied to society.";
    questions["What was the Jim Crow system?"] = "A system of racial segregation and discrimination.";
    questions["What did the Woman's Christian Temperance Union advocate for?"] = "Prohibition of alcohol, women's suffrage, and social reform.";
    questions["What is civil service reform?"] = "Efforts to professionalize and depoliticize government employment.";
    questions["What was the purpose of the Interstate Commerce Commission (ICC)?"] = "To regulate interstate commerce.";
    questions["What did the Sherman Antitrust Act aim to prohibit?"] = "Anticompetitive business practices and monopolies.";
    questions["What was the New South movement?"] = "A movement emphasizing industrialization and a departure from the agrarian past.";
    questions["What is the Gospel of Wealth?"] = "An essay advocating philanthropy by the wealthy.";
    questions["What is laissez-faire?"] = "An economic philosophy advocating minimal government intervention in business.";
    questions["What is the spoils system?"] = "A system of awarding government contracts.";
    questions["Who wrote the essay 'The Gospel of Wealth'?"] = "Andrew Carnegie.";
    questions["Who was known for aggressive business practices, including stock manipulation, during the late 19th century?"] = "Jay Gould.";
    questions["Which company dominated the oil industry through horizontal integration?"] = "Standard Oil Company.";
    questions["What is horizontal integration?"] = "A strategy involving the consolidation of control over industries.";
    questions["What are holding companies used for?"] = "To control other businesses.";
    questions["What major steel corporation was formed in 1901?"] = "United States Steel.";
    questions["What is an oligopoly?"] = "A market structure characterized by a few large firms.";
    questions["Who founded the National Association for the Advancement of Colored People (NAACP) in 1909?"] = "W. E. B. Du Bois.";
    questions["What is the civil service exam?"] = "A merit-based examination system for government employment.";
    questions["What is political mudslinging?"] = "A practice of making malicious attacks on political opponents.";
    questions["What did the Supreme Court case Plessy vs. Ferguson establish?"] = "The doctrine of 'separate but equal.'";
    questions["What was the Progressive movement?"] = "A social reform movement.";
    questions["What is muckraking?"] = "A form of investigative journalism exposing social and political issues.";
    questions["Who was the founder of Carnegie Steel?"] = "Andrew Carnegie.";
    questions["What is vertical integration?"] = "A business model controlling a product's lifecycle from production to distribution.";
    questions["What did the Standard Oil Company dominate?"] = "The oil industry.";
    questions["What is a holding company?"] = "A company that owns other companies' stock.";
    questions["What was the purpose of the Interstate Commerce Commission (ICC)?"] = "To oversee and regulate railroad rates and practices.";
    questions["What did the Sherman Antitrust Act aim to prohibit?"] = "Monopolistic practices and anticompetitive business behavior.";

 map<string, vector<string>> incorrectAnswers;
    incorrectAnswers["What is the Gilded Age?"] = {
        "A period of political revolution.",
        "The era of the American Civil War.",
        "A period of cultural stagnation."
    };
    incorrectAnswers["What is a trust in the context of the late 19th century?"] = {
        "A legal document.",
        "A philanthropic organization.",
        "A government agency."
    };
    incorrectAnswers["What is finance capitalism?"] = {
        "An economic system where the government controls all financial institutions.",
        "An economic system focused on barter trade.",
        "An economic system without banks or financial institutions."
    };
    incorrectAnswers["What is Social Darwinism?"] = {
        "A scientific theory about natural selection.",
        "A political ideology advocating for social equality.",
        "A form of government."
    };
    incorrectAnswers["What was the Jim Crow system?"] = {
        "A legal system for corporate regulation.",
        "A system of land distribution in the West.",
        "A form of religious worship."
    };
    incorrectAnswers["What did the Woman's Christian Temperance Union advocate for?"] = {
        "The promotion of alcohol consumption.",
        "Freedom of speech.",
        "Tax reform."
    };
    incorrectAnswers["What is civil service reform?"] = {
        "A reform of the military.",
        "Reform of the criminal justice system.",
        "Reform of the education system."
    };
    incorrectAnswers["What was the purpose of the Interstate Commerce Commission (ICC)?"] = {
        "To regulate immigration.",
        "To regulate the stock market.",
        "To regulate foreign policy."
    };
    incorrectAnswers["What did the Sherman Antitrust Act aim to prohibit?"] = {
        "Tax evasion.",
        "Political corruption.",
        "Labor strikes."
    };
    incorrectAnswers["What was the New South movement?"] = {
        "A movement advocating for the preservation of Southern traditions.",
        "A movement advocating for the abolition of slavery.",
        "A movement promoting isolationism."
    };
    incorrectAnswers["What is the Gospel of Wealth?"] = {
        "A religious text.",
        "A political manifesto.",
        "A novel."
    };
    incorrectAnswers["What is laissez-faire?"] = {
        "A type of cuisine.",
        "A French art movement.",
        "A form of dance."
    };
    incorrectAnswers["What is the spoils system?"] = {
        "A political strategy.",
        "A merit-based hiring system.",
        "A system of government taxation."
    };
    incorrectAnswers["Who wrote the essay 'The Gospel of Wealth'?"] = {
        "Samuel Clemens.",
        "John D. Rockefeller.",
        "Ida Tarbell."
    };
    incorrectAnswers["Who was known for aggressive business practices, including stock manipulation, during the late 19th century?"] = {
        "John Pierpont Morgan.",
        "Andrew Carnegie.",
        "Susan B. Anthony."
    };
    incorrectAnswers["Which company dominated the oil industry through horizontal integration?"] = {
        "U.S. Steel.",
        "Carnegie Steel.",
        "The Intercontinental Oil Corporation."
    };
    incorrectAnswers["What is horizontal integration?"] = {
        "A business model controlling a product's lifecycle from production to distribution.",
        "A method of regulating competition.",
        "A marketing technique."
    };
    incorrectAnswers["What are holding companies used for?"] = {
        "To hold government assets.",
        "To manage charitable foundations.",
        "To oversee law enforcement agencies."
    };
    incorrectAnswers["What major steel corporation was formed in 1901?"] = {
        "Standard Oil.",
        "Carnegie Steel.",
        "International Steel Co."
    };
    incorrectAnswers["What is an oligopoly?"] = {
        "A form of government.",
        "A type of antitrust law.",
        "A term used in sociology."
    };
    incorrectAnswers["Who founded the National Association for the Advancement of Colored People (NAACP) in 1909?"] = {
        "Andrew Carnegie.",
        "John D. Rockefeller.",
        "Susan B. Anthony."
    };
    incorrectAnswers["What is the civil service exam?"] = {
        "A test for military service.",
        "A qualifying exam for lawyers.",
        "A test for citizenship."
    };
    incorrectAnswers["What is political mudslinging?"] = {
        "A form of pottery.",
        "A style of political speeches.",
        "A method of campaign fundraising."
    };
    incorrectAnswers["What did the Supreme Court case Plessy vs. Ferguson establish?"] = {
        "The doctrine of 'equal rights for all.'",
        "The end of racial segregation.",
        "The end of political corruption."
    };
    incorrectAnswers["What was the Progressive movement?"] = {
        "A movement advocating for conservative values.",
        "A political party.",
        "A literary movement."
    };
    incorrectAnswers["What is muckraking?"] = {
        "A type of farm equipment.",
        "A political ideology.",
        "A method of government regulation."
    };
    incorrectAnswers["Who was the founder of Carnegie Steel?"] = {
        "John D. Rockefeller.",
        "Ida Tarbell.",
        "Samuel Clemens."
    };
    incorrectAnswers["What is vertical integration?"] = {
        "A type of political system.",
        "A form of social organization.",
        "A strategy for labor unions."
    };
    incorrectAnswers["What did the Standard Oil Company dominate?"] = {
        "The steel industry.",
        "The automobile industry.",
        "The telecommunications industry."
    };
    incorrectAnswers["What is a holding company?"] = {
        "A company that holds government assets.",
        "A type of bank.",
        "A nonprofit organization."
    };
    incorrectAnswers["What was the purpose of the Interstate Commerce Commission (ICC)?"] = {
        "To regulate the airline industry.",
        "To regulate the healthcare industry.",
        "To manage foreign relations."
    };
    incorrectAnswers["What did the Sherman Antitrust Act aim to prohibit?"] = {
        "Tax evasion by wealthy individuals.",
        "Labor unions.",
        "Political corruption."
    };


    int correctAnswers = 0;
    int totalQuestions = questions.size();

    // Loop through the questions and ask them one by one
    for (const auto& [question, answer] : questions) {
        if (askQuestion(question, answer, incorrectAnswers[question])) { // Use 'question' as the index
            cout << "Correct!" << endl;
            correctAnswers++;
        } else {
            cout << "Incorrect. The correct answer is A) " << answer << "." << endl;
        }

        cout << endl;
    }

    // Calculate and display the user's score
    double score = (static_cast<double>(correctAnswers) / totalQuestions) * 100;
    cout << "Your score: " << score << "%" << endl;

    // Save the results to a file
    ofstream outfile("historytest.txt");
    for (const auto& [question, answer] : questions) {
        outfile << question << endl;
        outfile << "Correct Answer: A) " << answer << endl;
        outfile << "Incorrect Answers:" << endl;
        for (const string& incorrectAnswer : incorrectAnswers[question]) { // Use 'question' as the index
            outfile << "B) " << incorrectAnswer << endl;
        }
        outfile << endl;
    }
    outfile.close();

    // Display the contents of the saved file
    ifstream infile("historytest.txt");
    string line;
    while (getline(infile, line)) {
        cout << line << endl;
    }
    infile.close();

    cout << "Press enter to exit...";
    cin.ignore();
    cin.get();
    return 0;
}===== ./.package-lock.json =====
{
  "name": "project",
  "version": "1.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "node_modules/@socket.io/component-emitter": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/@socket.io/component-emitter/-/component-emitter-3.1.2.tgz",
      "integrity": "sha512-9BCxFwvbGg/RsZK9tjXd8s4UcwR0MWeFQ1XEKIQVVvAGJyINdrqKMcTRyLoK8Rse1GjzLV9cwjWV1olXRWEXVA==",
      "license": "MIT"
    },
    "node_modules/@types/cookie": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/@types/cookie/-/cookie-0.4.1.tgz",
      "integrity": "sha512-XW/Aa8APYr6jSVVA1y/DEIZX0/GMKLEVekNG727R8cs56ahETkRAy/3DR7+fJyh7oUgGwNQaRfXCun0+KbWY7Q==",
      "license": "MIT"
    },
    "node_modules/@types/cors": {
      "version": "2.8.17",
      "resolved": "https://registry.npmjs.org/@types/cors/-/cors-2.8.17.tgz",
      "integrity": "sha512-8CGDvrBj1zgo2qE+oS3pOCyYNqCPryMWY2bGfwA0dcfopWGgxs+78df0Rs3rc9THP4JkOhLsAa+15VdpAqkcUA==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/node": {
      "version": "22.1.0",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-22.1.0.tgz",
      "integrity": "sha512-AOmuRF0R2/5j1knA3c6G3HOk523Ga+l+ZXltX8SF1+5oqcXijjfTd8fY3XRZqSihEu9XhtQnKYLmkFaoxgsJHw==",
      "license": "MIT",
      "dependencies": {
        "undici-types": "~6.13.0"
      }
    },
    "node_modules/accepts": {
      "version": "1.3.8",
      "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz",
      "integrity": "sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==",
      "license": "MIT",
      "dependencies": {
        "mime-types": "~2.1.34",
        "negotiator": "0.6.3"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/array-flatten": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
      "integrity": "sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg==",
      "license": "MIT"
    },
    "node_modules/base64id": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/base64id/-/base64id-2.0.0.tgz",
      "integrity": "sha512-lGe34o6EHj9y3Kts9R4ZYs/Gr+6N7MCaMlIFA3F1R2O5/m7K06AxfSeO5530PEERE6/WyEg3lsuyw4GHlPZHog==",
      "license": "MIT",
      "engines": {
        "node": "^4.5.0 || >= 5.9"
      }
    },
    "node_modules/body-parser": {
      "version": "1.20.2",
      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.20.2.tgz",
      "integrity": "sha512-ml9pReCu3M61kGlqoTm2umSXTlRTuGTx0bfYj+uIUKKYycG5NtSbeetV3faSU6R7ajOPw0g/J1PvK4qNy7s5bA==",
      "license": "MIT",
      "dependencies": {
        "bytes": "3.1.2",
        "content-type": "~1.0.5",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "on-finished": "2.4.1",
        "qs": "6.11.0",
        "raw-body": "2.5.2",
        "type-is": "~1.6.18",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/bytes": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
      "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/call-bind": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/call-bind/-/call-bind-1.0.7.tgz",
      "integrity": "sha512-GHTSNSYICQ7scH7sZ+M2rFopRoLh8t2bLSW6BbgrtLsahOIB5iyAVJf9GjWK3cYTDaMj4XdBpM1cA6pIS0Kv2w==",
      "license": "MIT",
      "dependencies": {
        "es-define-property": "^1.0.0",
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2",
        "get-intrinsic": "^1.2.4",
        "set-function-length": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/content-disposition": {
      "version": "0.5.4",
      "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz",
      "integrity": "sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "5.2.1"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/content-type": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.5.tgz",
      "integrity": "sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.6.0.tgz",
      "integrity": "sha512-U71cyTamuh1CRNCfpGY6to28lxvNwPG4Guz/EVjgf3Jmzv0vlDp1atT9eS5dDjMYHucpHbWns6Lwf3BKz6svdw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie-signature": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
      "integrity": "sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ==",
      "license": "MIT"
    },
    "node_modules/cors": {
      "version": "2.8.5",
      "resolved": "https://registry.npmjs.org/cors/-/cors-2.8.5.tgz",
      "integrity": "sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==",
      "license": "MIT",
      "dependencies": {
        "object-assign": "^4",
        "vary": "^1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/define-data-property": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/define-data-property/-/define-data-property-1.1.4.tgz",
      "integrity": "sha512-rBMvIzlpA8v6E+SJZoo++HAYqsLrkg7MSfIinMPFhmkorw7X+dOXVJQs+QT69zGkzMyfDnIMN2Wid1+NbL3T+A==",
      "license": "MIT",
      "dependencies": {
        "es-define-property": "^1.0.0",
        "es-errors": "^1.3.0",
        "gopd": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/destroy": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz",
      "integrity": "sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/ee-first": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
      "integrity": "sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow==",
      "license": "MIT"
    },
    "node_modules/encodeurl": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
      "integrity": "sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/engine.io": {
      "version": "6.5.5",
      "resolved": "https://registry.npmjs.org/engine.io/-/engine.io-6.5.5.tgz",
      "integrity": "sha512-C5Pn8Wk+1vKBoHghJODM63yk8MvrO9EWZUfkAt5HAqIgPE4/8FF0PEGHXtEd40l223+cE5ABWuPzm38PHFXfMA==",
      "license": "MIT",
      "dependencies": {
        "@types/cookie": "^0.4.1",
        "@types/cors": "^2.8.12",
        "@types/node": ">=10.0.0",
        "accepts": "~1.3.4",
        "base64id": "2.0.0",
        "cookie": "~0.4.1",
        "cors": "~2.8.5",
        "debug": "~4.3.1",
        "engine.io-parser": "~5.2.1",
        "ws": "~8.17.1"
      },
      "engines": {
        "node": ">=10.2.0"
      }
    },
    "node_modules/engine.io-parser": {
      "version": "5.2.3",
      "resolved": "https://registry.npmjs.org/engine.io-parser/-/engine.io-parser-5.2.3.tgz",
      "integrity": "sha512-HqD3yTBfnBxIrbnM1DoD6Pcq8NECnh8d4As1Qgh0z5Gg3jRRIqijury0CL3ghu/edArpUYiYqQiDUQBIs4np3Q==",
      "license": "MIT",
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/engine.io/node_modules/cookie": {
      "version": "0.4.2",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.4.2.tgz",
      "integrity": "sha512-aSWTXFzaKWkvHO1Ny/s+ePFpvKsPnjc551iI41v3ny/ow6tBG5Vd+FuqGNhh1LxOmVzOlGUriIlOaokOvhaStA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/engine.io/node_modules/debug": {
      "version": "4.3.6",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.6.tgz",
      "integrity": "sha512-O/09Bd4Z1fBrU4VzkhFqVgpPzaGbw6Sm9FEkBT1A/YBXQFGuuSxa1dN2nxgxS34JmKXqYx8CZAwEVoJFImUXIg==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/engine.io/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
      "license": "MIT"
    },
    "node_modules/es-define-property": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.0.tgz",
      "integrity": "sha512-jxayLKShrEqqzJ0eumQbVhTYQM27CfT1T35+gCgDFoL82JLsXqTJ76zv6A0YLOgEnLUMvLzsDsGIrl8NFpT2gQ==",
      "license": "MIT",
      "dependencies": {
        "get-intrinsic": "^1.2.4"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-errors": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/escape-html": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
      "integrity": "sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow==",
      "license": "MIT"
    },
    "node_modules/etag": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
      "integrity": "sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/express": {
      "version": "4.19.2",
      "resolved": "https://registry.npmjs.org/express/-/express-4.19.2.tgz",
      "integrity": "sha512-5T6nhjsT+EOMzuck8JjBHARTHfMht0POzlA60WV2pMD3gyXw2LZnZ+ueGdNxG+0calOJcWKbpFcuzLZ91YWq9Q==",
      "license": "MIT",
      "dependencies": {
        "accepts": "~1.3.8",
        "array-flatten": "1.1.1",
        "body-parser": "1.20.2",
        "content-disposition": "0.5.4",
        "content-type": "~1.0.4",
        "cookie": "0.6.0",
        "cookie-signature": "1.0.6",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "finalhandler": "1.2.0",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "merge-descriptors": "1.0.1",
        "methods": "~1.1.2",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "path-to-regexp": "0.1.7",
        "proxy-addr": "~2.0.7",
        "qs": "6.11.0",
        "range-parser": "~1.2.1",
        "safe-buffer": "5.2.1",
        "send": "0.18.0",
        "serve-static": "1.15.0",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "type-is": "~1.6.18",
        "utils-merge": "1.0.1",
        "vary": "~1.1.2"
      },
      "engines": {
        "node": ">= 0.10.0"
      }
    },
    "node_modules/finalhandler": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.2.0.tgz",
      "integrity": "sha512-5uXcUVftlQMFnWC9qu/svkWv3GTd2PfUhK/3PLkYNAe7FbqJMt3515HaxE6eRL74GdsriiwujiawdaB1BpEISg==",
      "license": "MIT",
      "dependencies": {
        "debug": "2.6.9",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "statuses": "2.0.1",
        "unpipe": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/forwarded": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz",
      "integrity": "sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fresh": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
      "integrity": "sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/function-bind": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-intrinsic": {
      "version": "1.2.4",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.2.4.tgz",
      "integrity": "sha512-5uYhsJH8VJBTv7oslg4BznJYhDoRI6waYCxMmCdnTrcCrHA/fCFKoTFz2JKKE0HdDFUF7/oQuhzumXJK7paBRQ==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2",
        "has-proto": "^1.0.1",
        "has-symbols": "^1.0.3",
        "hasown": "^2.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/gopd": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.0.1.tgz",
      "integrity": "sha512-d65bNlIadxvpb/A2abVdlqKqV563juRnZ1Wtk6s1sIR8uNsXR70xqIzVqxVf1eTqDunwT2MkczEeaezCKTZhwA==",
      "license": "MIT",
      "dependencies": {
        "get-intrinsic": "^1.1.3"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-property-descriptors": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-property-descriptors/-/has-property-descriptors-1.0.2.tgz",
      "integrity": "sha512-55JNKuIW+vq4Ke1BjOTjM2YctQIvCT7GFzHwmfZPGo5wnrgkid0YQtnAleFSqumZm4az3n2BS+erby5ipJdgrg==",
      "license": "MIT",
      "dependencies": {
        "es-define-property": "^1.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-proto": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/has-proto/-/has-proto-1.0.3.tgz",
      "integrity": "sha512-SJ1amZAJUiZS+PhsVLf5tGydlaVB8EdFpaSO4gmiUKUOxk8qzn5AIy4ZeJUmh22znIdk/uMAUT2pl3FxzVUH+Q==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-symbols": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.0.3.tgz",
      "integrity": "sha512-l3LCuF6MgDNwTDKkdYGEihYjt5pRPbEg46rtlmnSPlUbgmB8LOIrKJbYYFBSbnPaJexMKtiPO8hmeRjRz2Td+A==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/hasown": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
      "license": "MIT",
      "dependencies": {
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/http-errors": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
      "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
      "license": "MIT",
      "dependencies": {
        "depd": "2.0.0",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "toidentifier": "1.0.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/iconv-lite": {
      "version": "0.4.24",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
      "license": "MIT",
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
      "license": "ISC"
    },
    "node_modules/ipaddr.js": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
      "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/media-typer": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
      "integrity": "sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/merge-descriptors": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.1.tgz",
      "integrity": "sha512-cCi6g3/Zr1iqQi6ySbseM1Xvooa98N0w31jzUYrXPX2xqObmFGHJ0tQ5u74H3mVh7wLouTseZyYIq39g8cNp1w==",
      "license": "MIT"
    },
    "node_modules/methods": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
      "integrity": "sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-1.6.0.tgz",
      "integrity": "sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==",
      "license": "MIT",
      "bin": {
        "mime": "cli.js"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "license": "MIT",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/negotiator": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz",
      "integrity": "sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-inspect": {
      "version": "1.13.2",
      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.2.tgz",
      "integrity": "sha512-IRZSRuzJiynemAXPYtPe5BoI/RESNYR7TYm50MC5Mqbd3Jmw5y790sErYw3V6SryFJD64b74qQQs9wn5Bg/k3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/on-finished": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
      "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
      "license": "MIT",
      "dependencies": {
        "ee-first": "1.1.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/parseurl": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
      "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/path-to-regexp": {
      "version": "0.1.7",
      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.7.tgz",
      "integrity": "sha512-5DFkuoqlv1uYQKxy8omFBeJPQcdoE07Kv2sferDCrAq1ohOU+MSDswDIbnx3YAM60qIOnYa53wBhXW0EbMonrQ==",
      "license": "MIT"
    },
    "node_modules/proxy-addr": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz",
      "integrity": "sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==",
      "license": "MIT",
      "dependencies": {
        "forwarded": "0.2.0",
        "ipaddr.js": "1.9.1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/qs": {
      "version": "6.11.0",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.11.0.tgz",
      "integrity": "sha512-MvjoMCJwEarSbUYk5O+nmoSzSutSsTwF85zcHPQ9OrlFoZOYIjaqBAJIqIXjptyD5vThxGq52Xu/MaJzRkIk4Q==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "side-channel": "^1.0.4"
      },
      "engines": {
        "node": ">=0.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/range-parser": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
      "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/raw-body": {
      "version": "2.5.2",
      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.5.2.tgz",
      "integrity": "sha512-8zGqypfENjCIqGhgXToC8aB2r7YrBX+AQAfIPs/Mlk+BtPTztOvTS01NRW/3Eh60J+a48lt8qsCzirQ6loCVfA==",
      "license": "MIT",
      "dependencies": {
        "bytes": "3.1.2",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/safer-buffer": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==",
      "license": "MIT"
    },
    "node_modules/send": {
      "version": "0.18.0",
      "resolved": "https://registry.npmjs.org/send/-/send-0.18.0.tgz",
      "integrity": "sha512-qqWzuOjSFOuqPjFe4NOsMLafToQQwBSOEpS+FwEt3A2V3vKubTquT3vmLTQpFgMXp8AlFWFuP1qKaJZOtPpVXg==",
      "license": "MIT",
      "dependencies": {
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "mime": "1.6.0",
        "ms": "2.1.3",
        "on-finished": "2.4.1",
        "range-parser": "~1.2.1",
        "statuses": "2.0.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/send/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/serve-static": {
      "version": "1.15.0",
      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.15.0.tgz",
      "integrity": "sha512-XGuRDNjXUijsUL0vl6nSD7cwURuzEgglbOaFuZM9g3kwDXOWVTck0jLzjPzGD+TazWbboZYu52/9/XPdUgne9g==",
      "license": "MIT",
      "dependencies": {
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "parseurl": "~1.3.3",
        "send": "0.18.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/set-function-length": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/set-function-length/-/set-function-length-1.2.2.tgz",
      "integrity": "sha512-pgRc4hJ4/sNjWCSS9AmnS40x3bNMDTknHgL5UaMBTMyJnU90EgWh1Rz+MC9eFu4BuN/UwZjKQuY/1v3rM7HMfg==",
      "license": "MIT",
      "dependencies": {
        "define-data-property": "^1.1.4",
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2",
        "get-intrinsic": "^1.2.4",
        "gopd": "^1.0.1",
        "has-property-descriptors": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==",
      "license": "ISC"
    },
    "node_modules/side-channel": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.0.6.tgz",
      "integrity": "sha512-fDW/EZ6Q9RiO8eFG8Hj+7u/oW+XrPTIChwCOM2+th2A6OblDtYYIpve9m+KvI9Z4C9qSEXlaGR6bTEYHReuglA==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.4",
        "object-inspect": "^1.13.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/socket.io": {
      "version": "4.7.5",
      "resolved": "https://registry.npmjs.org/socket.io/-/socket.io-4.7.5.tgz",
      "integrity": "sha512-DmeAkF6cwM9jSfmp6Dr/5/mfMwb5Z5qRrSXLpo3Fq5SqyU8CMF15jIN4ZhfSwu35ksM1qmHZDQ/DK5XTccSTvA==",
      "license": "MIT",
      "dependencies": {
        "accepts": "~1.3.4",
        "base64id": "~2.0.0",
        "cors": "~2.8.5",
        "debug": "~4.3.2",
        "engine.io": "~6.5.2",
        "socket.io-adapter": "~2.5.2",
        "socket.io-parser": "~4.2.4"
      },
      "engines": {
        "node": ">=10.2.0"
      }
    },
    "node_modules/socket.io-adapter": {
      "version": "2.5.5",
      "resolved": "https://registry.npmjs.org/socket.io-adapter/-/socket.io-adapter-2.5.5.tgz",
      "integrity": "sha512-eLDQas5dzPgOWCk9GuuJC2lBqItuhKI4uxGgo9aIV7MYbk2h9Q6uULEh8WBzThoI7l+qU9Ast9fVUmkqPP9wYg==",
      "license": "MIT",
      "dependencies": {
        "debug": "~4.3.4",
        "ws": "~8.17.1"
      }
    },
    "node_modules/socket.io-adapter/node_modules/debug": {
      "version": "4.3.6",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.6.tgz",
      "integrity": "sha512-O/09Bd4Z1fBrU4VzkhFqVgpPzaGbw6Sm9FEkBT1A/YBXQFGuuSxa1dN2nxgxS34JmKXqYx8CZAwEVoJFImUXIg==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/socket.io-adapter/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
      "license": "MIT"
    },
    "node_modules/socket.io-parser": {
      "version": "4.2.4",
      "resolved": "https://registry.npmjs.org/socket.io-parser/-/socket.io-parser-4.2.4.tgz",
      "integrity": "sha512-/GbIKmo8ioc+NIWIhwdecY0ge+qVBSMdgxGygevmdHj24bsfgtCmcUUcQ5ZzcylGFHsN3k4HB4Cgkl96KVnuew==",
      "license": "MIT",
      "dependencies": {
        "@socket.io/component-emitter": "~3.1.0",
        "debug": "~4.3.1"
      },
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/socket.io-parser/node_modules/debug": {
      "version": "4.3.6",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.6.tgz",
      "integrity": "sha512-O/09Bd4Z1fBrU4VzkhFqVgpPzaGbw6Sm9FEkBT1A/YBXQFGuuSxa1dN2nxgxS34JmKXqYx8CZAwEVoJFImUXIg==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/socket.io-parser/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
      "license": "MIT"
    },
    "node_modules/socket.io/node_modules/debug": {
      "version": "4.3.6",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.6.tgz",
      "integrity": "sha512-O/09Bd4Z1fBrU4VzkhFqVgpPzaGbw6Sm9FEkBT1A/YBXQFGuuSxa1dN2nxgxS34JmKXqYx8CZAwEVoJFImUXIg==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/socket.io/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
      "license": "MIT"
    },
    "node_modules/statuses": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
      "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/type-is": {
      "version": "1.6.18",
      "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz",
      "integrity": "sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==",
      "license": "MIT",
      "dependencies": {
        "media-typer": "0.3.0",
        "mime-types": "~2.1.24"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/undici-types": {
      "version": "6.13.0",
      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-6.13.0.tgz",
      "integrity": "sha512-xtFJHudx8S2DSoujjMd1WeWvn7KKWFRESZTMeL1RptAYERu29D6jphMjjY+vn96jvN3kVPDNxU/E13VTaXj6jg==",
      "license": "MIT"
    },
    "node_modules/unpipe": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
      "integrity": "sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/utils-merge": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
      "integrity": "sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/vary": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
      "integrity": "sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/ws": {
      "version": "8.17.1",
      "resolved": "https://registry.npmjs.org/ws/-/ws-8.17.1.tgz",
      "integrity": "sha512-6XQFvXTkbfUOZOKKILFG1PDK2NDQs4azKQl26T0YS5CxqWLgXajbPZ+h4gZekJyRqFU8pvnbAbbs/3TgRPy+GQ==",
      "license": "MIT",
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "bufferutil": "^4.0.1",
        "utf-8-validate": ">=5.0.2"
      },
      "peerDependenciesMeta": {
        "bufferutil": {
          "optional": true
        },
        "utf-8-validate": {
          "optional": true
        }
      }
    }
  }
}
===== ./Queue.h =====
#ifndef QUEUE_H
#define QUEUE_H

#include "Polyhedra.h"

class Queue {
private:
    Polyhedra arr[50]; // Increased queue size to accommodate more polyhedra
    int front, rear;

public:
    Queue();

    bool isEmpty();

    bool isFull();

    void push(Polyhedra value);

    void pop();
};

#endif
===== ./Time.h =====
#include <string>
#ifndef TIME_H
#define TIME_H

class Time {
public:
    explicit Time(int = 0, int = 0, int = 0);

    void setTime(int, int, int);
    void setHour(int);
    void setMinute(int);
    void setSecond(int);

    unsigned int getHour() const;
    unsigned int getMinute() const;
    unsigned int getSecond() const;

    std::string toUniversalString() const;
    std::string toStandardString() const;

private:
    unsigned int hour{0};
    unsigned int minute{0};
    unsigned int second{0};
};

#endif===== ./onewordsearch.cpp =====
#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <map>

using namespace std;

int main() {
  // Open the txt file.
  ifstream file("search.txt");

  // Check if the file opened successfully.
  if (!file) {
    cout << "Error opening file." << endl;
    return 1;
  }

  // Create a vector to store the words in the file.
  vector<string> words;

  // Read the words from the file.
  string word;
  while (file >> word) {
    words.push_back(word);
  }

  // Prompt the user for a word to find.
  cout << "Enter a word to find: ";
  string searchWord;
  cin >> searchWord;

  // Count the number of occurrences of the search word.
  int count = 0;
  for (string word : words) {
    if (word == searchWord) {
      count++;
    }
  }

  // Calculate the percentage of the search word in the file.
  double percentage = (double)count / words.size() * 100;

  // Print the statistics.
  cout << searchWord << " appears " << count << " times in the file. This is " << percentage << "% of the total words." << endl;

  // Close the file.
  file.close();

  return 0;
}

===== ./polyhedra.cpp =====
#ifndef POLYHEDRA_H
#define POLYHEDRA_H

#include <string>

class Polyhedra {
public:
    std::string name;
    std::string wythoff;
    std::string symbol;
    std::string c_num;
    std::string w_num;
    std::string u_num;
    std::string k_num;
    int vertices;
    int edges;
    int faces;
    std::string faces_by_type;

    void display(int longest_line_length) const;
};

#endif
===== ./credit_Menu_Terminal.cpp =====
#include <iostream>
using namespace std;

int main()
{

        float accountNumber = 0;
        float beginningBal  = 0;
        float totalCharges  = 0;
        float totalCredits  = 0;
        float creditLimit   = 0;
        float newBal        = 0;

        cout << "Enter Account Number (1-100) or -1 to Quit: ";
        cin  >> accountNumber;

        while(accountNumber != -1)
        {
                cout << "Enter Beginning Balance: ";
                cin  >> beginningBal;

                cout << "Enter Total Charges: ";
                cin  >> totalCharges;

                cout << "Enter Total Credits: ";
                cin  >> totalCredits;

                cout << "Enter Credit Limit: ";
                cin  >> creditLimit;

                newBal = beginningBal + totalCharges - totalCredits;
                cout << "New Balance: " << newBal  << endl;

                if (newBal > creditLimit)
                {
                        cout << "Account Number: " << accountNumber << endl;
                        cout << "Credit Limit: "   << creditLimit   << endl;
                        cout << "Balance: "        << newBal        << endl;
                        cout << "Credit Limit Exceeded! \n\n";
                }
                cout << "Enter Account Number (1-100) or -1 Quit: ";
                cin >> accountNumber;
        }

        return 0;
}
===== ./calculate_Radius(other).cpp =====
#include<iostream> 

#define PI 3.1416 

using namespace std; 



int main() { 

  int choice;

  int r, c, a, d; 

  //do{ 

    while(5){

   

   // while (choice >= 1 ||choice <= 5){

    cout << "1. Enter radius: \n";

    cout << "2. Calculate circumference\n";

    cout << "3. Calculate area \n";

    cout << "4. Calculate diameter\n";

    cout << "5. Exit \n";

    cin>>choice; 

    switch (choice) { 

      case 1: 

        cout << "Enter the radius of circle: "; 

        cin >> r; 

        cout << "The radius of circle is: "<< r << endl; 

        break;  

      case 2: 

        cout << "Enter the radius of circle: "; 

        cin >> r; 

        cout << "Circumference of circle: "

           << 2*PI*r 

           << endl; 

           break;

      case 3:

        cout << "Enter radius of circle: ";

        cin >> r;

        cout << "Area of circle is: "<< PI*r*r << endl; 

        break;

      case 4:

        cout << "Enter radius of circle: ";

        cin >> r;

        cout << "The diameter of the circle is:" 

           << r+r 

           << endl;

        break;

      default: 

        cout << "invalid selection (5 to exit!)\n"; 

        break; 

      }

    }while(choice!=5)

     

    return 0;

   

}

   ===== ./hashing_bloom_filters.cpp =====
===== ./lab5.cpp =====
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <sstream>

struct Student {
    std::string name;
    double gpa;
};

bool compareByGPA(const Student& s1, const Student& s2) {
    return s1.gpa < s2.gpa;
}

void loadStudentRecords(std::vector<Student>& students) {
    std::ifstream inputFile("students.txt");
    if (inputFile.is_open()) {
        std::string line;
        while (std::getline(inputFile, line)) {
            std::istringstream iss(line);
            std::string lastName, firstName;
            double gpa;
            if (std::getline(iss, lastName, ',') &&
                std::getline(iss, firstName, ',') &&
                iss >> gpa) {
                Student student;
                student.name = lastName + " " + firstName;
                student.gpa = gpa;
                students.push_back(student);
            } else {
                std::cout << "Error reading data for student: " << line << std::endl;
            }
        }
        inputFile.close();
    } else {
        std::cout << "Failed to open students.txt" << std::endl;
    }
}

void viewData(const std::vector<Student>& students) {
    std::cout << students.size() << std::endl;
    for (const auto& student : students) {
        std::cout << student.name << " " << student.gpa << std::endl;
    }
}

void merge(std::vector<Student>& students, int left, int mid, int right) {
    int n1 = mid - left + 1;
    int n2 = right - mid;

    std::vector<Student> L(n1), R(n2);

    for (int i = 0; i < n1; i++)
        L[i] = students[left + i];
    for (int j = 0; j < n2; j++)
        R[j] = students[mid + 1 + j];
        
    int i = 0, j = 0, k = left;
    while (i < n1 && j < n2) {
        if (L[i].gpa <= R[j].gpa) {
            students[k] = L[i];
            i++;
        } else {
            students[k] = R[j];
            j++;
        }
        k++;
    }
    while (i < n1) {
        students[k] = L[i];
        i++;
        k++;
    }
    while (j < n2) {
        students[k] = R[j];
        j++;
        k++;
    }
}

void mergeSort(std::vector<Student>& students, int left, int right) {
    std::cout << "mergeSort called with left=" << left << " right=" << right << std::endl;
    if (left < right) {
        int mid = left + (right - left) / 2;

        mergeSort(students, left, mid);
        mergeSort(students, mid + 1, right);

        merge(students, left, mid, right);
    }
}

void mergeSortData(std::vector<Student>& students) {
    std::cout << "mergeSortData called" << std::endl;
    mergeSort(students, 0, students.size() - 1);
}

void quickSortData(std::vector<Student>& students, int low, int high);

int partitionQuick(std::vector<Student>& students, int low, int high) {
    double pivot = students[high].gpa;
    int i = (low - 1);

    for (int j = low; j <= high - 1; j++) {
        if (students[j].gpa < pivot) {
            i++;
            std::swap(students[i], students[j]);
        }
    }
    std::swap(students[i + 1], students[high]);
    return (i + 1);
}

void quickSortData(std::vector<Student>& students, int low, int high) {
    if (low < high) {
        int pi = partitionQuick(students, low, high);

        quickSortData(students, low, pi - 1);
        quickSortData(students, pi + 1, high);
    }
}

int main() {
    std::vector<Student> students;
    int option;
    int low, high; 

    do {
        std::cout << "|---------------------------------------|" << std::endl;
        std::cout << "|         Student Records Sorter        |" << std::endl;
        std::cout << "|---------------------------------------|" << std::endl;
        std::cout << "|Option | Description                   |" << std::endl;
        std::cout << "|-------|-------------------------------|" << std::endl;
        std::cout << "| 1     | Load student records          |" << std::endl;
        std::cout << "| 2     | View data                     |" << std::endl;
        std::cout << "| 3     | MergeSort data                |" << std::endl;
        std::cout << "| 4     | QuickSort data                |" << std::endl;
        std::cout << "| 5     | Exit                          |" << std::endl;
        std::cout << "|---------------------------------------|" << std::endl;
        std::cout << std::endl;
        std::cout << "Choose an option: ";
        std::cin >> option;
        std::cout << std::endl;

        switch (option) {
            case 1:
                std::cout << "Loading Student Data...";
                loadStudentRecords(students);
                break;
            case 2:
                viewData(students);
                break;
            case 3:
                mergeSortData(students);
                viewData(students);
                break;
            case 4:
                low = 0;
                high = students.size() - 1;
                quickSortData(students, low, high);
                viewData(students);
                break;
            case 5:
                std::cout << "Exiting..." << std::endl;
                break;
            default:
                std::cout << "Invalid option. Please try again." << std::endl;
                break;
        }

        std::cout << std::endl;
    } while (option != 5);

    return 0;
}
===== ./inputLinebyLineProgram.cpp =====
#include <iostream>
#include <fstream>
using namespace std;

void write_appendPoem();

int main() {
    write_appendPoem();

    return 0;
}
void write_appendPoem() {
    ofstream poem_input("poem_input.txt", ios::app);

    if (!poem_input) {
        cerr << "Failed to open the poem." << endl;
        return;
    }
    cout << "Please enter a poem (-1 to end input)" << endl;
    string line;
    while (true) {
        cout << "Enter new line: ";
        getline(cin, line);

        if (line == "-1")
            break;

        poem_input << line << endl;
    }

    poem_input.close();
}
===== ./VSWorkspaceState.json =====
{
  "ExpandedNodes": [
    ""
  ],
  "SelectedNode": "\\program4",
  "PreviewInSolutionExplorer": false
}===== ./rational2.h =====
===== ./polyhedra.h =====
#ifndef POLYHEDRA_H
#define POLYHEDRA_H

#include <string>

class Polyhedra {
public:
    std::string name;
    std::string wythoff;
    std::string symbol;
    std::string c_num;
    std::string w_num;
    std::string u_num;
    std::string k_num;
    int vertices;
    int edges;
    int faces;
    std::string faces_by_type;

    void display(int longest_line_length) const;
};

#endif
===== ./Output-Build.txt =====
﻿1>------ Build started: Project: program1, Configuration: Debug|Win32 ------
1>  Employee.cpp
1>C:\Users\joele\OneDrive - South Texas College\Fall 2023\COSC 1337 -  V02\Chapter 9\Employee.h(10,13): error C4430: missing type specifier - int assumed. Note: C++ does not support default-int
1>C:\Users\joele\OneDrive - South Texas College\Fall 2023\COSC 1337 -  V02\Chapter 9\Employee.h(11,19): error C2143: syntax error: missing ',' before '&'
1>C:\Users\joele\OneDrive - South Texas College\Fall 2023\COSC 1337 -  V02\Chapter 9\Employee.h(17,16): error C4430: missing type specifier - int assumed. Note: C++ does not support default-int
1>C:\Users\joele\OneDrive - South Texas College\Fall 2023\COSC 1337 -  V02\Chapter 9\Employee.h(17,16): error C3646: 'birthDate': unknown override specifier
1>C:\Users\joele\OneDrive - South Texas College\Fall 2023\COSC 1337 -  V02\Chapter 9\Employee.h(18,16): error C4430: missing type specifier - int assumed. Note: C++ does not support default-int
1>C:\Users\joele\OneDrive - South Texas College\Fall 2023\COSC 1337 -  V02\Chapter 9\Employee.h(18,16): error C3646: 'hireDate': unknown override specifier
1>C:\Users\joele\OneDrive - South Texas College\Fall 2023\COSC 1337 -  V02\Chapter 9\Employee.h(18,11): error C2086: 'const int Employee::Date': redefinition
1>C:\Users\joele\OneDrive - South Texas College\Fall 2023\COSC 1337 -  V02\Chapter 9\Employee.cpp(8,15): error C4430: missing type specifier - int assumed. Note: C++ does not support default-int
1>C:\Users\joele\OneDrive - South Texas College\Fall 2023\COSC 1337 -  V02\Chapter 9\Employee.cpp(8,15): error C2143: syntax error: missing ',' before '&'
1>C:\Users\joele\OneDrive - South Texas College\Fall 2023\COSC 1337 -  V02\Chapter 9\Employee.cpp(11,16): error C2065: 'dateOfBirth': undeclared identifier
1>C:\Users\joele\OneDrive - South Texas College\Fall 2023\COSC 1337 -  V02\Chapter 9\Employee.cpp(12,15): error C2065: 'dateOfHire': undeclared identifier
1>C:\Users\joele\OneDrive - South Texas College\Fall 2023\COSC 1337 -  V02\Chapter 9\Employee.cpp(12,28): error C2789: 'Employee::Date': an object of const-qualified type must be initialized
1>C:\Users\joele\OneDrive - South Texas College\Fall 2023\COSC 1337 -  V02\Chapter 9\Employee.h(17,11): message : see declaration of 'Employee::Date'
1>C:\Users\joele\OneDrive - South Texas College\Fall 2023\COSC 1337 -  V02\Chapter 9\Employee.cpp(11,5): error C2614: 'Employee': illegal member initialization: 'birthDate' is not a base or member
1>C:\Users\joele\OneDrive - South Texas College\Fall 2023\COSC 1337 -  V02\Chapter 9\Employee.cpp(12,5): error C2614: 'Employee': illegal member initialization: 'hireDate' is not a base or member
1>C:\Users\joele\OneDrive - South Texas College\Fall 2023\COSC 1337 -  V02\Chapter 9\Employee.cpp(21,12): error C2065: 'hireDate': undeclared identifier
1>C:\Users\joele\OneDrive - South Texas College\Fall 2023\COSC 1337 -  V02\Chapter 9\Employee.cpp(21,52): error C2065: 'birthDate': undeclared identifier
1>  fig09_22.cpp
1>C:\Users\joele\OneDrive - South Texas College\Fall 2023\COSC 1337 -  V02\Chapter 9\Employee.h(10,13): error C4430: missing type specifier - int assumed. Note: C++ does not support default-int
1>C:\Users\joele\OneDrive - South Texas College\Fall 2023\COSC 1337 -  V02\Chapter 9\Employee.h(11,19): error C2143: syntax error: missing ',' before '&'
1>C:\Users\joele\OneDrive - South Texas College\Fall 2023\COSC 1337 -  V02\Chapter 9\Employee.h(17,16): error C4430: missing type specifier - int assumed. Note: C++ does not support default-int
1>C:\Users\joele\OneDrive - South Texas College\Fall 2023\COSC 1337 -  V02\Chapter 9\Employee.h(17,16): error C3646: 'birthDate': unknown override specifier
1>C:\Users\joele\OneDrive - South Texas College\Fall 2023\COSC 1337 -  V02\Chapter 9\Employee.h(18,16): error C4430: missing type specifier - int assumed. Note: C++ does not support default-int
1>C:\Users\joele\OneDrive - South Texas College\Fall 2023\COSC 1337 -  V02\Chapter 9\Employee.h(18,16): error C3646: 'hireDate': unknown override specifier
1>C:\Users\joele\OneDrive - South Texas College\Fall 2023\COSC 1337 -  V02\Chapter 9\Employee.h(18,11): error C2086: 'const int Employee::Date': redefinition
1>C:\Users\joele\OneDrive - South Texas College\Fall 2023\COSC 1337 -  V02\Chapter 9\fig09_22.cpp(10,21): error C2440: 'initializing': cannot convert from 'initializer list' to 'Employee'
1>C:\Users\joele\OneDrive - South Texas College\Fall 2023\COSC 1337 -  V02\Chapter 9\fig09_22.cpp(10,21): message : 'Employee::Employee': function does not take 4 arguments
1>C:\Users\joele\OneDrive - South Texas College\Fall 2023\COSC 1337 -  V02\Chapter 9\fig09_22.cpp(10,21): message : while trying to match the argument list '(const char [4], const char [5], Date, Date)'
1>  Generating Code...
========== Build: 0 succeeded, 1 failed, 0 up-to-date, 0 skipped =============== ./Source2.cpp =====
#include <string>
using namespace std;
int main() {
    class Account {
    public:
        Account(std::string accountName, int initialBalance)
            : name{ accountName } {
            if (initialBalance > 0) {
                balance = initialBalance;
            }
        }
        void deposit(int depositAmount) {
            if (depositAmount > 0) {
                balance = balance + depositAmount;
            }
        }
        int getBalance() const {
            return balance;
        }
        void setName(std::string accountName) {
            name = accountName;
        }
        std::string getName() const {
            return name;
        }
    private:
        std::string name;
        int balance{ 0 };
    };

};
===== ./wagecalculatorworking.c =====
#include <stdio.h>
//#include <iomanip>
int main(void)
{
        printf("Your Wage for this Week\n");
        int choice;
        double managerWeeklySalary = 1000.00;
        double hourlyWage = 15;
        double numberOfHours, fullTimeHours, overTimeHours;
        double commissionBase = 250;
        double grossWeeklySales;
        double salary;
        double pieceAmount = 1.5;
        int piecesNum;

        do{
                printf("1. Manager\n");
                printf("2. Employee\n");
                printf("3. Commission Worker\n");
                printf("4. Piece Worker\n");
                printf("5. Exit\n");
                scanf("%d", &choice);

        switch(choice){

                case 1:

                        printf("Your Weekly Salary is: %lf\n", managerWeeklySalary);
                        break;

                case 2:

                        printf("Employee\n");
                        printf("Enter the number of hours worked:");
                        scanf("%lf", &numberOfHours);

                        if(numberOfHours > 40){

                        fullTimeHours = 40;
                        overTimeHours = numberOfHours - 40;
                        }

                        else{
                        fullTimeHours = numberOfHours;
                        overTimeHours = 0;
                        salary = fullTimeHours * hourlyWage + overTimeHours * hourlyWage * 1.5;
                        }
                        printf("Your Weekly Salary is: %.2f\n", salary);
                        break;

                case 3:

                        printf("Enter Your Weekly Sales:\n");
                        scanf("%lf", &grossWeeklySales);
                        salary = commissionBase + grossWeeklySales * 5.7/100;
                        printf("Your Weekly Salary is: %.2f\n", salary);
                        break;

                case 4:

                        printf("How many pieces did you make?\n");
                        scanf("%d", &piecesNum);
                        salary = piecesNum * pieceAmount;
                        printf("Your Weekly Salary is: %.2f\n", salary);
                        break;

                case 5:

                        printf("Goodbye!");
                        break;
                        }

        }while(choice!=5);

        return 0;

}
===== ./component.json =====
{
  "name": "debug",
  "repo": "visionmedia/debug",
  "description": "small debugging utility",
  "version": "2.6.9",
  "keywords": [
    "debug",
    "log",
    "debugger"
  ],
  "main": "src/browser.js",
  "scripts": [
    "src/browser.js",
    "src/debug.js"
  ],
  "dependencies": {
    "rauchg/ms.js": "0.7.1"
  }
}
===== ./Bank.h =====
// Bank.h
#ifndef Bank_H
#define Bank_H

#include <string>
#include <unordered_map>
#include <memory>



class InsufficientFundsException {};

class Account {
protected:
    double balance;

public:
    Account(double balance);
    virtual ~Account() = default;
    virtual void deposit(double amount);
    virtual void withdraw(double amount);
    double getBalance() const;
};

class SavingsAccount : public Account {
private:
    double interestRate;

public:
    SavingsAccount(double balance, double interestRate);
    void addInterest();
};

class CheckingAccount : public Account {
private:
    double feePerTransaction;

public:
    CheckingAccount(double balance, double feePerTransaction);
    void deposit(double amount) override;
    void withdraw(double amount) override;
};

std::unordered_map<std::string, std::unique_ptr<Account>> initializeStudents();
Account* login(const std::unordered_map<std::string, std::unique_ptr<Account>>& students, std::string& loggedInUsername, const std::string& correctUsername, const std::string& correctPassword);  // Updated function declaration

void viewAccount(Account* account);
void addMoney(Account* account);
void withdrawMoney(Account* account);

#endif // Bank_H

===== ./other.cpp =====
#include <iostream>
#include <string>
#include <thread>
#include <algorithm>
#include "Node.h"
using namespace std;

Node::Node(string desc) : description(desc), gem(false), sword(false), chest(false), cave(false), north(nullptr), south(nullptr), east(nullptr), west(nullptr) {}

void print_with_pause(string text, int pause_time = 1500);

string to_lower(string str);

void explore_forest(Node* current_location, bool& found_gem, bool& found_sword, bool& found_chest, bool& found_cave);

int main() {

    Node* start = new Node("\033[96m🌲 Welcome to the Enchanted Forest! As you step into the forest, you feel a gentle breeze carrying whispers of ancient magic.\033[0m");
    Node* heart_of_forest = new Node("\033[96m🌳 You've reached the heart of the Enchanted Forest. Majestic trees tower above, their branches swaying in harmony with the forest's melody.\033[0m");
    Node* fork_in_path = new Node("\033[96m🌅 At a fork in the path, you sense two distinct energies calling to you – one vibrant and lively, the other tranquil and mysterious.\033[0m");
    Node* meadow = new Node("\033[96m🌼 Entering a sun-kissed meadow, you're greeted by a chorus of singing birds and dancing flowers. Nature's symphony fills your heart with joy.\033[0m");
    Node* hidden_cave = new Node("\033[96m🏞️ Concealed behind a waterfall, you find a hidden cave. The air is thick with magic, and you can't help but feel a sense of wonder.\033[0m");
    Node* crystal_cavern = new Node("\033[96m️⛰️Venturing into the cave, you discover a breathtaking crystal cavern, its walls adorned with precious gems that twinkle like stars.\033[0m");
    Node* glade = new Node("\033[96m🌺 You stumble upon a tranquil glade, bathed in soft sunlight. Colorful flowers bloom all around, emitting a sweet fragrance.\033[0m");
    Node* ancient_ruins = new Node("\033[96m🏰 You come across ancient ruins, remnants of a once-glorious civilization. Whispers of forgotten tales linger in the air.\033[0m");
    Node* mystical_pool = new Node("\033[96m🌊 A mystical pool shimmers in the sunlight, its waters reflecting the secrets of the forest.\033[0m");
    Node* whispering_trees = new Node("\033[96m🌳 The whispering trees beckon you closer, their ancient voices carrying hints of hidden knowledge.\033[0m");
    Node* enchanted_meadow = new Node("\033[96m🍄 Walking into an enchanted meadow, you find yourself surrounded by magical mushrooms of all shapes and sizes.\033[0m");
    Node* shimmering_falls = new Node("\033[96m💧 A cascading waterfall shimmers in the distance, its mesmerizing beauty drawing you closer.\033[0m");
    Node* ethereal_clearing = new Node("\033[96m✨ You step into an ethereal clearing, bathed in the soft glow of faerie lights. Time seems to stand still in this magical place.\033[0m");
    Node* ancient_grove = new Node("\033[96m🌳 You wander into an ancient grove, where ancient spirits linger among the ancient trees.\033[0m");
    Node* forgotten_path = new Node("\033[96m🌿 You stumble upon a forgotten path, overgrown with moss and ivy. It seems to lead to an unknown destination.\033[0m");
    Node* twilight_glade = new Node("\033[96m🌄 You discover a tranquil glade bathed in twilight hues, the sky painted with shades of orange and purple.\033[0m");
    Node* luminous_lake = new Node("\033[96m🌅 A luminous lake stretches before you, its waters reflecting the colors of the setting sun.\033[0m");
    Node* ancient_altar = new Node("\033[96m⛩️ You stumble upon an ancient altar, carved with mysterious symbols. The air around it hums with ancient power.\033[0m");
    Node* hidden_clearing = new Node("\033[96m🍃 A hidden clearing appears before you, surrounded by towering trees. It seems untouched by time.\033[0m");


    crystal_cavern->gem = true;
    hidden_cave->sword = true;
    fork_in_path->chest = true;
    meadow->cave = true;

    start->north = heart_of_forest;
    heart_of_forest->south = start;
    heart_of_forest->north = fork_in_path;
    fork_in_path->south = heart_of_forest;
    fork_in_path->east = meadow;
    fork_in_path->west = hidden_cave;
    meadow->west = fork_in_path;
    hidden_cave->east = fork_in_path;
    hidden_cave->north = crystal_cavern;
    crystal_cavern->south = hidden_cave;

    start->east = ancient_ruins;
    start->west = mystical_pool;
    ancient_ruins->west = start;
    mystical_pool->east = start;

    heart_of_forest->east = whispering_trees;
    heart_of_forest->west = enchanted_meadow;
    whispering_trees->west = heart_of_forest;
    enchanted_meadow->east = heart_of_forest;

    fork_in_path->east = shimmering_falls;
    fork_in_path->west = ethereal_clearing;
    shimmering_falls->west = fork_in_path;
    ethereal_clearing->east = fork_in_path;

    hidden_cave->south = ancient_grove;
    hidden_cave->east = forgotten_path;
    ancient_grove->north = hidden_cave;
    forgotten_path->west = hidden_cave;

    meadow->north = twilight_glade;
    meadow->south = luminous_lake;
    twilight_glade->south = meadow;
    luminous_lake->north = meadow;

    crystal_cavern->east = ancient_altar;
    crystal_cavern->west = hidden_clearing;
    ancient_altar->west = crystal_cavern;
    hidden_clearing->east = crystal_cavern;

    print_with_pause("\033[96mWelcome to the Enchanted Forest!\033[0m");
    
    string user_name;
    cout << "\033[93m✨What's your name, brave adventurer? \033[0m";
    cin >> user_name;

    print_with_pause("\n\033[1m\033[92m🌈Greetings, " + user_name + "! Prepare to embark on a magical journey!☘️🚀🏔️\033[0m");

    bool found_gem = false;
    bool found_sword = false;
    bool found_chest = false;
    bool found_cave = false;

    explore_forest(start, found_gem, found_sword, found_chest, found_cave);

    delete start;
    delete heart_of_forest;
    delete fork_in_path;
    delete meadow;
    delete hidden_cave;
    delete crystal_cavern;
    delete glade;
    delete ancient_ruins;
    delete mystical_pool;
    delete whispering_trees;
    delete enchanted_meadow;
    delete shimmering_falls;
    delete ethereal_clearing;
    delete ancient_grove;
    delete forgotten_path;
    delete twilight_glade;
    delete luminous_lake;
    delete ancient_altar;
    delete hidden_clearing;

    print_with_pause("\n\033[96mThank you for exploring the Enchanted Forest. Come back soon!\033[0m");

    return 0;
}

void print_with_pause(string text, int pause_time) {
    cout << text << endl;
    this_thread::sleep_for(chrono::milliseconds(pause_time));
}

string to_lower(string str) {
    transform(str.begin(), str.end(), str.begin(), ::tolower);
    return str;
}

void explore_forest(Node* current_location, bool& found_gem, bool& found_sword, bool& found_chest, bool& found_cave) {
    print_with_pause(current_location->description);

    if (current_location->gem && !found_gem) {
        found_gem = true;
        print_with_pause("\033[94m💎 You stumbled upon a glittering gem hidden among the ferns!\033[0m");
    }
    if (current_location->sword && !found_sword) {
        found_sword = true;
        print_with_pause("\033[92m🗡️ A gleaming sword, adorned with ancient runes, catches your eye!\033[0m");
    }
    if (current_location->chest && !found_chest) {
        found_chest = true;
        print_with_pause("\033[93m🎉 You discover a mysterious treasure chest half-buried beneath a magical oak tree!\033[0m");
    }
    if (current_location->cave && !found_cave) {
        found_cave = true;
        print_with_pause("\033[95m⛰️️ A hidden underwater cave beckons you with its iridescent glow!\033[0m");
    }

    if (found_gem && found_sword && found_chest && found_cave) {
        print_with_pause("\033[1m\033[91m🌈 Congratulations! You've found all the magical treasures and completed your quest!\033[0m");
        return;
    }

    string direction;
    cout << "\033[93m🔍 Which path will you explore next? (north/south/east/west): \033[0m";
    cin >> direction;

    direction = to_lower(direction);

    if (direction == "north" && current_location->north != nullptr) {
        explore_forest(current_location->north, found_gem, found_sword, found_chest, found_cave);
    } else if (direction == "south" && current_location->south != nullptr) {
        explore_forest(current_location->south, found_gem, found_sword, found_chest, found_cave);
    } else if (direction == "east" && current_location->east != nullptr) {
        explore_forest(current_location->east, found_gem, found_sword, found_chest, found_cave);
    } else if (direction == "west" && current_location->west != nullptr) {
        explore_forest(current_location->west, found_gem, found_sword, found_chest, found_cave);
    } else {
        print_with_pause("\033[91m🪄 You encountered a magical barrier, preventing further exploration in that direction. Perhaps there's another path to discover...\033[0m");
        explore_forest(current_location, found_gem, found_sword, found_chest, found_cave);
    }
}
===== ./grade2.c =====
#include <stdio.h>
#define STUDENTS 2
#define EXAMS 4

int min(const int grades[] [EXAMS], int pupils, int test);
int max(const int grades[] [EXAMS], int pupils, int test);
double average(const int setOfGrades [], int test);
void printArray(const int grades[][EXAMS], int pupils, int test);


int main (void){

int student;

const int studentGrades[STUDENTS][EXAMS]=
{{77, 68, 86, 73},
{96, 87, 89, 78},
{70, 90, 86, 81}};

printf("The array is:\n");
printArray(studentGrades, STUDENTS, EXAMS);

printf("\n\nLowest grade: %d\nHighest grade:%d\n",
min(studentGrades, STUDENTS, EXAMs),
max(studentGrades, STUDENTS, EXAMS));
    for(student = 0;student < STUDENTS; student++){
        printf("The average grade for student %d is %.2f\n"), 
        student, average(studentGrades[student], EXAMS));
    }
return 0;
}
int min(const int grades[][EXAMS], int pupils, int tests)
{
int i;
int j;
int lowGrade = 100;

for (i = 0; i < pupils; i++){
            
    for(j = 0; j < tests; j++){
            
        if( grades[i][j] < lowGrade ){
            lowGrade = grades[i][j];
            }
        }
    }
return lowGrade;
}
int min(const int grades[][EXAMS], int pupils, int tests)
{
int i;
int j;
int highGrade = 0;
for (i = 0; i < pupils; i++){
    for(j = 0; j < tests; j++){
        if(grades[i][j] > highGrade){
            highgrade = grades [i][j];
            }
        }
    }
return highGrade;
}     ===== ./atm.cpp =====
#include <iostream>
#include "Bank.h"
#include <memory>
using namespace std;

const std::string username = "Admin";
const std::string password = "123456";

std::unordered_map<std::string, std::unique_ptr<Account>> initializeStudents();

int main() {
    std::unordered_map<std::string, std::unique_ptr<Account>> students = initializeStudents();
    std::string loggedInUsername;
    Account* loggedInUser = nullptr;

    while (true) {
        std::cout << "\n----- STC Student Banking Management System -----\n";
        std::cout << "1. Log in\n";
        std::cout << "2. View Account Data\n";
        std::cout << "3. Add money\n";
        std::cout << "4. Withdraw\n";
        std::cout << "5. Log out\n";
        std::cout << "6. Exit\n";

        int choice;
        std::cout << "Enter your choice (1-6): ";
        std::cin >> choice;

        if (choice == 1) {
    if (loggedInUser == nullptr) {
        loggedInUser = login(students, loggedInUsername, username, password);
    } else {
        std::cout << "You are already logged in.\n";
    }

        } else if (choice == 2) {
            if (loggedInUser != nullptr) {
                viewAccount(loggedInUser);
            } else {
                std::cout << "You need to log in first.\n";
            }
        } else if (choice == 3) {
            if (loggedInUser != nullptr) {
                addMoney(loggedInUser);
            } else {
                std::cout << "You need to log in first.\n";
            }
        } else if (choice == 4) {
            if (loggedInUser != nullptr) {
                withdrawMoney(loggedInUser);
            } else {
                std::cout << "You need to log in first.\n";
            }
        } else if (choice == 5) {
            loggedInUser = nullptr;
            loggedInUsername = "";
            std::cout << "Logged out successfully!\n";
        } else if (choice == 6) {
            break;
        } else {
            std::cout << "Invalid choice. Please try again.\n";
        }
    }

    std::cout << "Thank you for using the STC Student Banking Management System!\n";

    return 0;
}===== ./Tortoise.cpp =====
#include "Tortoise.h"
#include <iostream>

Tortoise::Tortoise() {
    square = 1;
}

bool Tortoise::victor() {
    return square >= 70;
}

void Tortoise::win() {
    std::cout << "TORTOISE WINS!!!" << std::endl;
}

void Tortoise::fastPlod() {
    square += 3;
    if (square > 70)
        square = 70;
}

void Tortoise::slip() {
    square -= 6;
    if (square < 1)
        square = 1;
}

void Tortoise::slowPlod() {
    square += 1;
}
===== ./JRivas_Lab8(error).cpp =====
#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <vector>
#include <iomanip>
#include <stack>
#include <queue>

using namespace std;

class Polyhedra {
public:
    string name;
    string wythoff;
    string symbol;
    string c_num;
    string w_num;
    string u_num;
    string k_num;
    int vertices;
    int edges;
    int faces;
    string faces_by_type;

    void display(int longest_line_length) const {
        cout << setw(longest_line_length) << left << name << " ";
        cout << setw(17) << left << wythoff << " ";
        cout << setw(6) << left << symbol << " ";
        cout << setw(8) << left << c_num << " ";
        cout << setw(6) << left << w_num << " ";
        cout << setw(6) << left << u_num << " ";
        cout << setw(6) << left << k_num << " ";
        cout << setw(6) << left << vertices << " ";
        cout << setw(8) << left << edges << " ";
        cout << setw(6) << left << faces << " ";
        cout << setw(10) << left << faces_by_type << "\n";
    }
};

int main() {
    vector<Polyhedra> data;
    ifstream inputFile("polyhedra.csv");
    if (inputFile) {
        string line;
        while (getline(inputFile, line)) {
            stringstream ss(line);
            Polyhedra polyhedron;
            getline(ss, polyhedron.name, ',');
            getline(ss, polyhedron.wythoff, ',');
            getline(ss, polyhedron.symbol, ',');
            getline(ss, polyhedron.c_num, ',');
            getline(ss, polyhedron.w_num, ',');
            getline(ss, polyhedron.u_num, ',');
            getline(ss, polyhedron.k_num, ',');
            ss >> polyhedron.vertices;
            ss.ignore();
            ss >> polyhedron.edges;
            ss.ignore();
            ss >> polyhedron.faces;
            ss.ignore();
            getline(ss, polyhedron.faces_by_type, '\n');
            data.push_back(polyhedron);
        }
        inputFile.close();
    } else {
        cerr << "Error: Unable to open input file." << endl;
        return 1;
    }

    int longest_line_length = 0;
    for (const auto& polyhedron : data) {
        if (polyhedron.name.length() > longest_line_length) {
            longest_line_length = polyhedron.name.length();
        }
    }

    stack<Polyhedra> myStack;
    queue<Polyhedra> myQueue;

    for (const auto& polyhedron : data) {
        myStack.push(polyhedron);
        myQueue.push(polyhedron);
    }

    int choice = 0;
    while (choice != 4) {
        cout << "\nMenu:\n";
        cout << "1. List Original Data\n";
        cout << "2. Report of Stack of Data\n";
        cout << "3. Report of Queue of Data\n";
        cout << "4. End Program\n";
        cout << "Enter choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "\nOriginal Data:\n";
                cout << setw(longest_line_length) << left << "Name" << " ";
                cout << setw(17) << left << "Wythoff" << " ";
                cout << setw(6) << left << "Symbol" << " ";
                cout << setw(8) << left << "C#" << " ";
                cout << setw(6) << left << "W#" << " ";
                cout << setw(6) << left << "U#" << " ";
                cout << setw(6) << left << "K#" << " ";
                cout << setw(6) << left << "Vertices" << " ";
                cout << setw(8) << left << "Edges" << " ";
                cout << setw(6) << left << "Faces" << " ";
                cout << setw(10) << left << "Faces by Type" << "\n";
                for (const auto& polyhedron : data) {
                    polyhedron.display(longest_line_length);
                }
                break;
            case 2:
                cout << "\nStack of Data:\n";
                while (!myStack.empty()) {
                    Polyhedra polyhedron = myStack.top();
                    polyhedron.display(longest_line_length);
                    myStack.pop();
                }
                break;
            case 3:
                cout << "\nQueue of Data:\n";
                while (!myQueue.empty()) {
                    Polyhedra polyhedron = myQueue.front();
                    polyhedron.display(longest_line_length);
                    myQueue.pop();
                }
                break;
            case 4:
                cout << "\nExiting program.\n";
                break;
            default:
                cout << "\nInvalid choice. Please try again.\n";
                break;
        }
    }

    return 0;
}
===== ./SelectionSort.cpp =====
#include "SelectionSort.h"
using namespace std;

void SelectionSort::sort(vector<int>& arr) {
    recursiveSelectionSort(arr, arr.size());
}

void SelectionSort::recursiveSelectionSort(vector<int>& arr, int n) {
    if (n <= 1)
        return;

    int minIndex = findMinIndex(arr, 0, n - 1);
    swap(arr[minIndex], arr[n - 1]);

    recursiveSelectionSort(arr, n - 1);
}

int SelectionSort::findMinIndex(vector<int>& arr, int start, int end) {
    int minIndex = start;
    for (int i = start + 1; i <= end; ++i) {
        if (arr[i] < arr[minIndex])
            minIndex = i;
    }
    return minIndex;
}
===== ./Source1.cpp =====
#include <iostream>
//#include "Account.h"
using namespace std;

int main() {
    Account account1{ "Jane Green", 50 };
    Account account2{ "John Blue", -7 };

    cout << "account1: " << account1.getName() << " balance is $"
        << account1.getBalance();
    cout << "\naccount2: " << account2.getName() << " balance is $"
        << account2.deposit(depositAmount);

    cout << "\n\nEnter deposit amount for account1: ";
    int depositAmount;
    cin >> depositAmount;
    cout << "adding " << depositAmount << " to account1 balance";
    account1.deposit(depositAmount);

    cout << "\n\naccount1: " << account1.getName() << " balance is $"
        << account1.getBalance();
    cout << "\naccount2: " << account2.getName() << " balance is $"
        << account2.getBalance();

    cout << "\n\nEnter deposit amount for account2: ";
    cin >> depositAmount;
    cout << "adding " << depositAmount << " to account2 balance";
    account2.deposit(depositAmount);

    cout << "\n\naccount1: " << account1.getName() << " balance is $"
        << account1.getBalance();
    cout << "\naccount2: " << account2.getName() << " balance is $"
        << account2.getBalance() << endl;
};===== ./tortoise_hare_race.cpp =====
#include <iostream>
#include <thread>
#include <chrono>
#include <cstdlib>
#include <ctime>
#include "Tortoise.h"
#include "Hare.h"

using namespace std;

void tick(Tortoise* turtlePtr, Hare* rabbitPtr);
void displayOutput(int turtleSquare, int rabbitSquare);

int main() {
    cout <<
        R"(             //\
           /     \
           / \     \
        / ___      \
        /     _      \
       / ____         \
     // /  /     ___   \   \
    //   T  O  R  T  O  I  S  E   A  N  D
  // /     T  H  E   H  A  R  E   R  A  C  E
//                         \    \  )",
cout << "\n" << endl;
cout << "BANG !!!\n",
cout << "AND THEY'RE OFF !!!!!\n" << endl;
    Tortoise turtle;
    Hare rabbit;

    Tortoise* turtlePtr = &turtle;
    Hare* rabbitPtr = &rabbit;

    while (!(turtlePtr->victor() || rabbitPtr->victor())) {
        std::this_thread::sleep_for(std::chrono::seconds(1));
        displayOutput(turtlePtr->square, rabbitPtr->square);
        tick(turtlePtr, rabbitPtr);
    }

    if (turtlePtr->victor() && rabbitPtr->victor())
        cout << "It's a tie.\n";
    else if (turtlePtr->victor())
        turtlePtr->win();
    else
        rabbitPtr->win();

    return 0;
}

void tick(Tortoise* turtlePtr, Hare* rabbitPtr) {
    srand(time(0));

    int random = rand() % 11;

    if (random < 5)
        turtlePtr->move();
    else if (random < 7)
        turtlePtr->move();
    else
        turtlePtr->move();

    if (random >= 2 && random < 4)
        rabbitPtr->move();
    else if (random < 5)
        rabbitPtr->move();
    else if (random < 8)
        rabbitPtr->move();
    else if (random < 10)
        rabbitPtr->move();

    displayOutput(turtlePtr->square, rabbitPtr->square);
}

void displayOutput(int turtleSquare, int rabbitSquare) {
    //system("clear");  
    const int trackWidth = 50;
    const int mountainHeight = 10;

    int turtlePosition = (turtleSquare * trackWidth) / 70;
    int rabbitPosition = (rabbitSquare * trackWidth) / 70;

    cout << "\x1B[31mTORTOISE\x1B[0m vs. \x1B[32mHARE\x1B[0m" << endl;

    for (int i = mountainHeight; i > 0; i--) {
        cout << "|";
        for (int j = 0; j < trackWidth; j++) {
            if (i == mountainHeight)
                cout << "_"; // Draw the track
            else {
                if (j == turtlePosition && i == 1)
                    cout << "\x1B[31mT\x1B[0m"; // Tortoise (red T)
                else if (j == rabbitPosition && i == 1)
                    cout << "\x1B[32mH\x1B[0m"; // Hare (green H)
                else
                    cout << " ";
            }
        }
        cout << "|" << endl;
    }

    if (turtleSquare == rabbitSquare)
        cout << "OUCH !!!" << endl;

    cout << "T = Tortoise, H = Hare" << endl;
}


===== ./menu(atomic)/Node.h =====
// Node.h
#ifndef NODE_H
#define NODE_H
#include <string>


struct Node {
    std::string description;
    bool gem;
    bool sword;
    bool chest;
    bool cave;
    Node* north;
    Node* south;
    Node* east;
    Node* west;

    Node(std::string desc);
};

#endif ===== ./menu(atomic)/students.txt =====
Andrew,Koch,2.0
Landyn,Adkins,2.6
Jakobe,Carey,2.7
Troy,Murray,2.9
Cullen,Dyer,3.0
Zaire,Murphy,2.2
Zaniyah,Martinez,3.7
Nolan,Lynch,0.6
Josh,Harris,1.3
Alejandra,Stevens,2.1
Reginald,Graves,1.9
Raelynn,Castro,3.8
Oscar,Norman,1.1
Emerson,Randolph,4.0
Mitchell,Roman,3.0
Alessandro,Huff,0.9
Clarissa,Rocha,3.1
Pedro,Acevedo,1.1
Katelyn,Gilmore,1.9
Julianna,Carroll,4.0===== ./menu(atomic)/Grades.txt =====
75
80
90
95
100
100
70
30
20
70===== ./menu(atomic)/ListNode.cpp =====
//ListNode.cpp
#include "ListNode.h"

ListNode::ListNode(double value1, ListNode *next1)
{
    value = value1;
    next = next1;
}===== ./menu(atomic)/InsertionSort.h =====
#ifndef INSERTIONSORT_H
#define INSERTIONSORT_H

#include <vector>

class InsertionSort {
public:
    static void sort(std::vector<int>& arr);
    
private:
    static void recursiveInsertionSort(std::vector<int>& arr, int n);
};

#endif===== ./menu(atomic)/SelectionSort.h =====
#ifndef SELECTIONSORT_H
#define SELECTIONSORT_H

#include <vector>
using namespace std;

class SelectionSort {
public:
    static void sort(vector<int>& arr);
    
private:
    static void recursiveSelectionSort(vector<int>& arr, int n);
    static int findMinIndex(vector<int>& arr, int start, int end);
};

#endif 
===== ./menu(atomic)/SelectionSort.cpp =====
#include "SelectionSort.h"
using namespace std;

void SelectionSort::sort(vector<int>& arr) {
    recursiveSelectionSort(arr, arr.size());
}

void SelectionSort::recursiveSelectionSort(vector<int>& arr, int n) {
    if (n <= 1)
        return;

    int minIndex = findMinIndex(arr, 0, n - 1);
    swap(arr[minIndex], arr[n - 1]);

    recursiveSelectionSort(arr, n - 1);
}

int SelectionSort::findMinIndex(vector<int>& arr, int start, int end) {
    int minIndex = start;
    for (int i = start + 1; i <= end; ++i) {
        if (arr[i] < arr[minIndex])
            minIndex = i;
    }
    return minIndex;
}
===== ./menu(atomic)/ListNode.h =====
//ListNode.h
#ifndef LISTNODE_H
#define LISTNODE_H

#include <cstddef>

struct ListNode
{
    double value;
    ListNode *next;

    ListNode(double value1, ListNode *next1 = NULL);
};

#endif===== ./menu(atomic)/main.cpp =====
#include <iostream>
#include <fstream>
#include <iomanip>
#include <vector>
#include <algorithm>
#include <string>
#include <cstdlib>
#include <ctime>
#include <map>
#include "ArrayStats.h"
#include "InsertionSort.h"
#include "SelectionSort.h"
#include "records_sorter.h"
#include "ListNode.h"
#include "Node.h"
#define GREEN   "\x1b[32m"
#define YELLOW  "\x1b[33m"
#define RESET   "\x1b[0m"

using namespace std;

Node::Node(string desc) : description(desc), gem(false), sword(false), chest(false), cave(false), north(nullptr), south(nullptr), east(nullptr), west(nullptr) {}

// Forward declarations for program_option1 + ... + program_option(n)
void program_option1();
void program_option2();
void program_option3();
void program_option4();
void program_option5();
void program_option6();
// Forward delcarations for programs_option1:
void generatePassword(char* array, int size);
void randomizeDoubles(double* array, int size);

void print_with_pause(string text, int pause_time = 1500);
string to_lower(string str);
void explore_forest(Node* current_location, bool& found_gem, bool& found_sword, bool& found_chest, bool& found_cave);

// Define MainMenu class
class MainMenu {
private:
    std::map<std::string, std::pair<std::string, void(*)()>> topics;

public:
    MainMenu() {
        topics = {
            {"1", {"\033[94mProgram1\033[0m", &program_option1}},
            {"2", {"\033[95mProgram2\033[0m", &program_option2}},
            {"3", {"\033[96mProgram3\033[0m", &program_option3}},
            {"4", {"\033[93mProgram4\033[0m", &program_option4}},
            {"5", {"\033[92mProgram5\033[0m", &program_option5}},
            {"6", {"\033[90mProgram6\033[0m", &program_option6}},
            // Add other topics here...
        };
    }

    void display() {
        std::cout << "\033[96m    Main Menu   \033[0m" << std::endl;
        for (const auto& topic : topics) {
            std::cout << topic.first << ". " << topic.second.first << std::endl;
        }
        std::cout << "0. \033[91mExit\033[0m" << std::endl;
    }

    void selectTopic(const std::string& choice) {
        if (topics.find(choice) != topics.end()) {
            topics[choice].second();
        } else {
            std::cout << "Invalid choice!" << std::endl;
        }
    }
};


void sequence(int n, int steps) {
    if (n == 1 || steps >= n) {
        cout << "n              = " << GREEN << n << RESET << endl;
        cout << "Number of steps = " << YELLOW << steps << RESET << endl;
        return;
    }
    cout << "n              = " << GREEN << n << RESET << endl;
    if (n % 2 == 0) {
        cout << "n * 3 + 1      = " << YELLOW << n * 3 + 1 << RESET << endl;
        sequence(n / 2, steps + 1);
    } else {
        cout << "n / 2          = " << YELLOW << n / 2 << RESET << endl;
        sequence(3 * n + 1, steps + 1);
    }
}

void printArray(const vector<int>& arr) {
    for (int num : arr) {
        cout << "\033[1;36m" << setw(4) << num << "\033[0m";
    }
    cout << endl;
}

vector<int>::iterator findMinIndex(vector<int>::iterator start, vector<int>::iterator end) {
    return min_element(start, end);
}

void selectionSortRecursive(vector<int>& arr, vector<int>::iterator start, vector<int>::iterator end) {
    if (start == end) {
        return;
    }
    auto minIndex = findMinIndex(start, end);
    if (minIndex != start) {
        iter_swap(minIndex, start);
    }
    selectionSortRecursive(arr, start + 1, end);
}


// Define generatePassword function
void generatePassword(char* array, int size);
// Define randomizeDoubles function
void randomizeDoubles(double* array, int size);

int main() {
    // Instantiate menu object
    MainMenu menu;
    std::string choice;

    // "do-while loop", guarntees to execution while true
    do {
        menu.display();
        std::cout << "\033[98m\nEnter your choice: \033[0m";
        std::cin >> choice;

        if (choice == "0") {
            break;
        }

        menu.selectTopic(choice);
    } while (true);

    return 0;
}
// Define program_option1 function
void program_option1() {
    try {
        int size;
        cout << "Enter the size of the arrays: ";
        cin >> size;

        ArrayStats<int> intArray(size, 10);
        intArray.randomizeValues();
        cout << "\033[1;32mMax value in intArray: \033[0m" << intArray.findMax() << endl;
        cout << "\033[1;33mMin value in intArray: \033[0m" << intArray.findMin() << endl;

        ArrayStats<double> doubleArray(size, 10.5);
        randomizeDoubles(doubleArray.getArray(), size);
        cout << "\033[1;34mMax value in doubleArray: \033[0m" << doubleArray.findMax() << endl;
        cout << "\033[1;35mMin value in doubleArray: \033[0m" << doubleArray.findMin() << endl;

        ArrayStats<char> charArray(8, ' '); // Password-like string of up to 8 characters
        generatePassword(charArray.getArray(), 8);
        cout << "\033[1;36mPassword-like string in charArray: \033[0m";
        for (int i = 0; i < 8; ++i) {
            cout << charArray.getArray()[i];
        }
        cout << endl;
    } catch (const invalid_argument& e) {
        cerr << "\033[1;38mError: \033[0m" << e.what() << endl;
    }
}
// Define program_option2 function ->
void program_option2() {
    // Implemented program_option2 logic
    int input_value;

    cout << "Enter the starting point: " << GREEN << RESET << endl;
    cin >> input_value;

    sequence(input_value, 0);
}
// Define program_option3 function ->
void program_option3() {
    // Implemented program_option3 logic
    srand(time(nullptr));

    const int SIZE = 20;
    const int MAX_RANDOM_VALUE = 100;
    vector<int> arr(SIZE);
    for (int i = 0; i < SIZE; ++i) {
        arr[i] = rand() % MAX_RANDOM_VALUE;
    }

    cout << "\nUnsorted array:" << endl;
    for (int num : arr) {
        cout << num << " ";
    }
    cout << endl;

    sort(arr.begin(), arr.end());

    cout << "\nSorted array:" << endl;
    for (int num : arr) {
        cout << num << " ";
    }
    cout << endl;
}
// Define program_option3 function ->
void program_option4() {
    // Implement program_option4 logic here
    vector<Student> students;
    int option;

    do {
        cout << "|---------------------------------------|" << endl;
        cout << "|         Student Records Sorter        |" << endl;
        cout << "|---------------------------------------|" << endl;
        cout << "|Option | Description                   |" << endl;
        cout << "|-------|-------------------------------|" << endl;
        cout << "| 1     | Load student records          |" << endl;
        cout << "| 2     | View data                     |" << endl;
        cout << "| 3     | MergeSort data                |" << endl;
        cout << "| 4     | QuickSort data                |" << endl;
        cout << "| 5     | Exit                          |" << endl;
        cout << "|---------------------------------------|" << endl;
        cout << endl;
        cout << "Choose an option: ";
        cin >> option;
        cout << endl;

        switch (option) {
            case 1:
                cout << "Loading Student Data...";
                loadStudentRecords(students);
                break;
            case 2:
                viewData(students);
                break;
            case 3:
                mergeSortData(students);
                viewData(students);
                break;
            case 4:
                quickSortData(students, 0, students.size() - 1);
                viewData(students);
                break;
            case 5:
                cout << "Exiting..." << endl;
                break;
            default:
                cout << "Invalid option. Please try again." << endl;
                break;
        }
        cout << endl;
    } while (option != 5);
}

void program_option5() {
    ifstream inFile;
    inFile.open("Grades.txt");
    ListNode *head= NULL;
    double value;

    for (int x=0; x<10; x++)
    {
        inFile >> value;
        head = new ListNode(value, head);
    }

    ListNode *ptr1;
    double temp;

    for (int x=0; x<10; x++)
    {
        ptr1=head;
        for (int y=0; y<10-1-x; y++)
        {
            if (ptr1->value > ptr1->next->value)
            {
                temp = ptr1->value;
                ptr1->value = ptr1->next->value;
                ptr1->next->value = temp;
            }
            ptr1=ptr1->next;
        }
    }

    ListNode *ptr = head;
    for (int x=0; x<10; x++)
    {
        cout << ptr->value << endl;
        ptr = ptr->next;
    }
}
// Define program_option6 function ->
void program_option6() {
    // Implemented program_option6 logic
        Node* start = new Node("\033[96m🌲 Welcome to the Enchanted Forest! As you step into the forest, you feel a gentle breeze carrying whispers of ancient magic.\033[0m");
    Node* heart_of_forest = new Node("\033[96m🌳 You've reached the heart of the Enchanted Forest. Majestic trees tower above, their branches swaying in harmony with the forest's melody.\033[0m");
    Node* fork_in_path = new Node("\033[96m🌅 At a fork in the path, you sense two distinct energies calling to you – one vibrant and lively, the other tranquil and mysterious.\033[0m");
    Node* meadow = new Node("\033[96m🌼 Entering a sun-kissed meadow, you're greeted by a chorus of singing birds and dancing flowers. Nature's symphony fills your heart with joy.\033[0m");
    Node* hidden_cave = new Node("\033[96m🏞️ Concealed behind a waterfall, you find a hidden cave. The air is thick with magic, and you can't help but feel a sense of wonder.\033[0m");
    Node* crystal_cavern = new Node("\033[96m️⛰️Venturing into the cave, you discover a breathtaking crystal cavern, its walls adorned with precious gems that twinkle like stars.\033[0m");
    Node* glade = new Node("\033[96m🌺 You stumble upon a tranquil glade, bathed in soft sunlight. Colorful flowers bloom all around, emitting a sweet fragrance.\033[0m");
    Node* ancient_ruins = new Node("\033[96m🏰 You come across ancient ruins, remnants of a once-glorious civilization. Whispers of forgotten tales linger in the air.\033[0m");
    Node* mystical_pool = new Node("\033[96m🌊 A mystical pool shimmers in the sunlight, its waters reflecting the secrets of the forest.\033[0m");
    Node* whispering_trees = new Node("\033[96m🌳 The whispering trees beckon you closer, their ancient voices carrying hints of hidden knowledge.\033[0m");
    Node* enchanted_meadow = new Node("\033[96m🍄 Walking into an enchanted meadow, you find yourself surrounded by magical mushrooms of all shapes and sizes.\033[0m");
    Node* shimmering_falls = new Node("\033[96m💧 A cascading waterfall shimmers in the distance, its mesmerizing beauty drawing you closer.\033[0m");
    Node* ethereal_clearing = new Node("\033[96m✨ You step into an ethereal clearing, bathed in the soft glow of faerie lights. Time seems to stand still in this magical place.\033[0m");
    Node* ancient_grove = new Node("\033[96m🌳 You wander into an ancient grove, where ancient spirits linger among the ancient trees.\033[0m");
    Node* forgotten_path = new Node("\033[96m🌿 You stumble upon a forgotten path, overgrown with moss and ivy. It seems to lead to an unknown destination.\033[0m");
    Node* twilight_glade = new Node("\033[96m🌄 You discover a tranquil glade bathed in twilight hues, the sky painted with shades of orange and purple.\033[0m");
    Node* luminous_lake = new Node("\033[96m🌅 A luminous lake stretches before you, its waters reflecting the colors of the setting sun.\033[0m");
    Node* ancient_altar = new Node("\033[96m⛩️ You stumble upon an ancient altar, carved with mysterious symbols. The air around it hums with ancient power.\033[0m");
    Node* hidden_clearing = new Node("\033[96m🍃 A hidden clearing appears before you, surrounded by towering trees. It seems untouched by time.\033[0m");

    crystal_cavern->gem = true;
    hidden_cave->sword = true;
    fork_in_path->chest = true;
    meadow->cave = true;

    start->north = heart_of_forest;
    heart_of_forest->south = start;
    heart_of_forest->north = fork_in_path;
    fork_in_path->south = heart_of_forest;
    fork_in_path->east = meadow;
    fork_in_path->west = hidden_cave;
    meadow->west = fork_in_path;
    hidden_cave->east = fork_in_path;
    hidden_cave->north = crystal_cavern;
    crystal_cavern->south = hidden_cave;

    start->east = ancient_ruins;
    start->west = mystical_pool;
    ancient_ruins->west = start;
    mystical_pool->east = start;

    heart_of_forest->east = whispering_trees;
    heart_of_forest->west = enchanted_meadow;
    whispering_trees->west = heart_of_forest;
    enchanted_meadow->east = heart_of_forest;

    fork_in_path->east = shimmering_falls;
    fork_in_path->west = ethereal_clearing;
    shimmering_falls->west = fork_in_path;
    ethereal_clearing->east = fork_in_path;

    hidden_cave->south = ancient_grove;
    hidden_cave->east = forgotten_path;
    ancient_grove->north = hidden_cave;
    forgotten_path->west = hidden_cave;

    meadow->north = twilight_glade;
    meadow->south = luminous_lake;
    twilight_glade->south = meadow;
    luminous_lake->north = meadow;

    crystal_cavern->east = ancient_altar;
    crystal_cavern->west = hidden_clearing;
    ancient_altar->west = crystal_cavern;
    hidden_clearing->east = crystal_cavern;

    print_with_pause("\033[96mWelcome to the Enchanted Forest!\033[0m");

    string user_name;
    cout << "\033[93mWhat's your name, brave adventurer? \033[0m";
    cin >> user_name;

    print_with_pause("\n\033[1m\033[92mGreetings, " + user_name + "! Prepare to embark on a magical journey!\033[0m");

    bool found_gem = false;
    bool found_sword = false;
    bool found_chest = false;
    bool found_cave = false;

    explore_forest(start, found_gem, found_sword, found_chest, found_cave);

    delete start;
    delete heart_of_forest;
    delete fork_in_path;
    delete meadow;
    delete hidden_cave;
    delete crystal_cavern;
    delete glade;
    delete ancient_ruins;
    delete mystical_pool;
    delete whispering_trees;
    delete enchanted_meadow;
    delete shimmering_falls;
    delete ethereal_clearing;
    delete ancient_grove;
    delete forgotten_path;
    delete twilight_glade;
    delete luminous_lake;
    delete ancient_altar;
    delete hidden_clearing;

    print_with_pause("\n\033[96mThank you for exploring the Enchanted Forest. Come back soon!\033[0m");
}

// Define generatePassword function for program_option1 ->
void generatePassword(char* array, int size) {
    const char charset[] = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
    srand(time(nullptr));
    for (int i = 0; i < size; ++i) {
        array[i] = charset[rand() % (sizeof(charset) - 1)]; // Exclude null terminator
    }
}

// Define randomizeDoubles function (program_option1) 
void randomizeDoubles(double* array, int size) {
    srand(time(nullptr));
    for (int i = 0; i < size; ++i) {
        array[i] = (rand() % 10000) / 100.0; // Random doubles between 0.00 and 99.99
    }
}
===== ./menu(atomic)/ArrayStats.h =====
#ifndef ARRAYSTATS_H
#define ARRAYSTATS_H

#include <iostream>
#include <cstdlib>
#include <ctime>
#include <stdexcept>
using namespace std;

template<typename T>
class ArrayStats {
private:
    T* array;
    int size;

public:
    ArrayStats(int size, T value) : size(size) {
        if (size <= 0) {
            throw invalid_argument("Size must be greater than 0");
        }
        array = new T[size];
        for (int i = 0; i < size; ++i) {
            array[i] = value;
        }
    }
    T findMax() {
        T max = array[0];
        for (int i = 1; i < size; ++i) {
            if (array[i] > max) {
                max = array[i];
            }
        }
        return max;
    }
    T findMin() {
        T min = array[0];
        for (int i = 1; i < size; ++i) {
            if (array[i] < min) {
                min = array[i];
            }
        }
        return min;
    }
    void randomizeValues() {
        srand(time(0));
        for (int i = 0; i < size; ++i) {
            array[i] = static_cast<T>(rand() % 100);
        }
    }
    T* getArray() const {
        return array;
    }
    ~ArrayStats() {
        delete[] array;
    }
};

#endif
===== ./menu(atomic)/Node.cpp =====
//Node.cpp
#include <iostream>
#include <string>
#include <thread>
#include <chrono>
#include <algorithm>
#include "Node.h"
using namespace std;

void print_with_pause(string text, int pause_time = 1500){
    cout << text << endl;
    this_thread::sleep_for(chrono::milliseconds(pause_time));
}

string to_lower(string str) {
    transform(str.begin(), str.end(), str.begin(), ::tolower);
    return str;
}

void explore_forest(Node* current_location, bool& found_gem, bool& found_sword, bool& found_chest, bool& found_cave) {
    print_with_pause(current_location->description);

    if (current_location->gem && !found_gem) {
        found_gem = true;
        print_with_pause("\033[94m💎 You stumbled upon a glittering gem hidden among the ferns!\033[0m");
    }
    if (current_location->sword && !found_sword) {
        found_sword = true;
        print_with_pause("\033[92m🗡️ A gleaming sword, adorned with ancient runes, catches your eye!\033[0m");
    }
    if (current_location->chest && !found_chest) {
        found_chest = true;
        print_with_pause("\033[93m🎉 You discover a mysterious treasure chest half-buried beneath a magical oak tree!\033[0m");
    }
    if (current_location->cave && !found_cave) {
        found_cave = true;
        print_with_pause("\033[95m⛰️️ A hidden underwater cave beckons you with its iridescent glow!\033[0m");
    }

    if (found_gem && found_sword && found_chest && found_cave) {
        print_with_pause("\033[1m\033[91m🌈 Congratulations! You've found all the magical treasures and completed your quest!\033[0m");
        return;
    }

    string direction;
    cout << "\033[93m🔍 Which path will you explore next? (north/south/east/west/exit): \033[0m";
    cin >> direction;

    if (direction == "exit" || direction == "0") {
        return;
    }
    
    direction = to_lower(direction);

    if (direction == "north" && current_location->north != nullptr) {
        explore_forest(current_location->north, found_gem, found_sword, found_chest, found_cave);
    } else if (direction == "south" && current_location->south != nullptr) {
        explore_forest(current_location->south, found_gem, found_sword, found_chest, found_cave);
    } else if (direction == "east" && current_location->east != nullptr) {
        explore_forest(current_location->east, found_gem, found_sword, found_chest, found_cave);
    } else if (direction == "west" && current_location->west != nullptr) {
        explore_forest(current_location->west, found_gem, found_sword, found_chest, found_cave);
    } else {
        print_with_pause("\033[91m🪄 You encountered a magical barrier, preventing further exploration in that direction. Perhaps there's another path to discover...\033[0m");
        explore_forest(current_location, found_gem, found_sword, found_chest, found_cave);
    }
    
}

===== ./menu(atomic)/InsertionSort.cpp =====
#include "InsertionSort.h"

void InsertionSort::sort(std::vector<int>& arr) {
    recursiveInsertionSort(arr, arr.size() - 1);
}

void InsertionSort::recursiveInsertionSort(std::vector<int>& arr, int n) {
    if (n <= 1)
        return;

    recursiveInsertionSort(arr, n - 1);

    int key = arr[n];
    int j = n - 1;

    while (j >= 0 && arr[j] > key) {
        arr[j + 1] = arr[j];
        j--;
    }
    arr[j + 1] = key;
}
===== ./menu(atomic)/records_sorter.cpp =====
#include "records_sorter.h"
#include <iostream>
#include <fstream>
#include <algorithm>
#include <sstream>
using namespace std;

bool compareByGPA(const Student& s1, const Student& s2) {
    return s1.gpa < s2.gpa;
}

void loadStudentRecords(vector<Student>& students) {
    ifstream inputFile("students.txt");
    if (inputFile.is_open()) {
        string line;
        while (getline(inputFile, line)) {
            istringstream iss(line);
            string lastName, firstName;
            double gpa;
            if (getline(iss, lastName, ',') &&
                getline(iss, firstName, ',') &&
                iss >> gpa) {
                Student student;
                student.name = lastName + " " + firstName;
                student.gpa = gpa;
                students.push_back(student);
            } else {
                cout << "Error reading data for student: " << line << endl;
            }
        }
        inputFile.close();
    } else {
        cout << "Failed to open students.txt" << endl;
    }
}

void viewData(const vector<Student>& students) {
    cout << students.size() << endl;
    for (const auto& student : students) {
        cout << student.name << " " << student.gpa << endl;
    }
}

void merge(vector<Student>& students, int left, int mid, int right) {
    int n1 = mid - left + 1;
    int n2 = right - mid;

    vector<Student> L(n1), R(n2);

    for (int i = 0; i < n1; i++)
        L[i] = students[left + i];
    for (int j = 0; j < n2; j++)
        R[j] = students[mid + 1 + j];
        
    int i = 0, j = 0, k = left;
    while (i < n1 && j < n2) {
        if (L[i].gpa <= R[j].gpa) {
            students[k] = L[i];
            i++;
        } else {
            students[k] = R[j];
            j++;
        }
        k++;
    }
    while (i < n1) {
        students[k] = L[i];
        i++;
        k++;
    }
    while (j < n2) {
        students[k] = R[j];
        j++;
        k++;
    }
}

void mergeSort(vector<Student>& students, int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;

        mergeSort(students, left, mid);
        mergeSort(students, mid + 1, right);

        merge(students, left, mid, right);
    }
}

void mergeSortData(vector<Student>& students) {
    mergeSort(students, 0, students.size() - 1);
}

int partitionQuick(vector<Student>& students, int low, int high) {
    double pivot = students[high].gpa;
    int i = (low - 1);

    for (int j = low; j <= high - 1; j++) {
        if (students[j].gpa < pivot) {
            i++;
            swap(students[i], students[j]);
        }
    }
    swap(students[i + 1], students[high]);
    return (i + 1);
}

void quickSortData(vector<Student>& students, int low, int high) {
    if (low < high) {
        int pi = partitionQuick(students, low, high);

        quickSortData(students, low, pi - 1);
        quickSortData(students, pi + 1, high);
    }
}
===== ./menu(atomic)/records_sorter.h =====
#ifndef RECORDS_SORTER_H
#define RECORDS_SORTER_H

#include <vector>
#include <string>
using namespace std;

struct Student {
    std::string name;
    double gpa;
};

bool compareByGPA(const Student& s1, const Student& s2);

void loadStudentRecords(std::vector<Student>& students);

void viewData(const std::vector<Student>& students);

void mergeSortData(std::vector<Student>& students);

void quickSortData(std::vector<Student>& students, int low, int high);

#endif /* RECORDS_SORTER_H */
===== ./menu(atomic)/.vscode/tasks.json =====
{
	"version": "2.0.0",
	"tasks": [
		{
			"type": "cppbuild",
			"label": "C/C++: g++.exe build active file",
			"command": "C:\\msys64\\ucrt64\\bin\\g++.exe",
			"args": [
				"-fdiagnostics-color=always",
				"-g",
				"${file}",
				"-o",
				"${fileDirname}\\${fileBasenameNoExtension}.exe"
			],
			"options": {
				"cwd": "${fileDirname}"
			},
			"problemMatcher": [
				"$gcc"
			],
			"group": "build",
			"detail": "compiler: C:\\msys64\\ucrt64\\bin\\g++.exe"
		}
	]
}===== ./tsconfig.json =====
{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig to read more about this file */

    /* Projects */

    /* Language and Environment */
    "target": "es2022",                                  /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
    // "lib": [],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */
    // "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
    "useDefineForClassFields": true,                     /* Emit ECMAScript-standard-compliant class fields. */
    // "moduleDetection": "auto",                        /* Control what method is used to detect module-format JS files. */

    /* Modules */
    "module": "commonjs",                                /* Specify what module code is generated. */
    // "rootDir": "./",                                  /* Specify the root folder within your source files. */
    // "moduleResolution": "node10",                     /* Specify how TypeScript looks up a file from a given module specifier. */
    // "baseUrl": "./",                                  /* Specify the base directory to resolve non-relative module names. */
    // "paths": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */
    // "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
    "typeRoots": ["types"],                              /* Specify multiple folders that act like './node_modules/@types'. */
    "resolveJsonModule": true,                           /* Enable importing .json files. */

    /* JavaScript Support */
    "allowJs": true,                                    /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */
    "checkJs": true,                                    /* Enable error reporting in type-checked JavaScript files. */
    "maxNodeModuleJsDepth": 1,                          /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */

    /* Emit */
    "declaration": true,                                 /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
    "declarationMap": true,                              /* Create sourcemaps for d.ts files. */
    // "emitDeclarationOnly": true,                      /* Only output d.ts files and not JavaScript files. */
    "noEmit": true,                                      /* Disable emitting files from a compilation. */

    /* Interop Constraints */
    "allowSyntheticDefaultImports": true,                /* Allow 'import x from y' when a module doesn't have a default export. */
    "esModuleInterop": true,                             /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */
    "forceConsistentCasingInFileNames": true,            /* Ensure that casing is correct in imports. */

    /* Type Checking */
    "strict": true,                                      /* Enable all strict type-checking options. */
    "noImplicitAny": true,                               /* Enable error reporting for expressions and declarations with an implied 'any' type. */
    "noImplicitThis": true,                              /* Enable error reporting when 'this' is given the type 'any'. */
    "useUnknownInCatchVariables": true,                  /* Default catch clause variables as 'unknown' instead of 'any'. */
    "noUnusedLocals": true,                              /* Enable error reporting when local variables aren't read. */
    "noUnusedParameters": true,                          /* Raise an error when a function parameter isn't read. */
    "noImplicitReturns": true,                           /* Enable error reporting for codepaths that do not explicitly return in a function. */
    "noFallthroughCasesInSwitch": true,                  /* Enable error reporting for fallthrough cases in switch statements. */
    "noUncheckedIndexedAccess": true,                    /* Add 'undefined' to a type when accessed using an index. */
    "noImplicitOverride": true,                          /* Ensure overriding members in derived classes are marked with an override modifier. */
    // "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type. */

    /* Completeness */
    // "skipLibCheck": true                                 /* Skip type checking all .d.ts files. */
  },
  "exclude": [
    "coverage"
  ]
}
===== ./ListNode.h =====
//ListNode.h
#ifndef LISTNODE_H
#define LISTNODE_H

#include <cstddef>

struct ListNode
{
    double value;
    ListNode *next;

    ListNode(double value1, ListNode *next1 = NULL);
};

#endif===== ./hr_Managment.cpp =====
#include <iostream>
#include <fstream>
#include <vector>
#include <string>

using namespace std;

struct Employee {
    string username;
    string password;
};

struct Task {
    string description;
    bool isComplete;
};

class HRProgram {
private:
    vector<Employee> employees;
    Employee currentUser;

    void loadEmployeesFromFile() {
        ifstream file("users.txt");
        if (file.is_open()) {
            string username, password;
            while (file >> username >> password) {
                Employee employee;
                employee.username = username;
                employee.password = password;
                employees.push_back(employee);
            }
            file.close();
        }
    }

    void loadTasksFromFile(const string& filename, vector<Task>& tasks) {
        ifstream file(filename);
        if (file.is_open()) {
            string description;
            bool isComplete;
            while (file >> description >> isComplete) {
                Task task;
                task.description = description;
                task.isComplete = isComplete;
                tasks.push_back(task);
            }
            file.close();
        }
    }

    void saveTasksToFile(const string& filename, const vector<Task>& tasks) {
        ofstream file(filename);
        if (file.is_open()) {
            for (const Task& task : tasks) {
                file << task.description << " " << task.isComplete << endl;
            }
            file.close();
        }
    }

public:
    HRProgram() {
        loadEmployeesFromFile();
    }

    void run() {
        bool HRProgram = false;
        login();
        while (true) {
            if (isAdmin()) {
                displayAdminMenu();
            } else {
                displayEmployeeMenu();
            }
        }
    }

private:
    void login() {
        string username, password;
        cout << "Enter username: ";
        cin >> username;
        cout << "Enter password: ";
        cin >> password;

        for (const Employee& employee : employees) {
            if (employee.username == username && employee.password == password) {
                currentUser = employee;
                return;
            }
        }

        cout << "Invalid username or password. Please try again." << endl;
        login();
    }

    bool isAdmin() {
        return currentUser.username == "admin";
    }

    void displayAdminMenu() {
        cout << "Welcome, Admin!" << endl;
        cout << "1. Add Employee" << endl;
        cout << "2. View Employee Analytics" << endl;
        cout << "3. Display Tasks" << endl;
        cout << "4. Mark Task Complete" << endl;
        cout << "5. Change Password" << endl;
        cout << "6. Logout" << endl;

        int choice;
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                addEmployee();
                break;
            case 2:
                viewEmployeeAnalytics();
                break;
            case 3:
                displayTasks("admin_tasks.txt");
                break;
            case 4:
                markTaskComplete("admin_tasks.txt");
                break;
            case 5:
                changePassword();
                break;
            case 6:
               // logout(!choice);
                logout();
              //  HRProgram = true;
                break;
//                return; // Exit the run() function
            default:
                cout << "Invalid choice. Please try again." << endl;
        }
    }

    void displayEmployeeMenu() {
        cout << "Welcome, " << currentUser.username << "!" << endl;
        cout << "1. Display Tasks" << endl;
        cout << "2. Mark Task Complete" << endl;
        cout << "3. Logout" << endl;

        int choice;
        cout << "Enter your choice: ";
                cin >> choice;

        switch (choice) {
            case 1:
                displayTasks(currentUser.username + "_tasks.txt");
                break;
            case 2:
                markTaskComplete(currentUser.username + "_tasks.txt");
                break;
            case 3:
                logout();
               // HRProgram = true;
                break;
    //            return 0; // Exit the run() function
            default:
                cout << "Invalid choice. Please try again." << endl;
        }
    }

    void addEmployee() {
        string username, password;
        cout << "Enter username: ";
        cin >> username;
        cout << "Enter password: ";
        cin >> password;

        Employee employee;
        employee.username = username;
        employee.password = password;
        employees.push_back(employee);

        saveEmployeesToFile();
        cout << "Employee added successfully." << endl;
    }

    void viewEmployeeAnalytics() {
        // Implement the logic to display employee analytics
        // This is specific to your use case and requirements
        // You can gather data from employees vector and perform necessary computations
    }

    void displayTasks(const string& filename) {
        vector<Task> tasks;
        loadTasksFromFile(filename, tasks);

        cout << "Tasks:" << endl;
        for (size_t i = 0; i < tasks.size(); ++i) {
            cout << i + 1 << ". " << tasks[i].description;
            if (tasks[i].isComplete) {
                cout << " [Complete]";
            }
            cout << endl;
        }
    }

    void markTaskComplete(const string& filename) {
        vector<Task> tasks;
        loadTasksFromFile(filename, tasks);

        cout << "Enter the index of the task to mark as complete: ";
        int index;
        cin >> index;

        if (index > 0 && index <= tasks.size()) {
            tasks[index - 1].isComplete = true;
            saveTasksToFile(filename, tasks);
            cout << "Task marked as complete." << endl;
        } else {
            cout << "Invalid task index." << endl;
        }
    }

    void logout() {
        currentUser.username = "";
        currentUser.password = "";
        cout << "Logged out successfully." << endl;
     //   break;
    }

    void changePassword() {
        string newPassword;
        cout << "Enter the new password: ";
        cin >> newPassword;

        currentUser.password = newPassword;
        saveEmployeesToFile();
        cout << "Password changed successfully." << endl;
    }

    void saveEmployeesToFile() {
        ofstream file("users.txt");
        if (file.is_open()) {
            for (const Employee& employee : employees) {
                file << employee.username << " " << employee.password << endl;
            }
            file.close();
        } else {
            cout << "Error: Unable to save employee data." << endl;
        }
    }
};

int main() {
    HRProgram program;
    program.run();

    return 0;
}===== ./package-lock.json =====
{
  "name": "project",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "dependencies": {
        "express": "^4.19.2",
        "socket.io": "^4.7.5"
      }
    },
    "node_modules/@socket.io/component-emitter": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/@socket.io/component-emitter/-/component-emitter-3.1.2.tgz",
      "integrity": "sha512-9BCxFwvbGg/RsZK9tjXd8s4UcwR0MWeFQ1XEKIQVVvAGJyINdrqKMcTRyLoK8Rse1GjzLV9cwjWV1olXRWEXVA==",
      "license": "MIT"
    },
    "node_modules/@types/cookie": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/@types/cookie/-/cookie-0.4.1.tgz",
      "integrity": "sha512-XW/Aa8APYr6jSVVA1y/DEIZX0/GMKLEVekNG727R8cs56ahETkRAy/3DR7+fJyh7oUgGwNQaRfXCun0+KbWY7Q==",
      "license": "MIT"
    },
    "node_modules/@types/cors": {
      "version": "2.8.17",
      "resolved": "https://registry.npmjs.org/@types/cors/-/cors-2.8.17.tgz",
      "integrity": "sha512-8CGDvrBj1zgo2qE+oS3pOCyYNqCPryMWY2bGfwA0dcfopWGgxs+78df0Rs3rc9THP4JkOhLsAa+15VdpAqkcUA==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/node": {
      "version": "22.1.0",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-22.1.0.tgz",
      "integrity": "sha512-AOmuRF0R2/5j1knA3c6G3HOk523Ga+l+ZXltX8SF1+5oqcXijjfTd8fY3XRZqSihEu9XhtQnKYLmkFaoxgsJHw==",
      "license": "MIT",
      "dependencies": {
        "undici-types": "~6.13.0"
      }
    },
    "node_modules/accepts": {
      "version": "1.3.8",
      "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz",
      "integrity": "sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==",
      "license": "MIT",
      "dependencies": {
        "mime-types": "~2.1.34",
        "negotiator": "0.6.3"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/array-flatten": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
      "integrity": "sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg==",
      "license": "MIT"
    },
    "node_modules/base64id": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/base64id/-/base64id-2.0.0.tgz",
      "integrity": "sha512-lGe34o6EHj9y3Kts9R4ZYs/Gr+6N7MCaMlIFA3F1R2O5/m7K06AxfSeO5530PEERE6/WyEg3lsuyw4GHlPZHog==",
      "license": "MIT",
      "engines": {
        "node": "^4.5.0 || >= 5.9"
      }
    },
    "node_modules/body-parser": {
      "version": "1.20.2",
      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.20.2.tgz",
      "integrity": "sha512-ml9pReCu3M61kGlqoTm2umSXTlRTuGTx0bfYj+uIUKKYycG5NtSbeetV3faSU6R7ajOPw0g/J1PvK4qNy7s5bA==",
      "license": "MIT",
      "dependencies": {
        "bytes": "3.1.2",
        "content-type": "~1.0.5",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "on-finished": "2.4.1",
        "qs": "6.11.0",
        "raw-body": "2.5.2",
        "type-is": "~1.6.18",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/bytes": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
      "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/call-bind": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/call-bind/-/call-bind-1.0.7.tgz",
      "integrity": "sha512-GHTSNSYICQ7scH7sZ+M2rFopRoLh8t2bLSW6BbgrtLsahOIB5iyAVJf9GjWK3cYTDaMj4XdBpM1cA6pIS0Kv2w==",
      "license": "MIT",
      "dependencies": {
        "es-define-property": "^1.0.0",
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2",
        "get-intrinsic": "^1.2.4",
        "set-function-length": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/content-disposition": {
      "version": "0.5.4",
      "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz",
      "integrity": "sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "5.2.1"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/content-type": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.5.tgz",
      "integrity": "sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.6.0.tgz",
      "integrity": "sha512-U71cyTamuh1CRNCfpGY6to28lxvNwPG4Guz/EVjgf3Jmzv0vlDp1atT9eS5dDjMYHucpHbWns6Lwf3BKz6svdw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie-signature": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
      "integrity": "sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ==",
      "license": "MIT"
    },
    "node_modules/cors": {
      "version": "2.8.5",
      "resolved": "https://registry.npmjs.org/cors/-/cors-2.8.5.tgz",
      "integrity": "sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==",
      "license": "MIT",
      "dependencies": {
        "object-assign": "^4",
        "vary": "^1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/define-data-property": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/define-data-property/-/define-data-property-1.1.4.tgz",
      "integrity": "sha512-rBMvIzlpA8v6E+SJZoo++HAYqsLrkg7MSfIinMPFhmkorw7X+dOXVJQs+QT69zGkzMyfDnIMN2Wid1+NbL3T+A==",
      "license": "MIT",
      "dependencies": {
        "es-define-property": "^1.0.0",
        "es-errors": "^1.3.0",
        "gopd": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/destroy": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz",
      "integrity": "sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/ee-first": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
      "integrity": "sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow==",
      "license": "MIT"
    },
    "node_modules/encodeurl": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
      "integrity": "sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/engine.io": {
      "version": "6.5.5",
      "resolved": "https://registry.npmjs.org/engine.io/-/engine.io-6.5.5.tgz",
      "integrity": "sha512-C5Pn8Wk+1vKBoHghJODM63yk8MvrO9EWZUfkAt5HAqIgPE4/8FF0PEGHXtEd40l223+cE5ABWuPzm38PHFXfMA==",
      "license": "MIT",
      "dependencies": {
        "@types/cookie": "^0.4.1",
        "@types/cors": "^2.8.12",
        "@types/node": ">=10.0.0",
        "accepts": "~1.3.4",
        "base64id": "2.0.0",
        "cookie": "~0.4.1",
        "cors": "~2.8.5",
        "debug": "~4.3.1",
        "engine.io-parser": "~5.2.1",
        "ws": "~8.17.1"
      },
      "engines": {
        "node": ">=10.2.0"
      }
    },
    "node_modules/engine.io-parser": {
      "version": "5.2.3",
      "resolved": "https://registry.npmjs.org/engine.io-parser/-/engine.io-parser-5.2.3.tgz",
      "integrity": "sha512-HqD3yTBfnBxIrbnM1DoD6Pcq8NECnh8d4As1Qgh0z5Gg3jRRIqijury0CL3ghu/edArpUYiYqQiDUQBIs4np3Q==",
      "license": "MIT",
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/engine.io/node_modules/cookie": {
      "version": "0.4.2",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.4.2.tgz",
      "integrity": "sha512-aSWTXFzaKWkvHO1Ny/s+ePFpvKsPnjc551iI41v3ny/ow6tBG5Vd+FuqGNhh1LxOmVzOlGUriIlOaokOvhaStA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/engine.io/node_modules/debug": {
      "version": "4.3.6",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.6.tgz",
      "integrity": "sha512-O/09Bd4Z1fBrU4VzkhFqVgpPzaGbw6Sm9FEkBT1A/YBXQFGuuSxa1dN2nxgxS34JmKXqYx8CZAwEVoJFImUXIg==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/engine.io/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
      "license": "MIT"
    },
    "node_modules/es-define-property": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.0.tgz",
      "integrity": "sha512-jxayLKShrEqqzJ0eumQbVhTYQM27CfT1T35+gCgDFoL82JLsXqTJ76zv6A0YLOgEnLUMvLzsDsGIrl8NFpT2gQ==",
      "license": "MIT",
      "dependencies": {
        "get-intrinsic": "^1.2.4"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-errors": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/escape-html": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
      "integrity": "sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow==",
      "license": "MIT"
    },
    "node_modules/etag": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
      "integrity": "sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/express": {
      "version": "4.19.2",
      "resolved": "https://registry.npmjs.org/express/-/express-4.19.2.tgz",
      "integrity": "sha512-5T6nhjsT+EOMzuck8JjBHARTHfMht0POzlA60WV2pMD3gyXw2LZnZ+ueGdNxG+0calOJcWKbpFcuzLZ91YWq9Q==",
      "license": "MIT",
      "dependencies": {
        "accepts": "~1.3.8",
        "array-flatten": "1.1.1",
        "body-parser": "1.20.2",
        "content-disposition": "0.5.4",
        "content-type": "~1.0.4",
        "cookie": "0.6.0",
        "cookie-signature": "1.0.6",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "finalhandler": "1.2.0",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "merge-descriptors": "1.0.1",
        "methods": "~1.1.2",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "path-to-regexp": "0.1.7",
        "proxy-addr": "~2.0.7",
        "qs": "6.11.0",
        "range-parser": "~1.2.1",
        "safe-buffer": "5.2.1",
        "send": "0.18.0",
        "serve-static": "1.15.0",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "type-is": "~1.6.18",
        "utils-merge": "1.0.1",
        "vary": "~1.1.2"
      },
      "engines": {
        "node": ">= 0.10.0"
      }
    },
    "node_modules/finalhandler": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.2.0.tgz",
      "integrity": "sha512-5uXcUVftlQMFnWC9qu/svkWv3GTd2PfUhK/3PLkYNAe7FbqJMt3515HaxE6eRL74GdsriiwujiawdaB1BpEISg==",
      "license": "MIT",
      "dependencies": {
        "debug": "2.6.9",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "statuses": "2.0.1",
        "unpipe": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/forwarded": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz",
      "integrity": "sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fresh": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
      "integrity": "sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/function-bind": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-intrinsic": {
      "version": "1.2.4",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.2.4.tgz",
      "integrity": "sha512-5uYhsJH8VJBTv7oslg4BznJYhDoRI6waYCxMmCdnTrcCrHA/fCFKoTFz2JKKE0HdDFUF7/oQuhzumXJK7paBRQ==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2",
        "has-proto": "^1.0.1",
        "has-symbols": "^1.0.3",
        "hasown": "^2.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/gopd": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.0.1.tgz",
      "integrity": "sha512-d65bNlIadxvpb/A2abVdlqKqV563juRnZ1Wtk6s1sIR8uNsXR70xqIzVqxVf1eTqDunwT2MkczEeaezCKTZhwA==",
      "license": "MIT",
      "dependencies": {
        "get-intrinsic": "^1.1.3"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-property-descriptors": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-property-descriptors/-/has-property-descriptors-1.0.2.tgz",
      "integrity": "sha512-55JNKuIW+vq4Ke1BjOTjM2YctQIvCT7GFzHwmfZPGo5wnrgkid0YQtnAleFSqumZm4az3n2BS+erby5ipJdgrg==",
      "license": "MIT",
      "dependencies": {
        "es-define-property": "^1.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-proto": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/has-proto/-/has-proto-1.0.3.tgz",
      "integrity": "sha512-SJ1amZAJUiZS+PhsVLf5tGydlaVB8EdFpaSO4gmiUKUOxk8qzn5AIy4ZeJUmh22znIdk/uMAUT2pl3FxzVUH+Q==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-symbols": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.0.3.tgz",
      "integrity": "sha512-l3LCuF6MgDNwTDKkdYGEihYjt5pRPbEg46rtlmnSPlUbgmB8LOIrKJbYYFBSbnPaJexMKtiPO8hmeRjRz2Td+A==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/hasown": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
      "license": "MIT",
      "dependencies": {
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/http-errors": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
      "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
      "license": "MIT",
      "dependencies": {
        "depd": "2.0.0",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "toidentifier": "1.0.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/iconv-lite": {
      "version": "0.4.24",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
      "license": "MIT",
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
      "license": "ISC"
    },
    "node_modules/ipaddr.js": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
      "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/media-typer": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
      "integrity": "sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/merge-descriptors": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.1.tgz",
      "integrity": "sha512-cCi6g3/Zr1iqQi6ySbseM1Xvooa98N0w31jzUYrXPX2xqObmFGHJ0tQ5u74H3mVh7wLouTseZyYIq39g8cNp1w==",
      "license": "MIT"
    },
    "node_modules/methods": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
      "integrity": "sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-1.6.0.tgz",
      "integrity": "sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==",
      "license": "MIT",
      "bin": {
        "mime": "cli.js"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "license": "MIT",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/negotiator": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz",
      "integrity": "sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-inspect": {
      "version": "1.13.2",
      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.2.tgz",
      "integrity": "sha512-IRZSRuzJiynemAXPYtPe5BoI/RESNYR7TYm50MC5Mqbd3Jmw5y790sErYw3V6SryFJD64b74qQQs9wn5Bg/k3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/on-finished": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
      "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
      "license": "MIT",
      "dependencies": {
        "ee-first": "1.1.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/parseurl": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
      "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/path-to-regexp": {
      "version": "0.1.7",
      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.7.tgz",
      "integrity": "sha512-5DFkuoqlv1uYQKxy8omFBeJPQcdoE07Kv2sferDCrAq1ohOU+MSDswDIbnx3YAM60qIOnYa53wBhXW0EbMonrQ==",
      "license": "MIT"
    },
    "node_modules/proxy-addr": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz",
      "integrity": "sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==",
      "license": "MIT",
      "dependencies": {
        "forwarded": "0.2.0",
        "ipaddr.js": "1.9.1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/qs": {
      "version": "6.11.0",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.11.0.tgz",
      "integrity": "sha512-MvjoMCJwEarSbUYk5O+nmoSzSutSsTwF85zcHPQ9OrlFoZOYIjaqBAJIqIXjptyD5vThxGq52Xu/MaJzRkIk4Q==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "side-channel": "^1.0.4"
      },
      "engines": {
        "node": ">=0.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/range-parser": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
      "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/raw-body": {
      "version": "2.5.2",
      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.5.2.tgz",
      "integrity": "sha512-8zGqypfENjCIqGhgXToC8aB2r7YrBX+AQAfIPs/Mlk+BtPTztOvTS01NRW/3Eh60J+a48lt8qsCzirQ6loCVfA==",
      "license": "MIT",
      "dependencies": {
        "bytes": "3.1.2",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/safer-buffer": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==",
      "license": "MIT"
    },
    "node_modules/send": {
      "version": "0.18.0",
      "resolved": "https://registry.npmjs.org/send/-/send-0.18.0.tgz",
      "integrity": "sha512-qqWzuOjSFOuqPjFe4NOsMLafToQQwBSOEpS+FwEt3A2V3vKubTquT3vmLTQpFgMXp8AlFWFuP1qKaJZOtPpVXg==",
      "license": "MIT",
      "dependencies": {
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "mime": "1.6.0",
        "ms": "2.1.3",
        "on-finished": "2.4.1",
        "range-parser": "~1.2.1",
        "statuses": "2.0.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/send/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/serve-static": {
      "version": "1.15.0",
      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.15.0.tgz",
      "integrity": "sha512-XGuRDNjXUijsUL0vl6nSD7cwURuzEgglbOaFuZM9g3kwDXOWVTck0jLzjPzGD+TazWbboZYu52/9/XPdUgne9g==",
      "license": "MIT",
      "dependencies": {
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "parseurl": "~1.3.3",
        "send": "0.18.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/set-function-length": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/set-function-length/-/set-function-length-1.2.2.tgz",
      "integrity": "sha512-pgRc4hJ4/sNjWCSS9AmnS40x3bNMDTknHgL5UaMBTMyJnU90EgWh1Rz+MC9eFu4BuN/UwZjKQuY/1v3rM7HMfg==",
      "license": "MIT",
      "dependencies": {
        "define-data-property": "^1.1.4",
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2",
        "get-intrinsic": "^1.2.4",
        "gopd": "^1.0.1",
        "has-property-descriptors": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==",
      "license": "ISC"
    },
    "node_modules/side-channel": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.0.6.tgz",
      "integrity": "sha512-fDW/EZ6Q9RiO8eFG8Hj+7u/oW+XrPTIChwCOM2+th2A6OblDtYYIpve9m+KvI9Z4C9qSEXlaGR6bTEYHReuglA==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.4",
        "object-inspect": "^1.13.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/socket.io": {
      "version": "4.7.5",
      "resolved": "https://registry.npmjs.org/socket.io/-/socket.io-4.7.5.tgz",
      "integrity": "sha512-DmeAkF6cwM9jSfmp6Dr/5/mfMwb5Z5qRrSXLpo3Fq5SqyU8CMF15jIN4ZhfSwu35ksM1qmHZDQ/DK5XTccSTvA==",
      "license": "MIT",
      "dependencies": {
        "accepts": "~1.3.4",
        "base64id": "~2.0.0",
        "cors": "~2.8.5",
        "debug": "~4.3.2",
        "engine.io": "~6.5.2",
        "socket.io-adapter": "~2.5.2",
        "socket.io-parser": "~4.2.4"
      },
      "engines": {
        "node": ">=10.2.0"
      }
    },
    "node_modules/socket.io-adapter": {
      "version": "2.5.5",
      "resolved": "https://registry.npmjs.org/socket.io-adapter/-/socket.io-adapter-2.5.5.tgz",
      "integrity": "sha512-eLDQas5dzPgOWCk9GuuJC2lBqItuhKI4uxGgo9aIV7MYbk2h9Q6uULEh8WBzThoI7l+qU9Ast9fVUmkqPP9wYg==",
      "license": "MIT",
      "dependencies": {
        "debug": "~4.3.4",
        "ws": "~8.17.1"
      }
    },
    "node_modules/socket.io-adapter/node_modules/debug": {
      "version": "4.3.6",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.6.tgz",
      "integrity": "sha512-O/09Bd4Z1fBrU4VzkhFqVgpPzaGbw6Sm9FEkBT1A/YBXQFGuuSxa1dN2nxgxS34JmKXqYx8CZAwEVoJFImUXIg==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/socket.io-adapter/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
      "license": "MIT"
    },
    "node_modules/socket.io-parser": {
      "version": "4.2.4",
      "resolved": "https://registry.npmjs.org/socket.io-parser/-/socket.io-parser-4.2.4.tgz",
      "integrity": "sha512-/GbIKmo8ioc+NIWIhwdecY0ge+qVBSMdgxGygevmdHj24bsfgtCmcUUcQ5ZzcylGFHsN3k4HB4Cgkl96KVnuew==",
      "license": "MIT",
      "dependencies": {
        "@socket.io/component-emitter": "~3.1.0",
        "debug": "~4.3.1"
      },
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/socket.io-parser/node_modules/debug": {
      "version": "4.3.6",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.6.tgz",
      "integrity": "sha512-O/09Bd4Z1fBrU4VzkhFqVgpPzaGbw6Sm9FEkBT1A/YBXQFGuuSxa1dN2nxgxS34JmKXqYx8CZAwEVoJFImUXIg==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/socket.io-parser/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
      "license": "MIT"
    },
    "node_modules/socket.io/node_modules/debug": {
      "version": "4.3.6",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.6.tgz",
      "integrity": "sha512-O/09Bd4Z1fBrU4VzkhFqVgpPzaGbw6Sm9FEkBT1A/YBXQFGuuSxa1dN2nxgxS34JmKXqYx8CZAwEVoJFImUXIg==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/socket.io/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
      "license": "MIT"
    },
    "node_modules/statuses": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
      "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/type-is": {
      "version": "1.6.18",
      "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz",
      "integrity": "sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==",
      "license": "MIT",
      "dependencies": {
        "media-typer": "0.3.0",
        "mime-types": "~2.1.24"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/undici-types": {
      "version": "6.13.0",
      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-6.13.0.tgz",
      "integrity": "sha512-xtFJHudx8S2DSoujjMd1WeWvn7KKWFRESZTMeL1RptAYERu29D6jphMjjY+vn96jvN3kVPDNxU/E13VTaXj6jg==",
      "license": "MIT"
    },
    "node_modules/unpipe": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
      "integrity": "sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/utils-merge": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
      "integrity": "sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/vary": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
      "integrity": "sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/ws": {
      "version": "8.17.1",
      "resolved": "https://registry.npmjs.org/ws/-/ws-8.17.1.tgz",
      "integrity": "sha512-6XQFvXTkbfUOZOKKILFG1PDK2NDQs4azKQl26T0YS5CxqWLgXajbPZ+h4gZekJyRqFU8pvnbAbbs/3TgRPy+GQ==",
      "license": "MIT",
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "bufferutil": "^4.0.1",
        "utf-8-validate": ">=5.0.2"
      },
      "peerDependenciesMeta": {
        "bufferutil": {
          "optional": true
        },
        "utf-8-validate": {
          "optional": true
        }
      }
    }
  }
}
===== ./Tortoise.h =====
// Tortoise.h
#pragma once
#include <string>
#include <cstdlib>
#include <ctime>

class Tortoise {
public:
    Tortoise() : square(1) {}
    void move();
    bool victor() const;
    void win() const;
    int square;
};

inline void Tortoise::move() {
    int x = 1 + rand() % 10;
    if (x >= 1 && x <= 5) {
        square += 3;
    }
    else if (x >= 6 && x <= 7) {
        square -= 6;
    }
    else {
        ++square;
    }
    if (square < 1) {
        square = 1;
    }
}

inline bool Tortoise::victor() const {
    return square >= 70;
}

inline void Tortoise::win() const {
    std::cout << "TORTOISE WINS!!! YAY!!!" << std::endl;
}

===== ./readwrite dataprogram.txt =====
#include <stdio.h>
#include <stdlib.h>

/* Structure definition */
struct clientData {
    int acctNum;
    char lastName[15];
    char firstName[10];
    double balance;
};

/* Function prototypes */
int enterChoice(void);
void textFile(FILE *readPtr);
void updateRecord(FILE *fPtr);
void newRecord(FILE *fPtr);
void deleteRecord(FILE *fPtr);

/* ==============================
   Main Function
   ============================== */
int main(void)
{
    FILE *cfPtr;
    int choice;

    /* Try to open file for read/write, create if missing */
    if ((cfPtr = fopen("credit.dat", "rb+")) == NULL) {
        if ((cfPtr = fopen("credit.dat", "wb+")) == NULL) {
            printf("File could not be opened.\n");
            return 1;
        }
    }

    /* Menu loop */
    while ((choice = enterChoice()) != 5) {
        switch (choice) {
        case 1:
            textFile(cfPtr);
            break;
        case 2:
            updateRecord(cfPtr);
            break;
        case 3:
            newRecord(cfPtr);
            break;
        case 4:
            deleteRecord(cfPtr);
            break;
        default:
            printf("Incorrect choice\n");
            break;
        }
    }

    fclose(cfPtr);
    return 0;
}

/* ==============================
   Display Menu
   ============================== */
int enterChoice(void)
{
    int menuChoice;
    printf("\nEnter your choice\n"
           "1 - store a formatted text file of accounts called\n"
           "    \"accounts.txt\" for printing\n"
           "2 - update an account\n"
           "3 - add a new account\n"
           "4 - delete an account\n"
           "5 - end program\n? ");
    scanf("%d", &menuChoice);
    return menuChoice;
}

/* ==============================
   Create Formatted Text File
   ============================== */
void textFile(FILE *readPtr)
{
    FILE *writePtr;
    struct clientData client = {0, "", "", 0.0};

    if ((writePtr = fopen("accounts.txt", "w")) == NULL) {
        printf("File could not be opened.\n");
        return;
    }

    rewind(readPtr);
    fprintf(writePtr, "%-6s%-16s%-11s%10s\n",
            "Acct", "Last Name", "First Name", "Balance");

    while (fread(&client, sizeof(struct clientData), 1, readPtr) == 1) {
        if (client.acctNum != 0) {
            fprintf(writePtr, "%-6d%-16s%-11s%10.2f\n",
                    client.acctNum, client.lastName,
                    client.firstName, client.balance);
        }
    }

    fclose(writePtr);
    printf("accounts.txt created successfully.\n");
}

/* ==============================
   Update Record
   ============================== */
void updateRecord(FILE *fPtr)
{
    struct clientData client = {0, "", "", 0.0};
    int account;
    double transaction;

    printf("Enter account to update (1 - 100): ");
    scanf("%d", &account);

    fseek(fPtr, (account - 1) * sizeof(struct clientData), SEEK_SET);
    fread(&client, sizeof(struct clientData), 1, fPtr);

    if (client.acctNum == 0) {
        printf("Account #%d has no information.\n", account);
    } else {
        printf("%-6d%-16s%-11s%10.2f\n\n",
               client.acctNum, client.lastName,
               client.firstName, client.balance);
        printf("Enter charge (+) or payment (-): ");
        scanf("%lf", &transaction);
        client.balance += transaction;

        printf("%-6d%-16s%-11s%10.2f\n",
               client.acctNum, client.lastName,
               client.firstName, client.balance);

        fseek(fPtr, (account - 1) * sizeof(struct clientData), SEEK_SET);
        fwrite(&client, sizeof(struct clientData), 1, fPtr);
        fflush(fPtr);
    }
}

/* ==============================
   Delete Record
   ============================== */
void deleteRecord(FILE *fPtr)
{
    struct clientData client;
    struct clientData blankClient = {0, "", "", 0.0};
    int accountNum;

    printf("Enter account number to delete (1 - 100): ");
    scanf("%d", &accountNum);

    fseek(fPtr, (accountNum - 1) * sizeof(struct clientData), SEEK_SET);
    fread(&client, sizeof(struct clientData), 1, fPtr);

    if (client.acctNum == 0) {
        printf("Account %d does not exist.\n", accountNum);
    } else {
        fseek(fPtr, (accountNum - 1) * sizeof(struct clientData), SEEK_SET);
        fwrite(&blankClient, sizeof(struct clientData), 1, fPtr);
        fflush(fPtr);
        printf("Account %d deleted successfully.\n", accountNum);
    }
}

/* ==============================
   Add New Record
   ============================== */
void newRecord(FILE *fPtr)
{
    struct clientData client = {0, "", "", 0.0};
    int accountNum;

    printf("Enter new account number (1 - 100): ");
    scanf("%d", &accountNum);

    fseek(fPtr, (accountNum - 1) * sizeof(struct clientData), SEEK_SET);
    fread(&client, sizeof(struct clientData), 1, fPtr);

    if (client.acctNum != 0) {
        printf("Account #%d already contains information.\n", client.acctNum);
    } else {
        printf("Enter last name, first name, balance\n? ");
        scanf("%s%s%lf", client.lastName, client.firstName, &client.balance);
        client.acctNum = accountNum;

        fseek(fPtr, (client.acctNum - 1) * sizeof(struct clientData), SEEK_SET);
        fwrite(&client, sizeof(struct clientData), 1, fPtr);
        fflush(fPtr);
        printf("Account #%d created successfully.\n", client.acctNum);
    }
}
===== ./workingP4Ch10.txt =====
#include <stdio.h>
#include <cstring>
              
struct record {                              
      char title[25];          /* account number */    
      char dir[ 25 ];  /* account last name */ 
      char date[ 11 ]; /* account fi+rst name */
      char length[5];       /* account balance */   
};

int main(){
    
    FILE *cfPtr;
       
    if ((cfPtr = fopen ("movie.txt", "r+") ) == NULL){
        puts("Fatal error...\n");
    //    exit(1);
   }
  //
       
    //printf("1. Movie One\n");
    //fputs("2. Movie Two\n");
    //puts("3. Movie Three\n");
    //fputs("Enter \"Exit\"");
          
      
    int i=0;
       //printf("Enter \"exit\" as Title for exit.");
    //se{
            struct record movieArray[3];
       while(!feof(cfPtr)){
       {
           //do{
          while((getchar())!='n');
          printf("%s", "\nEnter Title");
          fgets(movieArray[i].title, 25, stdin);
          fflush(stdin);
          while((getchar())!='n');
          printf("%s", "\nEnter Director");
          fgets(movieArray[i].dir, 25, stdin);
          fflush(stdin);
          while((getchar())!='n');
          printf("%s", "\nEnter Date");
          fgets(movieArray[i].date, 11, stdin);
        //fflush(stdin);
        //while((getchar())!='n');
          printf("%s", "\nEnter Title");
          fgets(movieArray[i].length, 5,stdin);
          fflush(stdin);
          
          
         //if (fwrite(movieArray[i].title, "exit") == 0);
          //  exit(1);
          //  do{
          
         fwrite(&movieArray[i], sizeof(struct record movieArr[i]
       }
    

    }fclose(cfPtr);
      //eturn 0;
   }===== ./main.cpp =====
// main.cpp
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <iomanip>
#include "Student.h"
using namespace std;

int main() {
    srand(time(nullptr));

    int numStudents;
    cout << "Enter the number of students: ";
    cin >> numStudents;

    vector<Student> students;
    students.reserve(numStudents);

    for (int i = 0; i < numStudents; ++i) {
        string name;
        cout << "Enter the name for student " << i + 1 << ": ";
        cin >> name;
        students.emplace_back(name);
    }

    cout << "\033[1;32m\nStudents:\n\033[0m";
    cout << "\033[1;33m|-------------------------------------|\n";
    cout << "\033[1;33m|  Name      |  Age  |   GPA  |  ID   |\n";
    cout << "\033[1;33m|-------------------------------------|\n\033[0m";
    for (const auto& student : students) {
        cout << "\033[1;34m| " << setw(10) << student.getName() << " | "
                  << setw(5) << student.getAge() << " | "
                  << setw(5) << fixed << setprecision(2) << student.getGPA() << " | "
                  << std::setw(5) << student.getID() << "  |\033[0m\n";
    }

    sort(students.begin(), students.end(), [](const Student& a, const Student& b) {
        return a.getGPA() > b.getGPA();
    });

    cout << "\033[1;32m\nStudents (Sorted):\n\033[0m";
    cout << "\033[1;33m|-------------------------------------|\n";
    cout << "\033[1;33m|  Name      |  Age  |   GPA  |  ID   |\n"; 
    cout << "\033[1;33m|-------------------------------------|\n\033[0m"; 
    for (const auto& student : students) {
        cout << "\033[1;34m| " << setw(10) << student.getName() << " | "
                  << setw(5) << student.getAge() << " | "
                  << setw(5) << fixed << setprecision(2) << student.getGPA() << " | "
                  << std::setw(5) << student.getID() << "  |\033[0m\n";
    }

    return 0;
}===== ./Bank.cpp =====
// Bank.cpp
#include "Bank.h"
#include <iostream> // Add this line

//extern const std::string correctUsername = "Admin";
//extern const std::string correctPassword = "123456";


// Account class implementation
Account::Account(double balance) : balance(balance) {}

void Account::deposit(double amount) {
    balance += amount;
}

void Account::withdraw(double amount) {
    if (amount > balance) {
        throw InsufficientFundsException(); // You might want to define this exception more thoroughly
    }
    balance -= amount;
}

double Account::getBalance() const {
    return balance;
}

// SavingsAccount class implementation
SavingsAccount::SavingsAccount(double balance, double interestRate)
    : Account(balance), interestRate(interestRate) {}

void SavingsAccount::addInterest() {
    double interest = balance * interestRate;
    deposit(interest);
}

// CheckingAccount class implementation
CheckingAccount::CheckingAccount(double balance, double feePerTransaction)
    : Account(balance), feePerTransaction(feePerTransaction) {}

void CheckingAccount::deposit(double amount) {
    Account::deposit(amount - feePerTransaction); // Deduct transaction fee for deposits
}

void CheckingAccount::withdraw(double amount) {
    Account::withdraw(amount + feePerTransaction); // Include transaction fee for withdrawals
}

// Function to initialize student accounts
std::unordered_map<std::string, std::unique_ptr<Account>> initializeStudents() {
    std::unordered_map<std::string, std::unique_ptr<Account>> students;
    
    // Using std::unique_ptr directly instead of std::make_unique
    students["John Garica"] = std::unique_ptr<Account>(new CheckingAccount(1000, 0.02));
    students["Joe Rivas"] = std::unique_ptr<Account>(new SavingsAccount(2000, 0.05));
    students["Martha Rosales"] = std::unique_ptr<Account>(new CheckingAccount(1500, 0.01));
    students["Edward Gaytan"] = std::unique_ptr<Account>(new SavingsAccount(3000, 0.03));
    students["Sarah Chavez"] = std::unique_ptr<Account>(new CheckingAccount(1200, 0.015));
    
    return students; // Complete the return statement
}

Account* login(const std::unordered_map<std::string, std::unique_ptr<Account>>& students, std::string& loggedInUsername, const std::string& correctUsername, const std::string& correctPassword) {
    std::string username;
    std::string password;
    std::cout << "Enter your username: ";
    std::cin >> username;
    std::cout << "Enter your password: ";
    std::cin >> password;

    auto it = students.find(username);

    if (it != students.end() && username == correctUsername && password == correctPassword) {
        // Username and password are correct
        std::cout << "Login successful!\n";
        loggedInUsername = username;  // Store the logged-in username
        return it->second.get();
    } else {
        // Incorrect username or password
        std::cout << "Invalid username or password.\n";
        return nullptr;
    }
}

// Function to add money to the account
void addMoney(Account* account) {
    double amount;
    std::cout << "Enter the amount to deposit: ";
    std::cin >> amount;
    account->deposit(amount);
    std::cout << "Deposit successful!\n";
}

// Function to withdraw money from the account
void withdrawMoney(Account* account) {
    double amount;
    std::cout << "Enter the amount to withdraw: ";
    std::cin >> amount;
    try {
        account->withdraw(amount);
        std::cout << "Withdrawal successful!\n";
    } catch (InsufficientFundsException&) {
        std::cout << "Insufficient funds.\n";
    }
}

// Function to view the account balance
void viewAccount(Account* account) {
    std::cout << "Your current balance is: " << account->getBalance() << "\n";
}
===== ./safePgr4.txt =====
#include <stdio.h>

struct record{
        int inputMovie;
        char title[25];
        char dir[25];
        char date[11];
        int length;
}movieArray[3];

int choiceData=0;
void write movie(FILE *movieArr[3])

int archMenu() {

       FILE *cfPtr

       //for(( cfPtr = fopen("program4.txt", "w"))==NULL)
                printf("file inaccessible!");
       
       // determinant menu

        int choice=0;
        printf("Welcome to the Movie Library!\n");
        printf("**************************\n");
        printf("\nEnter Option\n");
        printf("\n1) Insert Movie Record\n");
        printf("\n2) List Movie\n");
        printf("\n3) Movie Catalog\n");
        printf("\n4) Exit?\n");
        printf("**************************\n");
                while((getchar())!='\n');
            printf("\t\t1. Enter Movie Title: ");
        
        fgets(movieArray[i].title,25, stdin);
        //fflush(stdin);
        
        while((getchar())!='\n');
            printf("\t\tEnter Director: ");
        
        fgets(movieArray[i].dir,25, stdin);
        fflush(stdin);
        
        while((getchar())!='\n');
            printf("\t\tEnter Release Date: ");
        
        fgets(movieArray[i].date,11, stdin);
        fflush(stdin);
        printf("\t\tEnter Length: ");
        scanf("%d",&movieArray[i].length);
        
        while((getchar())!= '\n');
            printf("Exit(0)?");
        //exit(0);
}
     do{
                printf("Option: \n");
                scanf("%d", &choice);
      }while(choice<1 || choice>4);
        return choice;
}

//write movie (default)
void dataMenu(int i) {
        while((getchar())!='\n');
            printf("\t\t1. Enter Movie Title: ");
        
        fgets(movieArray[i].title,25, stdin);
        //fflush(stdin);
        
        while((getchar())!='\n');
            printf("\t\tEnter Director: ");
        
        fgets(movieArray[i].dir,25, stdin);
        fflush(stdin);
        
        while((getchar())!='\n');
            printf("\t\tEnter Release Date: ");
        
        fgets(movieArray[i].date,11, stdin);
        fflush(stdin);
        printf("\t\tEnter Length: ");
        scanf("%d",&movieArray[i].length);
        
        while((getchar())!= '\n');
            printf("Exit(0)?");
        //exit(0);
}
int main(void) {
    
    FILE* fptr;

    *fptr = fopen("program4.txt", "a");
    
    int dataInput=0;
    int recordNum = 0;
    
    // movie[3];
    
    //if(fptr!=NULL){
      //  while(fgets(movie, 3, fptr)){
        //    printf("%u","%d", "%d", movie, dataInput, recordNum);
       // }
   // }
    //else{
       // printf("file open unsuccesful");
    //}

     //   }
        
        do{
                dataInput = archMenu();
                switch(dataInput){
                        case 1:
                                printf("Insert Movie 1: \n");
                                dataMenu(recordNum);
                                recordNum++;
                                break;
                               
                        case 2:
                                printf("Insert Movie 2\n");
                                dataMenu(recordNum);
                                recordNum++;
                                break;
                                

                        case 3:
                                printf("Insert Movie 3\n\n");
                                dataMenu(recordNum);
                                recordNum++;
                                break;
                             
                        default:
                                printf("error: Please enter a correct option!\n");
                }
        }while(dataInput!=4);
       
        return 0;
}
   int archMenu( void )
   {
      int choice; /* variable to store user's choice */


      printf( "\nEnter your choice\n"
         "1 - First Movie \n"
         "    \"accounts.txt\" for printing\n"
         "2 - Second account\n"
         "3 - Third Movie \n"
         "4 - Exit\n?"
         "5 - end program\n? " );

      scanf( "%d", &Choice ); /* receive choice from user */

      return choice;

   } 
prototype read
void readMovie

prototype write===== ./DocumentLayout.json =====
{
  "Version": 1,
  "WorkspaceRootPath": "C:\\Users\\joele\\OneDrive - South Texas College\\Fall 2024\\COSC - 2425 - V01\\Irvine\\Irvine\\Examples\\Project32_VS2017\\",
  "Documents": [],
  "DocumentGroupContainers": [
    {
      "Orientation": 0,
      "VerticalTabListWidth": 256,
      "DocumentGroups": []
    }
  ]
}===== ./Bubblesort_Linked_List.cpp =====
#include <iostream>
#include <fstream>
using namespace std;

struct ListNode
{
	double value;
	ListNode *next;

	ListNode(double value1, ListNode *next1 = NULL)
	{
		value = value1;
		next = next1;
	}
};

int main()
{
	ifstream inFile;
	inFile.open("Grades.txt");
	ListNode *head= NULL;
	double value;
	for (int x=0; x<10; x++)
	{
		inFile>>value;
		head = new ListNode(value,head);
	}
	ListNode *ptr1;
	double temp;
	for (int x=0; x<10; x++)
	{
		ptr1=head;
		for (int y=0; y<10-1-x; y++)
		{
			if (ptr1->value > ptr1->next->value)
			{
				temp = ptr1->value;
				ptr1->value = ptr1->next->value;
				ptr1->next->value = temp;
			}
			ptr1=ptr1->next;
		}
	}


	ListNode *ptr = head;
	for (int x=0; x<10; x++)
	{
		cout<<ptr->value<<endl;
		ptr=ptr->next;
	}

	return 0;
}===== ./movieData5.txt =====
#include <stdio.h>

struct record{
        int inputMovie;
        char title[25];
        char dir[25];
        char date[11];
        int length;
}movieArray[3];

int archMenu();
void dataMenu(int i);
void printMovie(int recordNum);
void printArchive(int recordNum);
void readMovie( FILE *fMov);
void writeMovie( FILE *fMov);

int choiceData=0;

int main(void) {
        int dataInput=0;
        int recordNum = 0;
        do{
                dataInput = archMenu();
                switch(dataInput){
                        case 1:
                                printf("Initializing archive tools: \n");
                                dataMenu(recordNum);
                                recordNum++;
                                break;
                                //printMovie(recordNum);
                                break;
                        case 3:
                                printf("Listing all archive data...\n");
                                //printArchive(recordNum);
                                break;

                        case 4:
                                printf("Thanks for using the movie inventory.\n\n");
                                break;
                        default:
                                printf("error: Please enter a correct option!\n");
                }
        }while(dataInput!=4);
        return 0;
}
int archMenu() {
//1. Determinant menu
        int choice = 0;
        printf("Welcome to the Movie Library!\n");
        printf("**************************\n");
        printf("\nEnter Option\n");
        printf("\n1) Insert Movie Record\n");
        printf("\n2) List Movie\n");
        printf("\n3) Movie Catalog\n");
        printf("\n4) Exit?\n");
        printf("**************************\n");
        do{
                printf("Option: \n");
                scanf("%d", &choice);
        }while(choice<1 || choice>4);
        return choice;
}
void dataMenu(int i) {
        /*1A newMov data input*/
        while((getchar())!='\n');
        printf("\t\tEnter Movie Title: ");
        fgets(movieArray[i].title,25, stdin);
        while((getchar())!='\n');
        printf("\t\tEnter Director: ");
        fgets(movieArray[i].dir,25, stdin);
        fflush(stdin);
        while((getchar())!='\n');
        printf("\t\tEnter Release Date: ");
        fgets(movieArray[i].date, 11, stdin);
        //scanf("%s",&movieArray[i].date);
        printf("\t\tEnter Length: ");
        scanf("%d",&movieArray[i].length);
}
void writeMovie(FILE *fPtr){
        FILE *fPtr;
        fPtr = fopen("program4.txt", "w");
        char content[1000];
        if (fPtr != NULL){
                fgets(content, 100, fPtr);
        }else{
                 printf("file inaccesible ");
        }
        return writeMovie;
}
void printArchive(int recordNum){
        if(recordNum>0){
                for(int i=0; i<recordNum; i++){
                        printf("Title: %s\n", movieArray[i].title);
                        printf("Director: %s\n", movieArray[i].dir);
                        printf("Date: %s\n", movieArray[i].date);
                        printf("Lenght: %d\n", movieArray[i].length);
                break;
        }
}

return recordNum;
}
void readMovie(FILE* fPtr){
        FILE* fPtr;
        fPtr = fopen("program4.txt", "r");

        if (fPtr != NULL){
            printf("Successful!");
            }
        else{
                printf("inaccessible file!")
           }
        return readMovie;
}
//write movie
void writeMovie(FILE *fPtr){
        FILE *fPtr;
        fPtr = fopen("program4.txt", "w");
        char content[1000];
        if (fPtr != NULL){
                fgets(content, 100, fPtr);
        }else{
                printf("file inaccesible ");
        }

        return writeMovie;
}===== ./Module 4 methods.txt =====
list[index] = x - Replaces the element at index [n] with x.

list.append(x) - Appends x to the end of the list.

list.insert(index, x) - Inserts x at index position [index].

list.pop(index) - Returns the element at [index] and removes it from the list. If [index] position is not in the list, the last element in the list is returned and removed.

list.remove(x) - Removes the first occurrence of x in the list.

list.sort() - Sorts the items in the list.

list.reverse() - Reverses the order of items of the list.

list.clear() - Deletes all items in the list.

list.copy() - Creates a copy of the list.

list.extend(other_list) - Appends all the elements of other_list at the end of list

map(function, iterable) - Applies a given function to each item of an iterable (such as a list) and returns a map object with the results

zip(*iterables) - Takes in iterables as arguments and returns an iterator that generates tuples, where the i-th tuple contains the i-th element from each of the argument iterables.===== ./movie_archive.c =====
#include <stdio.h>

struct record{
        int inputMovie;
        char title[25];
        char dir[25];
        char date[11];
        char length[5];
}movieArray[3];

int choiceData=0;
int archMenu();
void dataMenu(int i);
void printArchive(int recordNum);

int main(void) {

        FILE * fp;
        int dataInput=0;
        int recordNum = 0;
        do{
                dataInput = archMenu();
                switch(dataInput){
                        case 1:
                                FILE * fp;
                                fp = fopen("movie.txt", "r+");
                                printf("Initializing movie one input: \n");
                                dataMenu(recordNum);
                                recordNum++;
                                fprintf;
                                break;
                        case 2:
                                FILE * twofp;
                                twofp=fopen("movie.txt","r+");
                                printf("Initializing movie two input: \n");
                                dataMenu(recordNum);
                                recordNum++;
                                fclose;
                        case 3:
                                FILE * threefp;
                                threefp = fopen("movie.txt", "r+");
                                printf("Initializing movie three input: \n");
                                dataMenu(recordNum);
                                recordNum++;
                                fprintf;
                                break;
                        default:
                                printf("Fatal error! Try Again. \n");

                          }
                        }while(dataInput!=4);
                fclose!=feof;
}
int archMenu() {
        FILE * fp, twofp, threefp;
        int fscanf(FILE * fp);
        fp = fopen("movie.txt", "w+");

        int choice=0;
        printf("Welcome to the Movie Library!\n");
        printf("**************************\n");
        printf("\nEnter Option\n");
                                                                                                                                                                                                                           62,28-35      Top
                              
                                FILE * threefp;
                                threefp = fopen("movie.txt", "r+");
                                printf("Initializing movie three input: \n");
                                dataMenu(recordNum);
                                recordNum++;
                                fprintf;
                                break;
                        default:
                                printf("Fatal error! Try Again. \n");

                          }
                        }while(dataInput!=4);
                fclose!=feof;
}
int archMenu() {
        FILE * fp, twofp, threefp;
        int fscanf(FILE * fp);
        fp = fopen("movie.txt", "w+");

        int choice=0;
        printf("Welcome to the Movie Library!\n");
        printf("**************************\n");
        printf("\nEnter Option\n");
        printf("\n1) Insert Movie One\n");
        printf("\n2) Insert Movie Two\n");
        printf("\n3) Insert Movie Three\n");
        printf("\n4) Exit?\n");
        printf("**************************\n");
        do{
                printf("Option: \n");
                scanf("%d", &choice);
        }while(choice<1 || choice>4);
        return choice;
}
void dataMenu(int i) {
        FILE *fp;
        int fscanf(FILE *fp);
        fp = fopen("movie.txt", "w+");
        fopen("movie.txt", "a+");
        while(choiceData>=1 && choiceData<=4 && choiceData!=5);
        while((getchar())!='\n');
        printf("\t\tEnter Movie Title: ");
        fgets(movieArray[i].title,25, stdin);
        while((getchar())!='\n');
        printf("\t\tEnter Director: ");
        fgets(movieArray[i].dir,25, stdin);
        while((getchar())!='\n');
        printf("\t\tEnter Release Date: ");
        fgets(movieArray[i].date,11, stdin);
        fflush(stdin);
        while((getchar())!='\n');
        printf("\t\tEnter Length: ");
        fgets(movieArray[i].length, 5, stdin);

        fprintf;
        //while(feof!=5);
}
===== ./practice.cpp =====
#include <iostream>
#include <stdexcept>
#include "Time.h"
using namespace std;

void displayTime(const string& message, const Time& time) {
    cout << message << "\nUniversal time: " << time.toUniversalString()
         << "\nStandard time: " << time.toStandardString() << "\n\n";
}

int main () {
    Time t1;
    Time t2{2};
    Time t3{21, 34};
    Time t4{12, 25, 42};

    cout << "Constructed with:\n\n";
    displayTime("t1: all arguments defaulted", t1);
    displayTime("t2: hour specified; minute and second defaulted", t2);
    displayTime("t3: hour and minute specified; second defaulted", t3);
    displayTime("t4: hour, minute and second specified", t4);

    try {
        Time t5{27, 74, 99};
    }
    catch (invalid_argument& e) {
        cerr << "Exception while initializing t5: " << e.what() << endl;
    }
}===== ./Road.cpp =====
// Road.cpp
#include "Road.h"
#include <iostream>
#include <limits>

Road::Road() : lanes(0), speedLimit(0) {}

Road::Road(const std::string& name, int lanes, int speedLimit)
    : name(name), lanes(lanes), speedLimit(speedLimit) {}

Road::~Road() {}

void Road::input() {
    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');

    std::cout << "Enter name: ";
    std::getline(std::cin, name);

    std::cout << "Enter lanes: ";
    while (!(std::cin >> lanes)) {
        std::cin.clear(); 
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); 
        std::cout << "Invalid input. Please enter a valid number for lanes: ";
    }
    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');

    std::cout << "Enter speed limit: ";
    while (!(std::cin >> speedLimit)) {
        std::cin.clear(); 
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); 
        std::cout << "Invalid input. Please enter a valid number for speed limit: ";
    }
    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
}


void Road::display() const {
    std::cout << "Name: " << name << "\n";
    std::cout << "Lanes: " << lanes << "\n";
    std::cout << "Speed limit: " << speedLimit << "\n";
}

Toll::Toll() : tollFee(0) {}

Toll::Toll(const std::string& name, int lanes, int speedLimit, int tollFee)
    : Road(name, lanes, speedLimit), tollFee(tollFee) {}

void Toll::input() {
    Road::input();
    std::cout << "Enter toll fee: ";
    while (!(std::cin >> tollFee) || tollFee < 0) {
        std::cin.clear();
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
        std::cout << "Invalid input. Please enter a valid toll fee: ";
    }
    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
}

void Toll::display() const {
    Road::display();
    std::cout << "Toll fee: " << tollFee << "\n";
}
===== ./movieData.c.txt =====
#include <stdio.h>

struct movieData{

        unsigned int code[3];
        char name[3];
        char director[3];
        int date[3];
        double lenght[3];
}
unsigned int enter();

int main ()

{
        FILE *movieData;
        unsigned int movieData[2] = {0};
        void(*movieData[3])(char) = {movie1, movie2, movie3};

        printf("%s", "Enter a movie record code 1-3:");
        size_t choice;
        scanf("%u", &choice);
        scanf("%u %s %s %lf %d", m.code, m.name, m.dir, m.date, m.lenght);
        printf("%u %s %s %lf %d \n",
                "Movie Record: &code\n",
                "Title: &name\n",
                "Director: &director[3]",
                "Released: &date[3]",
                "Lenght: &lenght[3]");
}

        while(choice >=0 && choice < 3){
                (*movieData[3])(&choice);

                printf("%s", "Enter movie code 1-3:");
                scanf("%u", &choice);
        }

        move_record = movie_data;

        if ((movieData = fopen("movie.dat", "rb+")) == NULL){
                puts("Movie file does not exist.");
        }
        else {
                printf("%s", "Enter Option\n"
                                "1 - Insert Movie Record\n"
                                "2 - List Movie\n"
                                "3 - View all Movie Records\n"
                                "4 - Exit\n?");


//initialization


 int movie1[4][2] = {/*int code*/, char name, char director, int date, double lenght}{
         puts("Information about this movie:");
         printMovie(movie1);

int movie2[4][2] = {char name, char director, int date, double lenght}{
        puts("information about this movie:");
        printMovie(movie2);

int movie3[4][2] = {char name, char director, int date, double lenght}{
        puts("Information about this movie:");
        printMovie(movie3);



                                "1 - Insert Movie Record\n"
                                "2 - List Movie\n"
                                "3 - View all Movie Records\n"
                                "4 - Exit\n?");


//initialization


 int movie1[4][2] = {/*int code*/, char name, char director, int date, double lenght}{
         puts("Information about this movie:");
         printMovie(movie1);

int movie2[4][2] = {char name, char director, int date, double lenght}{
        puts("information about this movie:");
        printMovie(movie2);

int movie3[4][2] = {char name, char director, int date, double lenght}{
        puts("Information about this movie:");
        printMovie(movie3);


//option1: enter data


//option2: list movie


//option3: view list


//option4: exit!
        while (code != 4){
                        unsinged int code;
                        char name[3];
                        char director;
                        int date;
                        double lenght;
                        }
                scanf(cmovieData, "%d");

                struct movieData Movie = {0, "", "", 0, 0};
                printf("%s", Enter Movie Code:"
                        "(1 to 3, 0 to end input):");
                scanf(%d", &movieData.code);


        }

        printf("1. Create a record code:");
        printf("2. Enter Movie Name:");
        printf("3. Enter Director:");
        printf("4. Enter Release Date: ");
        printf("3. Enter Lenght:");

        return 0;
}
                                                                                                 46,3-24       Bot

     ===== ./package.json =====
{
  "dependencies": {
    "express": "^4.19.2",
    "socket.io": "^4.7.5"
  }
}
===== ./sum_toProduct_Difference_Quotient.cpp =====
#include <iostream>

using namespace std;

using std::cout;
using std::endl;
using std::cin;

int main()
{
    int num1, num2;
    
    cout<< "Enter tow integers: " << endl;
    cin >> num1 >>num2;
    
    cout<< "THe Sum is " << num1 + num2
        << "\nTHe product is " << num1 * num2
        << "\nThe difference is " << num1 - num2
        << "\nThe quotient is " << num1 / num2 << endl;

    return 0;
}
===== ./account_class_demo.cpp =====
#include <string>
using namespace std;
int main() {
    class Account {
    public:
        Account(std::string accountName, int initialBalance)
            : name{ accountName } {
            if (initialBalance > 0) {
                balance = initialBalance;
            }
        }
        void deposit(int depositAmount) {
            if (depositAmount > 0) {
                balance = balance + depositAmount;
            }
        }
        int getBalance() const {
            return balance;
        }
        void setName(std::string accountName) {
            name = accountName;
        }
        std::string getName() const {
            return name;
        }
    private:
        std::string name;
        int balance{ 0 };
    };

};
===== ./types.json =====
{"application/andrew-inset":["ez"],"application/applixware":["aw"],"application/atom+xml":["atom"],"application/atomcat+xml":["atomcat"],"application/atomsvc+xml":["atomsvc"],"application/bdoc":["bdoc"],"application/ccxml+xml":["ccxml"],"application/cdmi-capability":["cdmia"],"application/cdmi-container":["cdmic"],"application/cdmi-domain":["cdmid"],"application/cdmi-object":["cdmio"],"application/cdmi-queue":["cdmiq"],"application/cu-seeme":["cu"],"application/dash+xml":["mpd"],"application/davmount+xml":["davmount"],"application/docbook+xml":["dbk"],"application/dssc+der":["dssc"],"application/dssc+xml":["xdssc"],"application/ecmascript":["ecma"],"application/emma+xml":["emma"],"application/epub+zip":["epub"],"application/exi":["exi"],"application/font-tdpfr":["pfr"],"application/font-woff":[],"application/font-woff2":[],"application/geo+json":["geojson"],"application/gml+xml":["gml"],"application/gpx+xml":["gpx"],"application/gxf":["gxf"],"application/gzip":["gz"],"application/hyperstudio":["stk"],"application/inkml+xml":["ink","inkml"],"application/ipfix":["ipfix"],"application/java-archive":["jar","war","ear"],"application/java-serialized-object":["ser"],"application/java-vm":["class"],"application/javascript":["js","mjs"],"application/json":["json","map"],"application/json5":["json5"],"application/jsonml+json":["jsonml"],"application/ld+json":["jsonld"],"application/lost+xml":["lostxml"],"application/mac-binhex40":["hqx"],"application/mac-compactpro":["cpt"],"application/mads+xml":["mads"],"application/manifest+json":["webmanifest"],"application/marc":["mrc"],"application/marcxml+xml":["mrcx"],"application/mathematica":["ma","nb","mb"],"application/mathml+xml":["mathml"],"application/mbox":["mbox"],"application/mediaservercontrol+xml":["mscml"],"application/metalink+xml":["metalink"],"application/metalink4+xml":["meta4"],"application/mets+xml":["mets"],"application/mods+xml":["mods"],"application/mp21":["m21","mp21"],"application/mp4":["mp4s","m4p"],"application/msword":["doc","dot"],"application/mxf":["mxf"],"application/octet-stream":["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"],"application/oda":["oda"],"application/oebps-package+xml":["opf"],"application/ogg":["ogx"],"application/omdoc+xml":["omdoc"],"application/onenote":["onetoc","onetoc2","onetmp","onepkg"],"application/oxps":["oxps"],"application/patch-ops-error+xml":["xer"],"application/pdf":["pdf"],"application/pgp-encrypted":["pgp"],"application/pgp-signature":["asc","sig"],"application/pics-rules":["prf"],"application/pkcs10":["p10"],"application/pkcs7-mime":["p7m","p7c"],"application/pkcs7-signature":["p7s"],"application/pkcs8":["p8"],"application/pkix-attr-cert":["ac"],"application/pkix-cert":["cer"],"application/pkix-crl":["crl"],"application/pkix-pkipath":["pkipath"],"application/pkixcmp":["pki"],"application/pls+xml":["pls"],"application/postscript":["ai","eps","ps"],"application/prs.cww":["cww"],"application/pskc+xml":["pskcxml"],"application/raml+yaml":["raml"],"application/rdf+xml":["rdf"],"application/reginfo+xml":["rif"],"application/relax-ng-compact-syntax":["rnc"],"application/resource-lists+xml":["rl"],"application/resource-lists-diff+xml":["rld"],"application/rls-services+xml":["rs"],"application/rpki-ghostbusters":["gbr"],"application/rpki-manifest":["mft"],"application/rpki-roa":["roa"],"application/rsd+xml":["rsd"],"application/rss+xml":["rss"],"application/rtf":["rtf"],"application/sbml+xml":["sbml"],"application/scvp-cv-request":["scq"],"application/scvp-cv-response":["scs"],"application/scvp-vp-request":["spq"],"application/scvp-vp-response":["spp"],"application/sdp":["sdp"],"application/set-payment-initiation":["setpay"],"application/set-registration-initiation":["setreg"],"application/shf+xml":["shf"],"application/smil+xml":["smi","smil"],"application/sparql-query":["rq"],"application/sparql-results+xml":["srx"],"application/srgs":["gram"],"application/srgs+xml":["grxml"],"application/sru+xml":["sru"],"application/ssdl+xml":["ssdl"],"application/ssml+xml":["ssml"],"application/tei+xml":["tei","teicorpus"],"application/thraud+xml":["tfi"],"application/timestamped-data":["tsd"],"application/vnd.3gpp.pic-bw-large":["plb"],"application/vnd.3gpp.pic-bw-small":["psb"],"application/vnd.3gpp.pic-bw-var":["pvb"],"application/vnd.3gpp2.tcap":["tcap"],"application/vnd.3m.post-it-notes":["pwn"],"application/vnd.accpac.simply.aso":["aso"],"application/vnd.accpac.simply.imp":["imp"],"application/vnd.acucobol":["acu"],"application/vnd.acucorp":["atc","acutc"],"application/vnd.adobe.air-application-installer-package+zip":["air"],"application/vnd.adobe.formscentral.fcdt":["fcdt"],"application/vnd.adobe.fxp":["fxp","fxpl"],"application/vnd.adobe.xdp+xml":["xdp"],"application/vnd.adobe.xfdf":["xfdf"],"application/vnd.ahead.space":["ahead"],"application/vnd.airzip.filesecure.azf":["azf"],"application/vnd.airzip.filesecure.azs":["azs"],"application/vnd.amazon.ebook":["azw"],"application/vnd.americandynamics.acc":["acc"],"application/vnd.amiga.ami":["ami"],"application/vnd.android.package-archive":["apk"],"application/vnd.anser-web-certificate-issue-initiation":["cii"],"application/vnd.anser-web-funds-transfer-initiation":["fti"],"application/vnd.antix.game-component":["atx"],"application/vnd.apple.installer+xml":["mpkg"],"application/vnd.apple.mpegurl":["m3u8"],"application/vnd.apple.pkpass":["pkpass"],"application/vnd.aristanetworks.swi":["swi"],"application/vnd.astraea-software.iota":["iota"],"application/vnd.audiograph":["aep"],"application/vnd.blueice.multipass":["mpm"],"application/vnd.bmi":["bmi"],"application/vnd.businessobjects":["rep"],"application/vnd.chemdraw+xml":["cdxml"],"application/vnd.chipnuts.karaoke-mmd":["mmd"],"application/vnd.cinderella":["cdy"],"application/vnd.claymore":["cla"],"application/vnd.cloanto.rp9":["rp9"],"application/vnd.clonk.c4group":["c4g","c4d","c4f","c4p","c4u"],"application/vnd.cluetrust.cartomobile-config":["c11amc"],"application/vnd.cluetrust.cartomobile-config-pkg":["c11amz"],"application/vnd.commonspace":["csp"],"application/vnd.contact.cmsg":["cdbcmsg"],"application/vnd.cosmocaller":["cmc"],"application/vnd.crick.clicker":["clkx"],"application/vnd.crick.clicker.keyboard":["clkk"],"application/vnd.crick.clicker.palette":["clkp"],"application/vnd.crick.clicker.template":["clkt"],"application/vnd.crick.clicker.wordbank":["clkw"],"application/vnd.criticaltools.wbs+xml":["wbs"],"application/vnd.ctc-posml":["pml"],"application/vnd.cups-ppd":["ppd"],"application/vnd.curl.car":["car"],"application/vnd.curl.pcurl":["pcurl"],"application/vnd.dart":["dart"],"application/vnd.data-vision.rdz":["rdz"],"application/vnd.dece.data":["uvf","uvvf","uvd","uvvd"],"application/vnd.dece.ttml+xml":["uvt","uvvt"],"application/vnd.dece.unspecified":["uvx","uvvx"],"application/vnd.dece.zip":["uvz","uvvz"],"application/vnd.denovo.fcselayout-link":["fe_launch"],"application/vnd.dna":["dna"],"application/vnd.dolby.mlp":["mlp"],"application/vnd.dpgraph":["dpg"],"application/vnd.dreamfactory":["dfac"],"application/vnd.ds-keypoint":["kpxx"],"application/vnd.dvb.ait":["ait"],"application/vnd.dvb.service":["svc"],"application/vnd.dynageo":["geo"],"application/vnd.ecowin.chart":["mag"],"application/vnd.enliven":["nml"],"application/vnd.epson.esf":["esf"],"application/vnd.epson.msf":["msf"],"application/vnd.epson.quickanime":["qam"],"application/vnd.epson.salt":["slt"],"application/vnd.epson.ssf":["ssf"],"application/vnd.eszigno3+xml":["es3","et3"],"application/vnd.ezpix-album":["ez2"],"application/vnd.ezpix-package":["ez3"],"application/vnd.fdf":["fdf"],"application/vnd.fdsn.mseed":["mseed"],"application/vnd.fdsn.seed":["seed","dataless"],"application/vnd.flographit":["gph"],"application/vnd.fluxtime.clip":["ftc"],"application/vnd.framemaker":["fm","frame","maker","book"],"application/vnd.frogans.fnc":["fnc"],"application/vnd.frogans.ltf":["ltf"],"application/vnd.fsc.weblaunch":["fsc"],"application/vnd.fujitsu.oasys":["oas"],"application/vnd.fujitsu.oasys2":["oa2"],"application/vnd.fujitsu.oasys3":["oa3"],"application/vnd.fujitsu.oasysgp":["fg5"],"application/vnd.fujitsu.oasysprs":["bh2"],"application/vnd.fujixerox.ddd":["ddd"],"application/vnd.fujixerox.docuworks":["xdw"],"application/vnd.fujixerox.docuworks.binder":["xbd"],"application/vnd.fuzzysheet":["fzs"],"application/vnd.genomatix.tuxedo":["txd"],"application/vnd.geogebra.file":["ggb"],"application/vnd.geogebra.tool":["ggt"],"application/vnd.geometry-explorer":["gex","gre"],"application/vnd.geonext":["gxt"],"application/vnd.geoplan":["g2w"],"application/vnd.geospace":["g3w"],"application/vnd.gmx":["gmx"],"application/vnd.google-apps.document":["gdoc"],"application/vnd.google-apps.presentation":["gslides"],"application/vnd.google-apps.spreadsheet":["gsheet"],"application/vnd.google-earth.kml+xml":["kml"],"application/vnd.google-earth.kmz":["kmz"],"application/vnd.grafeq":["gqf","gqs"],"application/vnd.groove-account":["gac"],"application/vnd.groove-help":["ghf"],"application/vnd.groove-identity-message":["gim"],"application/vnd.groove-injector":["grv"],"application/vnd.groove-tool-message":["gtm"],"application/vnd.groove-tool-template":["tpl"],"application/vnd.groove-vcard":["vcg"],"application/vnd.hal+xml":["hal"],"application/vnd.handheld-entertainment+xml":["zmm"],"application/vnd.hbci":["hbci"],"application/vnd.hhe.lesson-player":["les"],"application/vnd.hp-hpgl":["hpgl"],"application/vnd.hp-hpid":["hpid"],"application/vnd.hp-hps":["hps"],"application/vnd.hp-jlyt":["jlt"],"application/vnd.hp-pcl":["pcl"],"application/vnd.hp-pclxl":["pclxl"],"application/vnd.hydrostatix.sof-data":["sfd-hdstx"],"application/vnd.ibm.minipay":["mpy"],"application/vnd.ibm.modcap":["afp","listafp","list3820"],"application/vnd.ibm.rights-management":["irm"],"application/vnd.ibm.secure-container":["sc"],"application/vnd.iccprofile":["icc","icm"],"application/vnd.igloader":["igl"],"application/vnd.immervision-ivp":["ivp"],"application/vnd.immervision-ivu":["ivu"],"application/vnd.insors.igm":["igm"],"application/vnd.intercon.formnet":["xpw","xpx"],"application/vnd.intergeo":["i2g"],"application/vnd.intu.qbo":["qbo"],"application/vnd.intu.qfx":["qfx"],"application/vnd.ipunplugged.rcprofile":["rcprofile"],"application/vnd.irepository.package+xml":["irp"],"application/vnd.is-xpr":["xpr"],"application/vnd.isac.fcs":["fcs"],"application/vnd.jam":["jam"],"application/vnd.jcp.javame.midlet-rms":["rms"],"application/vnd.jisp":["jisp"],"application/vnd.joost.joda-archive":["joda"],"application/vnd.kahootz":["ktz","ktr"],"application/vnd.kde.karbon":["karbon"],"application/vnd.kde.kchart":["chrt"],"application/vnd.kde.kformula":["kfo"],"application/vnd.kde.kivio":["flw"],"application/vnd.kde.kontour":["kon"],"application/vnd.kde.kpresenter":["kpr","kpt"],"application/vnd.kde.kspread":["ksp"],"application/vnd.kde.kword":["kwd","kwt"],"application/vnd.kenameaapp":["htke"],"application/vnd.kidspiration":["kia"],"application/vnd.kinar":["kne","knp"],"application/vnd.koan":["skp","skd","skt","skm"],"application/vnd.kodak-descriptor":["sse"],"application/vnd.las.las+xml":["lasxml"],"application/vnd.llamagraphics.life-balance.desktop":["lbd"],"application/vnd.llamagraphics.life-balance.exchange+xml":["lbe"],"application/vnd.lotus-1-2-3":["123"],"application/vnd.lotus-approach":["apr"],"application/vnd.lotus-freelance":["pre"],"application/vnd.lotus-notes":["nsf"],"application/vnd.lotus-organizer":["org"],"application/vnd.lotus-screencam":["scm"],"application/vnd.lotus-wordpro":["lwp"],"application/vnd.macports.portpkg":["portpkg"],"application/vnd.mcd":["mcd"],"application/vnd.medcalcdata":["mc1"],"application/vnd.mediastation.cdkey":["cdkey"],"application/vnd.mfer":["mwf"],"application/vnd.mfmp":["mfm"],"application/vnd.micrografx.flo":["flo"],"application/vnd.micrografx.igx":["igx"],"application/vnd.mif":["mif"],"application/vnd.mobius.daf":["daf"],"application/vnd.mobius.dis":["dis"],"application/vnd.mobius.mbk":["mbk"],"application/vnd.mobius.mqy":["mqy"],"application/vnd.mobius.msl":["msl"],"application/vnd.mobius.plc":["plc"],"application/vnd.mobius.txf":["txf"],"application/vnd.mophun.application":["mpn"],"application/vnd.mophun.certificate":["mpc"],"application/vnd.mozilla.xul+xml":["xul"],"application/vnd.ms-artgalry":["cil"],"application/vnd.ms-cab-compressed":["cab"],"application/vnd.ms-excel":["xls","xlm","xla","xlc","xlt","xlw"],"application/vnd.ms-excel.addin.macroenabled.12":["xlam"],"application/vnd.ms-excel.sheet.binary.macroenabled.12":["xlsb"],"application/vnd.ms-excel.sheet.macroenabled.12":["xlsm"],"application/vnd.ms-excel.template.macroenabled.12":["xltm"],"application/vnd.ms-fontobject":["eot"],"application/vnd.ms-htmlhelp":["chm"],"application/vnd.ms-ims":["ims"],"application/vnd.ms-lrm":["lrm"],"application/vnd.ms-officetheme":["thmx"],"application/vnd.ms-outlook":["msg"],"application/vnd.ms-pki.seccat":["cat"],"application/vnd.ms-pki.stl":["stl"],"application/vnd.ms-powerpoint":["ppt","pps","pot"],"application/vnd.ms-powerpoint.addin.macroenabled.12":["ppam"],"application/vnd.ms-powerpoint.presentation.macroenabled.12":["pptm"],"application/vnd.ms-powerpoint.slide.macroenabled.12":["sldm"],"application/vnd.ms-powerpoint.slideshow.macroenabled.12":["ppsm"],"application/vnd.ms-powerpoint.template.macroenabled.12":["potm"],"application/vnd.ms-project":["mpp","mpt"],"application/vnd.ms-word.document.macroenabled.12":["docm"],"application/vnd.ms-word.template.macroenabled.12":["dotm"],"application/vnd.ms-works":["wps","wks","wcm","wdb"],"application/vnd.ms-wpl":["wpl"],"application/vnd.ms-xpsdocument":["xps"],"application/vnd.mseq":["mseq"],"application/vnd.musician":["mus"],"application/vnd.muvee.style":["msty"],"application/vnd.mynfc":["taglet"],"application/vnd.neurolanguage.nlu":["nlu"],"application/vnd.nitf":["ntf","nitf"],"application/vnd.noblenet-directory":["nnd"],"application/vnd.noblenet-sealer":["nns"],"application/vnd.noblenet-web":["nnw"],"application/vnd.nokia.n-gage.data":["ngdat"],"application/vnd.nokia.n-gage.symbian.install":["n-gage"],"application/vnd.nokia.radio-preset":["rpst"],"application/vnd.nokia.radio-presets":["rpss"],"application/vnd.novadigm.edm":["edm"],"application/vnd.novadigm.edx":["edx"],"application/vnd.novadigm.ext":["ext"],"application/vnd.oasis.opendocument.chart":["odc"],"application/vnd.oasis.opendocument.chart-template":["otc"],"application/vnd.oasis.opendocument.database":["odb"],"application/vnd.oasis.opendocument.formula":["odf"],"application/vnd.oasis.opendocument.formula-template":["odft"],"application/vnd.oasis.opendocument.graphics":["odg"],"application/vnd.oasis.opendocument.graphics-template":["otg"],"application/vnd.oasis.opendocument.image":["odi"],"application/vnd.oasis.opendocument.image-template":["oti"],"application/vnd.oasis.opendocument.presentation":["odp"],"application/vnd.oasis.opendocument.presentation-template":["otp"],"application/vnd.oasis.opendocument.spreadsheet":["ods"],"application/vnd.oasis.opendocument.spreadsheet-template":["ots"],"application/vnd.oasis.opendocument.text":["odt"],"application/vnd.oasis.opendocument.text-master":["odm"],"application/vnd.oasis.opendocument.text-template":["ott"],"application/vnd.oasis.opendocument.text-web":["oth"],"application/vnd.olpc-sugar":["xo"],"application/vnd.oma.dd2+xml":["dd2"],"application/vnd.openofficeorg.extension":["oxt"],"application/vnd.openxmlformats-officedocument.presentationml.presentation":["pptx"],"application/vnd.openxmlformats-officedocument.presentationml.slide":["sldx"],"application/vnd.openxmlformats-officedocument.presentationml.slideshow":["ppsx"],"application/vnd.openxmlformats-officedocument.presentationml.template":["potx"],"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":["xlsx"],"application/vnd.openxmlformats-officedocument.spreadsheetml.template":["xltx"],"application/vnd.openxmlformats-officedocument.wordprocessingml.document":["docx"],"application/vnd.openxmlformats-officedocument.wordprocessingml.template":["dotx"],"application/vnd.osgeo.mapguide.package":["mgp"],"application/vnd.osgi.dp":["dp"],"application/vnd.osgi.subsystem":["esa"],"application/vnd.palm":["pdb","pqa","oprc"],"application/vnd.pawaafile":["paw"],"application/vnd.pg.format":["str"],"application/vnd.pg.osasli":["ei6"],"application/vnd.picsel":["efif"],"application/vnd.pmi.widget":["wg"],"application/vnd.pocketlearn":["plf"],"application/vnd.powerbuilder6":["pbd"],"application/vnd.previewsystems.box":["box"],"application/vnd.proteus.magazine":["mgz"],"application/vnd.publishare-delta-tree":["qps"],"application/vnd.pvi.ptid1":["ptid"],"application/vnd.quark.quarkxpress":["qxd","qxt","qwd","qwt","qxl","qxb"],"application/vnd.realvnc.bed":["bed"],"application/vnd.recordare.musicxml":["mxl"],"application/vnd.recordare.musicxml+xml":["musicxml"],"application/vnd.rig.cryptonote":["cryptonote"],"application/vnd.rim.cod":["cod"],"application/vnd.rn-realmedia":["rm"],"application/vnd.rn-realmedia-vbr":["rmvb"],"application/vnd.route66.link66+xml":["link66"],"application/vnd.sailingtracker.track":["st"],"application/vnd.seemail":["see"],"application/vnd.sema":["sema"],"application/vnd.semd":["semd"],"application/vnd.semf":["semf"],"application/vnd.shana.informed.formdata":["ifm"],"application/vnd.shana.informed.formtemplate":["itp"],"application/vnd.shana.informed.interchange":["iif"],"application/vnd.shana.informed.package":["ipk"],"application/vnd.simtech-mindmapper":["twd","twds"],"application/vnd.smaf":["mmf"],"application/vnd.smart.teacher":["teacher"],"application/vnd.solent.sdkm+xml":["sdkm","sdkd"],"application/vnd.spotfire.dxp":["dxp"],"application/vnd.spotfire.sfs":["sfs"],"application/vnd.stardivision.calc":["sdc"],"application/vnd.stardivision.draw":["sda"],"application/vnd.stardivision.impress":["sdd"],"application/vnd.stardivision.math":["smf"],"application/vnd.stardivision.writer":["sdw","vor"],"application/vnd.stardivision.writer-global":["sgl"],"application/vnd.stepmania.package":["smzip"],"application/vnd.stepmania.stepchart":["sm"],"application/vnd.sun.wadl+xml":["wadl"],"application/vnd.sun.xml.calc":["sxc"],"application/vnd.sun.xml.calc.template":["stc"],"application/vnd.sun.xml.draw":["sxd"],"application/vnd.sun.xml.draw.template":["std"],"application/vnd.sun.xml.impress":["sxi"],"application/vnd.sun.xml.impress.template":["sti"],"application/vnd.sun.xml.math":["sxm"],"application/vnd.sun.xml.writer":["sxw"],"application/vnd.sun.xml.writer.global":["sxg"],"application/vnd.sun.xml.writer.template":["stw"],"application/vnd.sus-calendar":["sus","susp"],"application/vnd.svd":["svd"],"application/vnd.symbian.install":["sis","sisx"],"application/vnd.syncml+xml":["xsm"],"application/vnd.syncml.dm+wbxml":["bdm"],"application/vnd.syncml.dm+xml":["xdm"],"application/vnd.tao.intent-module-archive":["tao"],"application/vnd.tcpdump.pcap":["pcap","cap","dmp"],"application/vnd.tmobile-livetv":["tmo"],"application/vnd.trid.tpt":["tpt"],"application/vnd.triscape.mxs":["mxs"],"application/vnd.trueapp":["tra"],"application/vnd.ufdl":["ufd","ufdl"],"application/vnd.uiq.theme":["utz"],"application/vnd.umajin":["umj"],"application/vnd.unity":["unityweb"],"application/vnd.uoml+xml":["uoml"],"application/vnd.vcx":["vcx"],"application/vnd.visio":["vsd","vst","vss","vsw"],"application/vnd.visionary":["vis"],"application/vnd.vsf":["vsf"],"application/vnd.wap.wbxml":["wbxml"],"application/vnd.wap.wmlc":["wmlc"],"application/vnd.wap.wmlscriptc":["wmlsc"],"application/vnd.webturbo":["wtb"],"application/vnd.wolfram.player":["nbp"],"application/vnd.wordperfect":["wpd"],"application/vnd.wqd":["wqd"],"application/vnd.wt.stf":["stf"],"application/vnd.xara":["xar"],"application/vnd.xfdl":["xfdl"],"application/vnd.yamaha.hv-dic":["hvd"],"application/vnd.yamaha.hv-script":["hvs"],"application/vnd.yamaha.hv-voice":["hvp"],"application/vnd.yamaha.openscoreformat":["osf"],"application/vnd.yamaha.openscoreformat.osfpvg+xml":["osfpvg"],"application/vnd.yamaha.smaf-audio":["saf"],"application/vnd.yamaha.smaf-phrase":["spf"],"application/vnd.yellowriver-custom-menu":["cmp"],"application/vnd.zul":["zir","zirz"],"application/vnd.zzazz.deck+xml":["zaz"],"application/voicexml+xml":["vxml"],"application/wasm":["wasm"],"application/widget":["wgt"],"application/winhlp":["hlp"],"application/wsdl+xml":["wsdl"],"application/wspolicy+xml":["wspolicy"],"application/x-7z-compressed":["7z"],"application/x-abiword":["abw"],"application/x-ace-compressed":["ace"],"application/x-apple-diskimage":[],"application/x-arj":["arj"],"application/x-authorware-bin":["aab","x32","u32","vox"],"application/x-authorware-map":["aam"],"application/x-authorware-seg":["aas"],"application/x-bcpio":["bcpio"],"application/x-bdoc":[],"application/x-bittorrent":["torrent"],"application/x-blorb":["blb","blorb"],"application/x-bzip":["bz"],"application/x-bzip2":["bz2","boz"],"application/x-cbr":["cbr","cba","cbt","cbz","cb7"],"application/x-cdlink":["vcd"],"application/x-cfs-compressed":["cfs"],"application/x-chat":["chat"],"application/x-chess-pgn":["pgn"],"application/x-chrome-extension":["crx"],"application/x-cocoa":["cco"],"application/x-conference":["nsc"],"application/x-cpio":["cpio"],"application/x-csh":["csh"],"application/x-debian-package":["udeb"],"application/x-dgc-compressed":["dgc"],"application/x-director":["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"],"application/x-doom":["wad"],"application/x-dtbncx+xml":["ncx"],"application/x-dtbook+xml":["dtb"],"application/x-dtbresource+xml":["res"],"application/x-dvi":["dvi"],"application/x-envoy":["evy"],"application/x-eva":["eva"],"application/x-font-bdf":["bdf"],"application/x-font-ghostscript":["gsf"],"application/x-font-linux-psf":["psf"],"application/x-font-pcf":["pcf"],"application/x-font-snf":["snf"],"application/x-font-type1":["pfa","pfb","pfm","afm"],"application/x-freearc":["arc"],"application/x-futuresplash":["spl"],"application/x-gca-compressed":["gca"],"application/x-glulx":["ulx"],"application/x-gnumeric":["gnumeric"],"application/x-gramps-xml":["gramps"],"application/x-gtar":["gtar"],"application/x-hdf":["hdf"],"application/x-httpd-php":["php"],"application/x-install-instructions":["install"],"application/x-iso9660-image":[],"application/x-java-archive-diff":["jardiff"],"application/x-java-jnlp-file":["jnlp"],"application/x-latex":["latex"],"application/x-lua-bytecode":["luac"],"application/x-lzh-compressed":["lzh","lha"],"application/x-makeself":["run"],"application/x-mie":["mie"],"application/x-mobipocket-ebook":["prc","mobi"],"application/x-ms-application":["application"],"application/x-ms-shortcut":["lnk"],"application/x-ms-wmd":["wmd"],"application/x-ms-wmz":["wmz"],"application/x-ms-xbap":["xbap"],"application/x-msaccess":["mdb"],"application/x-msbinder":["obd"],"application/x-mscardfile":["crd"],"application/x-msclip":["clp"],"application/x-msdos-program":[],"application/x-msdownload":["com","bat"],"application/x-msmediaview":["mvb","m13","m14"],"application/x-msmetafile":["wmf","emf","emz"],"application/x-msmoney":["mny"],"application/x-mspublisher":["pub"],"application/x-msschedule":["scd"],"application/x-msterminal":["trm"],"application/x-mswrite":["wri"],"application/x-netcdf":["nc","cdf"],"application/x-ns-proxy-autoconfig":["pac"],"application/x-nzb":["nzb"],"application/x-perl":["pl","pm"],"application/x-pilot":[],"application/x-pkcs12":["p12","pfx"],"application/x-pkcs7-certificates":["p7b","spc"],"application/x-pkcs7-certreqresp":["p7r"],"application/x-rar-compressed":["rar"],"application/x-redhat-package-manager":["rpm"],"application/x-research-info-systems":["ris"],"application/x-sea":["sea"],"application/x-sh":["sh"],"application/x-shar":["shar"],"application/x-shockwave-flash":["swf"],"application/x-silverlight-app":["xap"],"application/x-sql":["sql"],"application/x-stuffit":["sit"],"application/x-stuffitx":["sitx"],"application/x-subrip":["srt"],"application/x-sv4cpio":["sv4cpio"],"application/x-sv4crc":["sv4crc"],"application/x-t3vm-image":["t3"],"application/x-tads":["gam"],"application/x-tar":["tar"],"application/x-tcl":["tcl","tk"],"application/x-tex":["tex"],"application/x-tex-tfm":["tfm"],"application/x-texinfo":["texinfo","texi"],"application/x-tgif":["obj"],"application/x-ustar":["ustar"],"application/x-virtualbox-hdd":["hdd"],"application/x-virtualbox-ova":["ova"],"application/x-virtualbox-ovf":["ovf"],"application/x-virtualbox-vbox":["vbox"],"application/x-virtualbox-vbox-extpack":["vbox-extpack"],"application/x-virtualbox-vdi":["vdi"],"application/x-virtualbox-vhd":["vhd"],"application/x-virtualbox-vmdk":["vmdk"],"application/x-wais-source":["src"],"application/x-web-app-manifest+json":["webapp"],"application/x-x509-ca-cert":["der","crt","pem"],"application/x-xfig":["fig"],"application/x-xliff+xml":["xlf"],"application/x-xpinstall":["xpi"],"application/x-xz":["xz"],"application/x-zmachine":["z1","z2","z3","z4","z5","z6","z7","z8"],"application/xaml+xml":["xaml"],"application/xcap-diff+xml":["xdf"],"application/xenc+xml":["xenc"],"application/xhtml+xml":["xhtml","xht"],"application/xml":["xml","xsl","xsd","rng"],"application/xml-dtd":["dtd"],"application/xop+xml":["xop"],"application/xproc+xml":["xpl"],"application/xslt+xml":["xslt"],"application/xspf+xml":["xspf"],"application/xv+xml":["mxml","xhvml","xvml","xvm"],"application/yang":["yang"],"application/yin+xml":["yin"],"application/zip":["zip"],"audio/3gpp":[],"audio/adpcm":["adp"],"audio/basic":["au","snd"],"audio/midi":["mid","midi","kar","rmi"],"audio/mp3":[],"audio/mp4":["m4a","mp4a"],"audio/mpeg":["mpga","mp2","mp2a","mp3","m2a","m3a"],"audio/ogg":["oga","ogg","spx"],"audio/s3m":["s3m"],"audio/silk":["sil"],"audio/vnd.dece.audio":["uva","uvva"],"audio/vnd.digital-winds":["eol"],"audio/vnd.dra":["dra"],"audio/vnd.dts":["dts"],"audio/vnd.dts.hd":["dtshd"],"audio/vnd.lucent.voice":["lvp"],"audio/vnd.ms-playready.media.pya":["pya"],"audio/vnd.nuera.ecelp4800":["ecelp4800"],"audio/vnd.nuera.ecelp7470":["ecelp7470"],"audio/vnd.nuera.ecelp9600":["ecelp9600"],"audio/vnd.rip":["rip"],"audio/wav":["wav"],"audio/wave":[],"audio/webm":["weba"],"audio/x-aac":["aac"],"audio/x-aiff":["aif","aiff","aifc"],"audio/x-caf":["caf"],"audio/x-flac":["flac"],"audio/x-m4a":[],"audio/x-matroska":["mka"],"audio/x-mpegurl":["m3u"],"audio/x-ms-wax":["wax"],"audio/x-ms-wma":["wma"],"audio/x-pn-realaudio":["ram","ra"],"audio/x-pn-realaudio-plugin":["rmp"],"audio/x-realaudio":[],"audio/x-wav":[],"audio/xm":["xm"],"chemical/x-cdx":["cdx"],"chemical/x-cif":["cif"],"chemical/x-cmdf":["cmdf"],"chemical/x-cml":["cml"],"chemical/x-csml":["csml"],"chemical/x-xyz":["xyz"],"font/collection":["ttc"],"font/otf":["otf"],"font/ttf":["ttf"],"font/woff":["woff"],"font/woff2":["woff2"],"image/apng":["apng"],"image/bmp":["bmp"],"image/cgm":["cgm"],"image/g3fax":["g3"],"image/gif":["gif"],"image/ief":["ief"],"image/jp2":["jp2","jpg2"],"image/jpeg":["jpeg","jpg","jpe"],"image/jpm":["jpm"],"image/jpx":["jpx","jpf"],"image/ktx":["ktx"],"image/png":["png"],"image/prs.btif":["btif"],"image/sgi":["sgi"],"image/svg+xml":["svg","svgz"],"image/tiff":["tiff","tif"],"image/vnd.adobe.photoshop":["psd"],"image/vnd.dece.graphic":["uvi","uvvi","uvg","uvvg"],"image/vnd.djvu":["djvu","djv"],"image/vnd.dvb.subtitle":[],"image/vnd.dwg":["dwg"],"image/vnd.dxf":["dxf"],"image/vnd.fastbidsheet":["fbs"],"image/vnd.fpx":["fpx"],"image/vnd.fst":["fst"],"image/vnd.fujixerox.edmics-mmr":["mmr"],"image/vnd.fujixerox.edmics-rlc":["rlc"],"image/vnd.ms-modi":["mdi"],"image/vnd.ms-photo":["wdp"],"image/vnd.net-fpx":["npx"],"image/vnd.wap.wbmp":["wbmp"],"image/vnd.xiff":["xif"],"image/webp":["webp"],"image/x-3ds":["3ds"],"image/x-cmu-raster":["ras"],"image/x-cmx":["cmx"],"image/x-freehand":["fh","fhc","fh4","fh5","fh7"],"image/x-icon":["ico"],"image/x-jng":["jng"],"image/x-mrsid-image":["sid"],"image/x-ms-bmp":[],"image/x-pcx":["pcx"],"image/x-pict":["pic","pct"],"image/x-portable-anymap":["pnm"],"image/x-portable-bitmap":["pbm"],"image/x-portable-graymap":["pgm"],"image/x-portable-pixmap":["ppm"],"image/x-rgb":["rgb"],"image/x-tga":["tga"],"image/x-xbitmap":["xbm"],"image/x-xpixmap":["xpm"],"image/x-xwindowdump":["xwd"],"message/rfc822":["eml","mime"],"model/gltf+json":["gltf"],"model/gltf-binary":["glb"],"model/iges":["igs","iges"],"model/mesh":["msh","mesh","silo"],"model/vnd.collada+xml":["dae"],"model/vnd.dwf":["dwf"],"model/vnd.gdl":["gdl"],"model/vnd.gtw":["gtw"],"model/vnd.mts":["mts"],"model/vnd.vtu":["vtu"],"model/vrml":["wrl","vrml"],"model/x3d+binary":["x3db","x3dbz"],"model/x3d+vrml":["x3dv","x3dvz"],"model/x3d+xml":["x3d","x3dz"],"text/cache-manifest":["appcache","manifest"],"text/calendar":["ics","ifb"],"text/coffeescript":["coffee","litcoffee"],"text/css":["css"],"text/csv":["csv"],"text/hjson":["hjson"],"text/html":["html","htm","shtml"],"text/jade":["jade"],"text/jsx":["jsx"],"text/less":["less"],"text/markdown":["markdown","md"],"text/mathml":["mml"],"text/n3":["n3"],"text/plain":["txt","text","conf","def","list","log","in","ini"],"text/prs.lines.tag":["dsc"],"text/richtext":["rtx"],"text/rtf":[],"text/sgml":["sgml","sgm"],"text/slim":["slim","slm"],"text/stylus":["stylus","styl"],"text/tab-separated-values":["tsv"],"text/troff":["t","tr","roff","man","me","ms"],"text/turtle":["ttl"],"text/uri-list":["uri","uris","urls"],"text/vcard":["vcard"],"text/vnd.curl":["curl"],"text/vnd.curl.dcurl":["dcurl"],"text/vnd.curl.mcurl":["mcurl"],"text/vnd.curl.scurl":["scurl"],"text/vnd.dvb.subtitle":["sub"],"text/vnd.fly":["fly"],"text/vnd.fmi.flexstor":["flx"],"text/vnd.graphviz":["gv"],"text/vnd.in3d.3dml":["3dml"],"text/vnd.in3d.spot":["spot"],"text/vnd.sun.j2me.app-descriptor":["jad"],"text/vnd.wap.wml":["wml"],"text/vnd.wap.wmlscript":["wmls"],"text/vtt":["vtt"],"text/x-asm":["s","asm"],"text/x-c":["c","cc","cxx","cpp","h","hh","dic"],"text/x-component":["htc"],"text/x-fortran":["f","for","f77","f90"],"text/x-handlebars-template":["hbs"],"text/x-java-source":["java"],"text/x-lua":["lua"],"text/x-markdown":["mkd"],"text/x-nfo":["nfo"],"text/x-opml":["opml"],"text/x-org":[],"text/x-pascal":["p","pas"],"text/x-processing":["pde"],"text/x-sass":["sass"],"text/x-scss":["scss"],"text/x-setext":["etx"],"text/x-sfv":["sfv"],"text/x-suse-ymp":["ymp"],"text/x-uuencode":["uu"],"text/x-vcalendar":["vcs"],"text/x-vcard":["vcf"],"text/xml":[],"text/yaml":["yaml","yml"],"video/3gpp":["3gp","3gpp"],"video/3gpp2":["3g2"],"video/h261":["h261"],"video/h263":["h263"],"video/h264":["h264"],"video/jpeg":["jpgv"],"video/jpm":["jpgm"],"video/mj2":["mj2","mjp2"],"video/mp2t":["ts"],"video/mp4":["mp4","mp4v","mpg4"],"video/mpeg":["mpeg","mpg","mpe","m1v","m2v"],"video/ogg":["ogv"],"video/quicktime":["qt","mov"],"video/vnd.dece.hd":["uvh","uvvh"],"video/vnd.dece.mobile":["uvm","uvvm"],"video/vnd.dece.pd":["uvp","uvvp"],"video/vnd.dece.sd":["uvs","uvvs"],"video/vnd.dece.video":["uvv","uvvv"],"video/vnd.dvb.file":["dvb"],"video/vnd.fvt":["fvt"],"video/vnd.mpegurl":["mxu","m4u"],"video/vnd.ms-playready.media.pyv":["pyv"],"video/vnd.uvvu.mp4":["uvu","uvvu"],"video/vnd.vivo":["viv"],"video/webm":["webm"],"video/x-f4v":["f4v"],"video/x-fli":["fli"],"video/x-flv":["flv"],"video/x-m4v":["m4v"],"video/x-matroska":["mkv","mk3d","mks"],"video/x-mng":["mng"],"video/x-ms-asf":["asf","asx"],"video/x-ms-vob":["vob"],"video/x-ms-wm":["wm"],"video/x-ms-wmv":["wmv"],"video/x-ms-wmx":["wmx"],"video/x-ms-wvx":["wvx"],"video/x-msvideo":["avi"],"video/x-sgi-movie":["movie"],"video/x-smv":["smv"],"x-conference/x-cooltalk":["ice"]}===== ./program4.c =====
#include <stdio.h>
#include <string.h>
#define SIZE 50

typedef struct {
    char name[SIZE];
    int quantity;
    double cost;
} Inventory;

int menu(void);
void Display(Inventory entry[], int size);
void AddNewEntry(Inventory entry[], int *size);
void SaveInventory(Inventory entry[], int size);
void LoadInventory(Inventory entry[], int *size);

int main(void)
{
    Inventory entry[SIZE];
    int size = 0;
    int selection;

    while (1) {
        selection = menu();

        if (selection == 1) {
            printf("\nLoading inventory...\n");
            LoadInventory(entry, &size);
        }
        else if (selection == 2) {
            printf("\nDisplaying inventory...\n");
            Display(entry, size);
        }
        else if (selection == 3) {
            printf("\nAdding new entry...\n");
            AddNewEntry(entry, &size);
        }
        else if (selection == 4) {
            printf("\nSaving inventory...\n");
            SaveInventory(entry, size);
        }
        else if (selection == 5) {
            printf("\nExiting program. Goodbye!\n");
            break;
        }
        else {
            printf("\nInvalid selection! Please try again.\n");
        }

        printf("\n--------------------------------------\n");
    }

    return 0;
}

/* ==============================
   MENU FUNCTION
   ============================== */
int menu(void)
{
    int selection;
    printf("\n======================================\n");
    printf("      WELCOME TO THE INVENTORY TOOL\n");
    printf("======================================\n");
    printf("1 - Load Inventory from file\n");
    printf("2 - Display Inventory\n");
    printf("3 - Add New Item\n");
    printf("4 - Save Inventory to file\n");
    printf("5 - Exit\n");
    printf("Enter your choice: ");
    scanf("%d", &selection);
    return selection;
}

/* ==============================
   ADD NEW ENTRY
   ============================== */
void AddNewEntry(Inventory entry[], int *size)
{
    if (*size >= SIZE) {
        printf("Inventory full! Cannot add more items.\n");
        return;
    }

    printf("\nEnter Item Name:\t");
    scanf("%s", entry[*size].name);

    printf("Enter Quantity:\t\t");
    scanf("%d", &entry[*size].quantity);

    printf("Enter Price per Unit:\t");
    scanf("%lf", &entry[*size].cost);

    (*size)++;
    printf("\nItem added successfully!\n");
}

/* ==============================
   DISPLAY INVENTORY
   ============================== */
void Display(Inventory entry[], int size)
{
    if (size == 0) {
        printf("\nInventory is empty.\n");
        return;
    }

    printf("\n%-20s %-10s %-10s\n", "Item", "Quantity", "Price");
    printf("---------------------------------------------\n");

    for (int i = 0; i < size; i++) {
        printf("%-20s %-10d $%-10.2f\n",
               entry[i].name, entry[i].quantity, entry[i].cost);
    }
}

/* ==============================
   SAVE INVENTORY TO FILE
   ============================== */
void SaveInventory(Inventory entry[], int size)
{
    FILE *fp = fopen("inventory.txt", "w");
    if (fp == NULL) {
        printf("Error: Could not open file for writing.\n");
        return;
    }

    fprintf(fp, "%d\n", size);
    for (int i = 0; i < size; i++) {
        fprintf(fp, "%s %d %.2f\n",
                entry[i].name, entry[i].quantity, entry[i].cost);
    }

    fclose(fp);
    printf("Inventory saved to 'inventory.txt'.\n");
}

/* ==============================
   LOAD INVENTORY FROM FILE
   ============================== */
void LoadInventory(Inventory entry[], int *size)
{
    FILE *fp = fopen("inventory.txt", "r");
    if (fp == NULL) {
        printf("Error: Could not open file for reading.\n");
        return;
    }

    fscanf(fp, "%d", size);
    for (int i = 0; i < *size; i++) {
        fscanf(fp, "%s %d %lf",
               entry[i].name, &entry[i].quantity, &entry[i].cost);
    }

    fclose(fp);
    printf("Inventory loaded successfully from 'inventory.txt'.\n");
}
===== ./db.json =====
{
  "application/1d-interleaved-parityfec": {
    "source": "iana"
  },
  "application/3gpdash-qoe-report+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/3gpp-ims+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/3gpphal+json": {
    "source": "iana",
    "compressible": true
  },
  "application/3gpphalforms+json": {
    "source": "iana",
    "compressible": true
  },
  "application/a2l": {
    "source": "iana"
  },
  "application/ace+cbor": {
    "source": "iana"
  },
  "application/activemessage": {
    "source": "iana"
  },
  "application/activity+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-costmap+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-costmapfilter+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-directory+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-endpointcost+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-endpointcostparams+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-endpointprop+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-endpointpropparams+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-error+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-networkmap+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-networkmapfilter+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-updatestreamcontrol+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-updatestreamparams+json": {
    "source": "iana",
    "compressible": true
  },
  "application/aml": {
    "source": "iana"
  },
  "application/andrew-inset": {
    "source": "iana",
    "extensions": ["ez"]
  },
  "application/applefile": {
    "source": "iana"
  },
  "application/applixware": {
    "source": "apache",
    "extensions": ["aw"]
  },
  "application/at+jwt": {
    "source": "iana"
  },
  "application/atf": {
    "source": "iana"
  },
  "application/atfx": {
    "source": "iana"
  },
  "application/atom+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["atom"]
  },
  "application/atomcat+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["atomcat"]
  },
  "application/atomdeleted+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["atomdeleted"]
  },
  "application/atomicmail": {
    "source": "iana"
  },
  "application/atomsvc+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["atomsvc"]
  },
  "application/atsc-dwd+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["dwd"]
  },
  "application/atsc-dynamic-event-message": {
    "source": "iana"
  },
  "application/atsc-held+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["held"]
  },
  "application/atsc-rdt+json": {
    "source": "iana",
    "compressible": true
  },
  "application/atsc-rsat+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rsat"]
  },
  "application/atxml": {
    "source": "iana"
  },
  "application/auth-policy+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/bacnet-xdd+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/batch-smtp": {
    "source": "iana"
  },
  "application/bdoc": {
    "compressible": false,
    "extensions": ["bdoc"]
  },
  "application/beep+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/calendar+json": {
    "source": "iana",
    "compressible": true
  },
  "application/calendar+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xcs"]
  },
  "application/call-completion": {
    "source": "iana"
  },
  "application/cals-1840": {
    "source": "iana"
  },
  "application/captive+json": {
    "source": "iana",
    "compressible": true
  },
  "application/cbor": {
    "source": "iana"
  },
  "application/cbor-seq": {
    "source": "iana"
  },
  "application/cccex": {
    "source": "iana"
  },
  "application/ccmp+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/ccxml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["ccxml"]
  },
  "application/cdfx+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["cdfx"]
  },
  "application/cdmi-capability": {
    "source": "iana",
    "extensions": ["cdmia"]
  },
  "application/cdmi-container": {
    "source": "iana",
    "extensions": ["cdmic"]
  },
  "application/cdmi-domain": {
    "source": "iana",
    "extensions": ["cdmid"]
  },
  "application/cdmi-object": {
    "source": "iana",
    "extensions": ["cdmio"]
  },
  "application/cdmi-queue": {
    "source": "iana",
    "extensions": ["cdmiq"]
  },
  "application/cdni": {
    "source": "iana"
  },
  "application/cea": {
    "source": "iana"
  },
  "application/cea-2018+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/cellml+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/cfw": {
    "source": "iana"
  },
  "application/city+json": {
    "source": "iana",
    "compressible": true
  },
  "application/clr": {
    "source": "iana"
  },
  "application/clue+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/clue_info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/cms": {
    "source": "iana"
  },
  "application/cnrp+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/coap-group+json": {
    "source": "iana",
    "compressible": true
  },
  "application/coap-payload": {
    "source": "iana"
  },
  "application/commonground": {
    "source": "iana"
  },
  "application/conference-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/cose": {
    "source": "iana"
  },
  "application/cose-key": {
    "source": "iana"
  },
  "application/cose-key-set": {
    "source": "iana"
  },
  "application/cpl+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["cpl"]
  },
  "application/csrattrs": {
    "source": "iana"
  },
  "application/csta+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/cstadata+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/csvm+json": {
    "source": "iana",
    "compressible": true
  },
  "application/cu-seeme": {
    "source": "apache",
    "extensions": ["cu"]
  },
  "application/cwt": {
    "source": "iana"
  },
  "application/cybercash": {
    "source": "iana"
  },
  "application/dart": {
    "compressible": true
  },
  "application/dash+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["mpd"]
  },
  "application/dash-patch+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["mpp"]
  },
  "application/dashdelta": {
    "source": "iana"
  },
  "application/davmount+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["davmount"]
  },
  "application/dca-rft": {
    "source": "iana"
  },
  "application/dcd": {
    "source": "iana"
  },
  "application/dec-dx": {
    "source": "iana"
  },
  "application/dialog-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/dicom": {
    "source": "iana"
  },
  "application/dicom+json": {
    "source": "iana",
    "compressible": true
  },
  "application/dicom+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/dii": {
    "source": "iana"
  },
  "application/dit": {
    "source": "iana"
  },
  "application/dns": {
    "source": "iana"
  },
  "application/dns+json": {
    "source": "iana",
    "compressible": true
  },
  "application/dns-message": {
    "source": "iana"
  },
  "application/docbook+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["dbk"]
  },
  "application/dots+cbor": {
    "source": "iana"
  },
  "application/dskpp+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/dssc+der": {
    "source": "iana",
    "extensions": ["dssc"]
  },
  "application/dssc+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xdssc"]
  },
  "application/dvcs": {
    "source": "iana"
  },
  "application/ecmascript": {
    "source": "iana",
    "compressible": true,
    "extensions": ["es","ecma"]
  },
  "application/edi-consent": {
    "source": "iana"
  },
  "application/edi-x12": {
    "source": "iana",
    "compressible": false
  },
  "application/edifact": {
    "source": "iana",
    "compressible": false
  },
  "application/efi": {
    "source": "iana"
  },
  "application/elm+json": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/elm+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/emergencycalldata.cap+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/emergencycalldata.comment+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/emergencycalldata.control+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/emergencycalldata.deviceinfo+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/emergencycalldata.ecall.msd": {
    "source": "iana"
  },
  "application/emergencycalldata.providerinfo+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/emergencycalldata.serviceinfo+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/emergencycalldata.subscriberinfo+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/emergencycalldata.veds+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/emma+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["emma"]
  },
  "application/emotionml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["emotionml"]
  },
  "application/encaprtp": {
    "source": "iana"
  },
  "application/epp+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/epub+zip": {
    "source": "iana",
    "compressible": false,
    "extensions": ["epub"]
  },
  "application/eshop": {
    "source": "iana"
  },
  "application/exi": {
    "source": "iana",
    "extensions": ["exi"]
  },
  "application/expect-ct-report+json": {
    "source": "iana",
    "compressible": true
  },
  "application/express": {
    "source": "iana",
    "extensions": ["exp"]
  },
  "application/fastinfoset": {
    "source": "iana"
  },
  "application/fastsoap": {
    "source": "iana"
  },
  "application/fdt+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["fdt"]
  },
  "application/fhir+json": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/fhir+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/fido.trusted-apps+json": {
    "compressible": true
  },
  "application/fits": {
    "source": "iana"
  },
  "application/flexfec": {
    "source": "iana"
  },
  "application/font-sfnt": {
    "source": "iana"
  },
  "application/font-tdpfr": {
    "source": "iana",
    "extensions": ["pfr"]
  },
  "application/font-woff": {
    "source": "iana",
    "compressible": false
  },
  "application/framework-attributes+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/geo+json": {
    "source": "iana",
    "compressible": true,
    "extensions": ["geojson"]
  },
  "application/geo+json-seq": {
    "source": "iana"
  },
  "application/geopackage+sqlite3": {
    "source": "iana"
  },
  "application/geoxacml+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/gltf-buffer": {
    "source": "iana"
  },
  "application/gml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["gml"]
  },
  "application/gpx+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["gpx"]
  },
  "application/gxf": {
    "source": "apache",
    "extensions": ["gxf"]
  },
  "application/gzip": {
    "source": "iana",
    "compressible": false,
    "extensions": ["gz"]
  },
  "application/h224": {
    "source": "iana"
  },
  "application/held+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/hjson": {
    "extensions": ["hjson"]
  },
  "application/http": {
    "source": "iana"
  },
  "application/hyperstudio": {
    "source": "iana",
    "extensions": ["stk"]
  },
  "application/ibe-key-request+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/ibe-pkg-reply+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/ibe-pp-data": {
    "source": "iana"
  },
  "application/iges": {
    "source": "iana"
  },
  "application/im-iscomposing+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/index": {
    "source": "iana"
  },
  "application/index.cmd": {
    "source": "iana"
  },
  "application/index.obj": {
    "source": "iana"
  },
  "application/index.response": {
    "source": "iana"
  },
  "application/index.vnd": {
    "source": "iana"
  },
  "application/inkml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["ink","inkml"]
  },
  "application/iotp": {
    "source": "iana"
  },
  "application/ipfix": {
    "source": "iana",
    "extensions": ["ipfix"]
  },
  "application/ipp": {
    "source": "iana"
  },
  "application/isup": {
    "source": "iana"
  },
  "application/its+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["its"]
  },
  "application/java-archive": {
    "source": "apache",
    "compressible": false,
    "extensions": ["jar","war","ear"]
  },
  "application/java-serialized-object": {
    "source": "apache",
    "compressible": false,
    "extensions": ["ser"]
  },
  "application/java-vm": {
    "source": "apache",
    "compressible": false,
    "extensions": ["class"]
  },
  "application/javascript": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true,
    "extensions": ["js","mjs"]
  },
  "application/jf2feed+json": {
    "source": "iana",
    "compressible": true
  },
  "application/jose": {
    "source": "iana"
  },
  "application/jose+json": {
    "source": "iana",
    "compressible": true
  },
  "application/jrd+json": {
    "source": "iana",
    "compressible": true
  },
  "application/jscalendar+json": {
    "source": "iana",
    "compressible": true
  },
  "application/json": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true,
    "extensions": ["json","map"]
  },
  "application/json-patch+json": {
    "source": "iana",
    "compressible": true
  },
  "application/json-seq": {
    "source": "iana"
  },
  "application/json5": {
    "extensions": ["json5"]
  },
  "application/jsonml+json": {
    "source": "apache",
    "compressible": true,
    "extensions": ["jsonml"]
  },
  "application/jwk+json": {
    "source": "iana",
    "compressible": true
  },
  "application/jwk-set+json": {
    "source": "iana",
    "compressible": true
  },
  "application/jwt": {
    "source": "iana"
  },
  "application/kpml-request+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/kpml-response+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/ld+json": {
    "source": "iana",
    "compressible": true,
    "extensions": ["jsonld"]
  },
  "application/lgr+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["lgr"]
  },
  "application/link-format": {
    "source": "iana"
  },
  "application/load-control+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/lost+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["lostxml"]
  },
  "application/lostsync+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/lpf+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/lxf": {
    "source": "iana"
  },
  "application/mac-binhex40": {
    "source": "iana",
    "extensions": ["hqx"]
  },
  "application/mac-compactpro": {
    "source": "apache",
    "extensions": ["cpt"]
  },
  "application/macwriteii": {
    "source": "iana"
  },
  "application/mads+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["mads"]
  },
  "application/manifest+json": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true,
    "extensions": ["webmanifest"]
  },
  "application/marc": {
    "source": "iana",
    "extensions": ["mrc"]
  },
  "application/marcxml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["mrcx"]
  },
  "application/mathematica": {
    "source": "iana",
    "extensions": ["ma","nb","mb"]
  },
  "application/mathml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["mathml"]
  },
  "application/mathml-content+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mathml-presentation+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbms-associated-procedure-description+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbms-deregister+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbms-envelope+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbms-msk+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbms-msk-response+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbms-protection-description+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbms-reception-report+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbms-register+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbms-register-response+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbms-schedule+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbms-user-service-description+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbox": {
    "source": "iana",
    "extensions": ["mbox"]
  },
  "application/media-policy-dataset+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["mpf"]
  },
  "application/media_control+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mediaservercontrol+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["mscml"]
  },
  "application/merge-patch+json": {
    "source": "iana",
    "compressible": true
  },
  "application/metalink+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["metalink"]
  },
  "application/metalink4+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["meta4"]
  },
  "application/mets+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["mets"]
  },
  "application/mf4": {
    "source": "iana"
  },
  "application/mikey": {
    "source": "iana"
  },
  "application/mipc": {
    "source": "iana"
  },
  "application/missing-blocks+cbor-seq": {
    "source": "iana"
  },
  "application/mmt-aei+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["maei"]
  },
  "application/mmt-usd+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["musd"]
  },
  "application/mods+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["mods"]
  },
  "application/moss-keys": {
    "source": "iana"
  },
  "application/moss-signature": {
    "source": "iana"
  },
  "application/mosskey-data": {
    "source": "iana"
  },
  "application/mosskey-request": {
    "source": "iana"
  },
  "application/mp21": {
    "source": "iana",
    "extensions": ["m21","mp21"]
  },
  "application/mp4": {
    "source": "iana",
    "extensions": ["mp4s","m4p"]
  },
  "application/mpeg4-generic": {
    "source": "iana"
  },
  "application/mpeg4-iod": {
    "source": "iana"
  },
  "application/mpeg4-iod-xmt": {
    "source": "iana"
  },
  "application/mrb-consumer+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mrb-publish+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/msc-ivr+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/msc-mixer+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/msword": {
    "source": "iana",
    "compressible": false,
    "extensions": ["doc","dot"]
  },
  "application/mud+json": {
    "source": "iana",
    "compressible": true
  },
  "application/multipart-core": {
    "source": "iana"
  },
  "application/mxf": {
    "source": "iana",
    "extensions": ["mxf"]
  },
  "application/n-quads": {
    "source": "iana",
    "extensions": ["nq"]
  },
  "application/n-triples": {
    "source": "iana",
    "extensions": ["nt"]
  },
  "application/nasdata": {
    "source": "iana"
  },
  "application/news-checkgroups": {
    "source": "iana",
    "charset": "US-ASCII"
  },
  "application/news-groupinfo": {
    "source": "iana",
    "charset": "US-ASCII"
  },
  "application/news-transmission": {
    "source": "iana"
  },
  "application/nlsml+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/node": {
    "source": "iana",
    "extensions": ["cjs"]
  },
  "application/nss": {
    "source": "iana"
  },
  "application/oauth-authz-req+jwt": {
    "source": "iana"
  },
  "application/oblivious-dns-message": {
    "source": "iana"
  },
  "application/ocsp-request": {
    "source": "iana"
  },
  "application/ocsp-response": {
    "source": "iana"
  },
  "application/octet-stream": {
    "source": "iana",
    "compressible": false,
    "extensions": ["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"]
  },
  "application/oda": {
    "source": "iana",
    "extensions": ["oda"]
  },
  "application/odm+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/odx": {
    "source": "iana"
  },
  "application/oebps-package+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["opf"]
  },
  "application/ogg": {
    "source": "iana",
    "compressible": false,
    "extensions": ["ogx"]
  },
  "application/omdoc+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["omdoc"]
  },
  "application/onenote": {
    "source": "apache",
    "extensions": ["onetoc","onetoc2","onetmp","onepkg"]
  },
  "application/opc-nodeset+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/oscore": {
    "source": "iana"
  },
  "application/oxps": {
    "source": "iana",
    "extensions": ["oxps"]
  },
  "application/p21": {
    "source": "iana"
  },
  "application/p21+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/p2p-overlay+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["relo"]
  },
  "application/parityfec": {
    "source": "iana"
  },
  "application/passport": {
    "source": "iana"
  },
  "application/patch-ops-error+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xer"]
  },
  "application/pdf": {
    "source": "iana",
    "compressible": false,
    "extensions": ["pdf"]
  },
  "application/pdx": {
    "source": "iana"
  },
  "application/pem-certificate-chain": {
    "source": "iana"
  },
  "application/pgp-encrypted": {
    "source": "iana",
    "compressible": false,
    "extensions": ["pgp"]
  },
  "application/pgp-keys": {
    "source": "iana",
    "extensions": ["asc"]
  },
  "application/pgp-signature": {
    "source": "iana",
    "extensions": ["asc","sig"]
  },
  "application/pics-rules": {
    "source": "apache",
    "extensions": ["prf"]
  },
  "application/pidf+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/pidf-diff+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/pkcs10": {
    "source": "iana",
    "extensions": ["p10"]
  },
  "application/pkcs12": {
    "source": "iana"
  },
  "application/pkcs7-mime": {
    "source": "iana",
    "extensions": ["p7m","p7c"]
  },
  "application/pkcs7-signature": {
    "source": "iana",
    "extensions": ["p7s"]
  },
  "application/pkcs8": {
    "source": "iana",
    "extensions": ["p8"]
  },
  "application/pkcs8-encrypted": {
    "source": "iana"
  },
  "application/pkix-attr-cert": {
    "source": "iana",
    "extensions": ["ac"]
  },
  "application/pkix-cert": {
    "source": "iana",
    "extensions": ["cer"]
  },
  "application/pkix-crl": {
    "source": "iana",
    "extensions": ["crl"]
  },
  "application/pkix-pkipath": {
    "source": "iana",
    "extensions": ["pkipath"]
  },
  "application/pkixcmp": {
    "source": "iana",
    "extensions": ["pki"]
  },
  "application/pls+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["pls"]
  },
  "application/poc-settings+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/postscript": {
    "source": "iana",
    "compressible": true,
    "extensions": ["ai","eps","ps"]
  },
  "application/ppsp-tracker+json": {
    "source": "iana",
    "compressible": true
  },
  "application/problem+json": {
    "source": "iana",
    "compressible": true
  },
  "application/problem+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/provenance+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["provx"]
  },
  "application/prs.alvestrand.titrax-sheet": {
    "source": "iana"
  },
  "application/prs.cww": {
    "source": "iana",
    "extensions": ["cww"]
  },
  "application/prs.cyn": {
    "source": "iana",
    "charset": "7-BIT"
  },
  "application/prs.hpub+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/prs.nprend": {
    "source": "iana"
  },
  "application/prs.plucker": {
    "source": "iana"
  },
  "application/prs.rdf-xml-crypt": {
    "source": "iana"
  },
  "application/prs.xsf+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/pskc+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["pskcxml"]
  },
  "application/pvd+json": {
    "source": "iana",
    "compressible": true
  },
  "application/qsig": {
    "source": "iana"
  },
  "application/raml+yaml": {
    "compressible": true,
    "extensions": ["raml"]
  },
  "application/raptorfec": {
    "source": "iana"
  },
  "application/rdap+json": {
    "source": "iana",
    "compressible": true
  },
  "application/rdf+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rdf","owl"]
  },
  "application/reginfo+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rif"]
  },
  "application/relax-ng-compact-syntax": {
    "source": "iana",
    "extensions": ["rnc"]
  },
  "application/remote-printing": {
    "source": "iana"
  },
  "application/reputon+json": {
    "source": "iana",
    "compressible": true
  },
  "application/resource-lists+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rl"]
  },
  "application/resource-lists-diff+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rld"]
  },
  "application/rfc+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/riscos": {
    "source": "iana"
  },
  "application/rlmi+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/rls-services+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rs"]
  },
  "application/route-apd+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rapd"]
  },
  "application/route-s-tsid+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["sls"]
  },
  "application/route-usd+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rusd"]
  },
  "application/rpki-ghostbusters": {
    "source": "iana",
    "extensions": ["gbr"]
  },
  "application/rpki-manifest": {
    "source": "iana",
    "extensions": ["mft"]
  },
  "application/rpki-publication": {
    "source": "iana"
  },
  "application/rpki-roa": {
    "source": "iana",
    "extensions": ["roa"]
  },
  "application/rpki-updown": {
    "source": "iana"
  },
  "application/rsd+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["rsd"]
  },
  "application/rss+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["rss"]
  },
  "application/rtf": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rtf"]
  },
  "application/rtploopback": {
    "source": "iana"
  },
  "application/rtx": {
    "source": "iana"
  },
  "application/samlassertion+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/samlmetadata+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/sarif+json": {
    "source": "iana",
    "compressible": true
  },
  "application/sarif-external-properties+json": {
    "source": "iana",
    "compressible": true
  },
  "application/sbe": {
    "source": "iana"
  },
  "application/sbml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["sbml"]
  },
  "application/scaip+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/scim+json": {
    "source": "iana",
    "compressible": true
  },
  "application/scvp-cv-request": {
    "source": "iana",
    "extensions": ["scq"]
  },
  "application/scvp-cv-response": {
    "source": "iana",
    "extensions": ["scs"]
  },
  "application/scvp-vp-request": {
    "source": "iana",
    "extensions": ["spq"]
  },
  "application/scvp-vp-response": {
    "source": "iana",
    "extensions": ["spp"]
  },
  "application/sdp": {
    "source": "iana",
    "extensions": ["sdp"]
  },
  "application/secevent+jwt": {
    "source": "iana"
  },
  "application/senml+cbor": {
    "source": "iana"
  },
  "application/senml+json": {
    "source": "iana",
    "compressible": true
  },
  "application/senml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["senmlx"]
  },
  "application/senml-etch+cbor": {
    "source": "iana"
  },
  "application/senml-etch+json": {
    "source": "iana",
    "compressible": true
  },
  "application/senml-exi": {
    "source": "iana"
  },
  "application/sensml+cbor": {
    "source": "iana"
  },
  "application/sensml+json": {
    "source": "iana",
    "compressible": true
  },
  "application/sensml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["sensmlx"]
  },
  "application/sensml-exi": {
    "source": "iana"
  },
  "application/sep+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/sep-exi": {
    "source": "iana"
  },
  "application/session-info": {
    "source": "iana"
  },
  "application/set-payment": {
    "source": "iana"
  },
  "application/set-payment-initiation": {
    "source": "iana",
    "extensions": ["setpay"]
  },
  "application/set-registration": {
    "source": "iana"
  },
  "application/set-registration-initiation": {
    "source": "iana",
    "extensions": ["setreg"]
  },
  "application/sgml": {
    "source": "iana"
  },
  "application/sgml-open-catalog": {
    "source": "iana"
  },
  "application/shf+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["shf"]
  },
  "application/sieve": {
    "source": "iana",
    "extensions": ["siv","sieve"]
  },
  "application/simple-filter+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/simple-message-summary": {
    "source": "iana"
  },
  "application/simplesymbolcontainer": {
    "source": "iana"
  },
  "application/sipc": {
    "source": "iana"
  },
  "application/slate": {
    "source": "iana"
  },
  "application/smil": {
    "source": "iana"
  },
  "application/smil+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["smi","smil"]
  },
  "application/smpte336m": {
    "source": "iana"
  },
  "application/soap+fastinfoset": {
    "source": "iana"
  },
  "application/soap+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/sparql-query": {
    "source": "iana",
    "extensions": ["rq"]
  },
  "application/sparql-results+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["srx"]
  },
  "application/spdx+json": {
    "source": "iana",
    "compressible": true
  },
  "application/spirits-event+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/sql": {
    "source": "iana"
  },
  "application/srgs": {
    "source": "iana",
    "extensions": ["gram"]
  },
  "application/srgs+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["grxml"]
  },
  "application/sru+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["sru"]
  },
  "application/ssdl+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["ssdl"]
  },
  "application/ssml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["ssml"]
  },
  "application/stix+json": {
    "source": "iana",
    "compressible": true
  },
  "application/swid+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["swidtag"]
  },
  "application/tamp-apex-update": {
    "source": "iana"
  },
  "application/tamp-apex-update-confirm": {
    "source": "iana"
  },
  "application/tamp-community-update": {
    "source": "iana"
  },
  "application/tamp-community-update-confirm": {
    "source": "iana"
  },
  "application/tamp-error": {
    "source": "iana"
  },
  "application/tamp-sequence-adjust": {
    "source": "iana"
  },
  "application/tamp-sequence-adjust-confirm": {
    "source": "iana"
  },
  "application/tamp-status-query": {
    "source": "iana"
  },
  "application/tamp-status-response": {
    "source": "iana"
  },
  "application/tamp-update": {
    "source": "iana"
  },
  "application/tamp-update-confirm": {
    "source": "iana"
  },
  "application/tar": {
    "compressible": true
  },
  "application/taxii+json": {
    "source": "iana",
    "compressible": true
  },
  "application/td+json": {
    "source": "iana",
    "compressible": true
  },
  "application/tei+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["tei","teicorpus"]
  },
  "application/tetra_isi": {
    "source": "iana"
  },
  "application/thraud+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["tfi"]
  },
  "application/timestamp-query": {
    "source": "iana"
  },
  "application/timestamp-reply": {
    "source": "iana"
  },
  "application/timestamped-data": {
    "source": "iana",
    "extensions": ["tsd"]
  },
  "application/tlsrpt+gzip": {
    "source": "iana"
  },
  "application/tlsrpt+json": {
    "source": "iana",
    "compressible": true
  },
  "application/tnauthlist": {
    "source": "iana"
  },
  "application/token-introspection+jwt": {
    "source": "iana"
  },
  "application/toml": {
    "compressible": true,
    "extensions": ["toml"]
  },
  "application/trickle-ice-sdpfrag": {
    "source": "iana"
  },
  "application/trig": {
    "source": "iana",
    "extensions": ["trig"]
  },
  "application/ttml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["ttml"]
  },
  "application/tve-trigger": {
    "source": "iana"
  },
  "application/tzif": {
    "source": "iana"
  },
  "application/tzif-leap": {
    "source": "iana"
  },
  "application/ubjson": {
    "compressible": false,
    "extensions": ["ubj"]
  },
  "application/ulpfec": {
    "source": "iana"
  },
  "application/urc-grpsheet+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/urc-ressheet+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rsheet"]
  },
  "application/urc-targetdesc+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["td"]
  },
  "application/urc-uisocketdesc+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vcard+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vcard+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vemmi": {
    "source": "iana"
  },
  "application/vividence.scriptfile": {
    "source": "apache"
  },
  "application/vnd.1000minds.decision-model+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["1km"]
  },
  "application/vnd.3gpp-prose+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp-prose-pc3ch+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp-v2x-local-service-information": {
    "source": "iana"
  },
  "application/vnd.3gpp.5gnas": {
    "source": "iana"
  },
  "application/vnd.3gpp.access-transfer-events+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.bsf+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.gmop+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.gtpc": {
    "source": "iana"
  },
  "application/vnd.3gpp.interworking-data": {
    "source": "iana"
  },
  "application/vnd.3gpp.lpp": {
    "source": "iana"
  },
  "application/vnd.3gpp.mc-signalling-ear": {
    "source": "iana"
  },
  "application/vnd.3gpp.mcdata-affiliation-command+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcdata-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcdata-payload": {
    "source": "iana"
  },
  "application/vnd.3gpp.mcdata-service-config+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcdata-signalling": {
    "source": "iana"
  },
  "application/vnd.3gpp.mcdata-ue-config+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcdata-user-profile+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcptt-affiliation-command+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcptt-floor-request+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcptt-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcptt-location-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcptt-mbms-usage-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcptt-service-config+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcptt-signed+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcptt-ue-config+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcptt-ue-init-config+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcptt-user-profile+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcvideo-affiliation-command+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcvideo-affiliation-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcvideo-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcvideo-location-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcvideo-mbms-usage-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcvideo-service-config+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcvideo-transmission-request+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcvideo-ue-config+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcvideo-user-profile+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mid-call+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.ngap": {
    "source": "iana"
  },
  "application/vnd.3gpp.pfcp": {
    "source": "iana"
  },
  "application/vnd.3gpp.pic-bw-large": {
    "source": "iana",
    "extensions": ["plb"]
  },
  "application/vnd.3gpp.pic-bw-small": {
    "source": "iana",
    "extensions": ["psb"]
  },
  "application/vnd.3gpp.pic-bw-var": {
    "source": "iana",
    "extensions": ["pvb"]
  },
  "application/vnd.3gpp.s1ap": {
    "source": "iana"
  },
  "application/vnd.3gpp.sms": {
    "source": "iana"
  },
  "application/vnd.3gpp.sms+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.srvcc-ext+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.srvcc-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.state-and-event-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.ussd+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp2.bcmcsinfo+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp2.sms": {
    "source": "iana"
  },
  "application/vnd.3gpp2.tcap": {
    "source": "iana",
    "extensions": ["tcap"]
  },
  "application/vnd.3lightssoftware.imagescal": {
    "source": "iana"
  },
  "application/vnd.3m.post-it-notes": {
    "source": "iana",
    "extensions": ["pwn"]
  },
  "application/vnd.accpac.simply.aso": {
    "source": "iana",
    "extensions": ["aso"]
  },
  "application/vnd.accpac.simply.imp": {
    "source": "iana",
    "extensions": ["imp"]
  },
  "application/vnd.acucobol": {
    "source": "iana",
    "extensions": ["acu"]
  },
  "application/vnd.acucorp": {
    "source": "iana",
    "extensions": ["atc","acutc"]
  },
  "application/vnd.adobe.air-application-installer-package+zip": {
    "source": "apache",
    "compressible": false,
    "extensions": ["air"]
  },
  "application/vnd.adobe.flash.movie": {
    "source": "iana"
  },
  "application/vnd.adobe.formscentral.fcdt": {
    "source": "iana",
    "extensions": ["fcdt"]
  },
  "application/vnd.adobe.fxp": {
    "source": "iana",
    "extensions": ["fxp","fxpl"]
  },
  "application/vnd.adobe.partial-upload": {
    "source": "iana"
  },
  "application/vnd.adobe.xdp+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xdp"]
  },
  "application/vnd.adobe.xfdf": {
    "source": "iana",
    "extensions": ["xfdf"]
  },
  "application/vnd.aether.imp": {
    "source": "iana"
  },
  "application/vnd.afpc.afplinedata": {
    "source": "iana"
  },
  "application/vnd.afpc.afplinedata-pagedef": {
    "source": "iana"
  },
  "application/vnd.afpc.cmoca-cmresource": {
    "source": "iana"
  },
  "application/vnd.afpc.foca-charset": {
    "source": "iana"
  },
  "application/vnd.afpc.foca-codedfont": {
    "source": "iana"
  },
  "application/vnd.afpc.foca-codepage": {
    "source": "iana"
  },
  "application/vnd.afpc.modca": {
    "source": "iana"
  },
  "application/vnd.afpc.modca-cmtable": {
    "source": "iana"
  },
  "application/vnd.afpc.modca-formdef": {
    "source": "iana"
  },
  "application/vnd.afpc.modca-mediummap": {
    "source": "iana"
  },
  "application/vnd.afpc.modca-objectcontainer": {
    "source": "iana"
  },
  "application/vnd.afpc.modca-overlay": {
    "source": "iana"
  },
  "application/vnd.afpc.modca-pagesegment": {
    "source": "iana"
  },
  "application/vnd.age": {
    "source": "iana",
    "extensions": ["age"]
  },
  "application/vnd.ah-barcode": {
    "source": "iana"
  },
  "application/vnd.ahead.space": {
    "source": "iana",
    "extensions": ["ahead"]
  },
  "application/vnd.airzip.filesecure.azf": {
    "source": "iana",
    "extensions": ["azf"]
  },
  "application/vnd.airzip.filesecure.azs": {
    "source": "iana",
    "extensions": ["azs"]
  },
  "application/vnd.amadeus+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.amazon.ebook": {
    "source": "apache",
    "extensions": ["azw"]
  },
  "application/vnd.amazon.mobi8-ebook": {
    "source": "iana"
  },
  "application/vnd.americandynamics.acc": {
    "source": "iana",
    "extensions": ["acc"]
  },
  "application/vnd.amiga.ami": {
    "source": "iana",
    "extensions": ["ami"]
  },
  "application/vnd.amundsen.maze+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.android.ota": {
    "source": "iana"
  },
  "application/vnd.android.package-archive": {
    "source": "apache",
    "compressible": false,
    "extensions": ["apk"]
  },
  "application/vnd.anki": {
    "source": "iana"
  },
  "application/vnd.anser-web-certificate-issue-initiation": {
    "source": "iana",
    "extensions": ["cii"]
  },
  "application/vnd.anser-web-funds-transfer-initiation": {
    "source": "apache",
    "extensions": ["fti"]
  },
  "application/vnd.antix.game-component": {
    "source": "iana",
    "extensions": ["atx"]
  },
  "application/vnd.apache.arrow.file": {
    "source": "iana"
  },
  "application/vnd.apache.arrow.stream": {
    "source": "iana"
  },
  "application/vnd.apache.thrift.binary": {
    "source": "iana"
  },
  "application/vnd.apache.thrift.compact": {
    "source": "iana"
  },
  "application/vnd.apache.thrift.json": {
    "source": "iana"
  },
  "application/vnd.api+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.aplextor.warrp+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.apothekende.reservation+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.apple.installer+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["mpkg"]
  },
  "application/vnd.apple.keynote": {
    "source": "iana",
    "extensions": ["key"]
  },
  "application/vnd.apple.mpegurl": {
    "source": "iana",
    "extensions": ["m3u8"]
  },
  "application/vnd.apple.numbers": {
    "source": "iana",
    "extensions": ["numbers"]
  },
  "application/vnd.apple.pages": {
    "source": "iana",
    "extensions": ["pages"]
  },
  "application/vnd.apple.pkpass": {
    "compressible": false,
    "extensions": ["pkpass"]
  },
  "application/vnd.arastra.swi": {
    "source": "iana"
  },
  "application/vnd.aristanetworks.swi": {
    "source": "iana",
    "extensions": ["swi"]
  },
  "application/vnd.artisan+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.artsquare": {
    "source": "iana"
  },
  "application/vnd.astraea-software.iota": {
    "source": "iana",
    "extensions": ["iota"]
  },
  "application/vnd.audiograph": {
    "source": "iana",
    "extensions": ["aep"]
  },
  "application/vnd.autopackage": {
    "source": "iana"
  },
  "application/vnd.avalon+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.avistar+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.balsamiq.bmml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["bmml"]
  },
  "application/vnd.balsamiq.bmpr": {
    "source": "iana"
  },
  "application/vnd.banana-accounting": {
    "source": "iana"
  },
  "application/vnd.bbf.usp.error": {
    "source": "iana"
  },
  "application/vnd.bbf.usp.msg": {
    "source": "iana"
  },
  "application/vnd.bbf.usp.msg+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.bekitzur-stech+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.bint.med-content": {
    "source": "iana"
  },
  "application/vnd.biopax.rdf+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.blink-idb-value-wrapper": {
    "source": "iana"
  },
  "application/vnd.blueice.multipass": {
    "source": "iana",
    "extensions": ["mpm"]
  },
  "application/vnd.bluetooth.ep.oob": {
    "source": "iana"
  },
  "application/vnd.bluetooth.le.oob": {
    "source": "iana"
  },
  "application/vnd.bmi": {
    "source": "iana",
    "extensions": ["bmi"]
  },
  "application/vnd.bpf": {
    "source": "iana"
  },
  "application/vnd.bpf3": {
    "source": "iana"
  },
  "application/vnd.businessobjects": {
    "source": "iana",
    "extensions": ["rep"]
  },
  "application/vnd.byu.uapi+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.cab-jscript": {
    "source": "iana"
  },
  "application/vnd.canon-cpdl": {
    "source": "iana"
  },
  "application/vnd.canon-lips": {
    "source": "iana"
  },
  "application/vnd.capasystems-pg+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.cendio.thinlinc.clientconf": {
    "source": "iana"
  },
  "application/vnd.century-systems.tcp_stream": {
    "source": "iana"
  },
  "application/vnd.chemdraw+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["cdxml"]
  },
  "application/vnd.chess-pgn": {
    "source": "iana"
  },
  "application/vnd.chipnuts.karaoke-mmd": {
    "source": "iana",
    "extensions": ["mmd"]
  },
  "application/vnd.ciedi": {
    "source": "iana"
  },
  "application/vnd.cinderella": {
    "source": "iana",
    "extensions": ["cdy"]
  },
  "application/vnd.cirpack.isdn-ext": {
    "source": "iana"
  },
  "application/vnd.citationstyles.style+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["csl"]
  },
  "application/vnd.claymore": {
    "source": "iana",
    "extensions": ["cla"]
  },
  "application/vnd.cloanto.rp9": {
    "source": "iana",
    "extensions": ["rp9"]
  },
  "application/vnd.clonk.c4group": {
    "source": "iana",
    "extensions": ["c4g","c4d","c4f","c4p","c4u"]
  },
  "application/vnd.cluetrust.cartomobile-config": {
    "source": "iana",
    "extensions": ["c11amc"]
  },
  "application/vnd.cluetrust.cartomobile-config-pkg": {
    "source": "iana",
    "extensions": ["c11amz"]
  },
  "application/vnd.coffeescript": {
    "source": "iana"
  },
  "application/vnd.collabio.xodocuments.document": {
    "source": "iana"
  },
  "application/vnd.collabio.xodocuments.document-template": {
    "source": "iana"
  },
  "application/vnd.collabio.xodocuments.presentation": {
    "source": "iana"
  },
  "application/vnd.collabio.xodocuments.presentation-template": {
    "source": "iana"
  },
  "application/vnd.collabio.xodocuments.spreadsheet": {
    "source": "iana"
  },
  "application/vnd.collabio.xodocuments.spreadsheet-template": {
    "source": "iana"
  },
  "application/vnd.collection+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.collection.doc+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.collection.next+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.comicbook+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.comicbook-rar": {
    "source": "iana"
  },
  "application/vnd.commerce-battelle": {
    "source": "iana"
  },
  "application/vnd.commonspace": {
    "source": "iana",
    "extensions": ["csp"]
  },
  "application/vnd.contact.cmsg": {
    "source": "iana",
    "extensions": ["cdbcmsg"]
  },
  "application/vnd.coreos.ignition+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.cosmocaller": {
    "source": "iana",
    "extensions": ["cmc"]
  },
  "application/vnd.crick.clicker": {
    "source": "iana",
    "extensions": ["clkx"]
  },
  "application/vnd.crick.clicker.keyboard": {
    "source": "iana",
    "extensions": ["clkk"]
  },
  "application/vnd.crick.clicker.palette": {
    "source": "iana",
    "extensions": ["clkp"]
  },
  "application/vnd.crick.clicker.template": {
    "source": "iana",
    "extensions": ["clkt"]
  },
  "application/vnd.crick.clicker.wordbank": {
    "source": "iana",
    "extensions": ["clkw"]
  },
  "application/vnd.criticaltools.wbs+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["wbs"]
  },
  "application/vnd.cryptii.pipe+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.crypto-shade-file": {
    "source": "iana"
  },
  "application/vnd.cryptomator.encrypted": {
    "source": "iana"
  },
  "application/vnd.cryptomator.vault": {
    "source": "iana"
  },
  "application/vnd.ctc-posml": {
    "source": "iana",
    "extensions": ["pml"]
  },
  "application/vnd.ctct.ws+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.cups-pdf": {
    "source": "iana"
  },
  "application/vnd.cups-postscript": {
    "source": "iana"
  },
  "application/vnd.cups-ppd": {
    "source": "iana",
    "extensions": ["ppd"]
  },
  "application/vnd.cups-raster": {
    "source": "iana"
  },
  "application/vnd.cups-raw": {
    "source": "iana"
  },
  "application/vnd.curl": {
    "source": "iana"
  },
  "application/vnd.curl.car": {
    "source": "apache",
    "extensions": ["car"]
  },
  "application/vnd.curl.pcurl": {
    "source": "apache",
    "extensions": ["pcurl"]
  },
  "application/vnd.cyan.dean.root+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.cybank": {
    "source": "iana"
  },
  "application/vnd.cyclonedx+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.cyclonedx+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.d2l.coursepackage1p0+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.d3m-dataset": {
    "source": "iana"
  },
  "application/vnd.d3m-problem": {
    "source": "iana"
  },
  "application/vnd.dart": {
    "source": "iana",
    "compressible": true,
    "extensions": ["dart"]
  },
  "application/vnd.data-vision.rdz": {
    "source": "iana",
    "extensions": ["rdz"]
  },
  "application/vnd.datapackage+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dataresource+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dbf": {
    "source": "iana",
    "extensions": ["dbf"]
  },
  "application/vnd.debian.binary-package": {
    "source": "iana"
  },
  "application/vnd.dece.data": {
    "source": "iana",
    "extensions": ["uvf","uvvf","uvd","uvvd"]
  },
  "application/vnd.dece.ttml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["uvt","uvvt"]
  },
  "application/vnd.dece.unspecified": {
    "source": "iana",
    "extensions": ["uvx","uvvx"]
  },
  "application/vnd.dece.zip": {
    "source": "iana",
    "extensions": ["uvz","uvvz"]
  },
  "application/vnd.denovo.fcselayout-link": {
    "source": "iana",
    "extensions": ["fe_launch"]
  },
  "application/vnd.desmume.movie": {
    "source": "iana"
  },
  "application/vnd.dir-bi.plate-dl-nosuffix": {
    "source": "iana"
  },
  "application/vnd.dm.delegation+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dna": {
    "source": "iana",
    "extensions": ["dna"]
  },
  "application/vnd.document+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dolby.mlp": {
    "source": "apache",
    "extensions": ["mlp"]
  },
  "application/vnd.dolby.mobile.1": {
    "source": "iana"
  },
  "application/vnd.dolby.mobile.2": {
    "source": "iana"
  },
  "application/vnd.doremir.scorecloud-binary-document": {
    "source": "iana"
  },
  "application/vnd.dpgraph": {
    "source": "iana",
    "extensions": ["dpg"]
  },
  "application/vnd.dreamfactory": {
    "source": "iana",
    "extensions": ["dfac"]
  },
  "application/vnd.drive+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ds-keypoint": {
    "source": "apache",
    "extensions": ["kpxx"]
  },
  "application/vnd.dtg.local": {
    "source": "iana"
  },
  "application/vnd.dtg.local.flash": {
    "source": "iana"
  },
  "application/vnd.dtg.local.html": {
    "source": "iana"
  },
  "application/vnd.dvb.ait": {
    "source": "iana",
    "extensions": ["ait"]
  },
  "application/vnd.dvb.dvbisl+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dvb.dvbj": {
    "source": "iana"
  },
  "application/vnd.dvb.esgcontainer": {
    "source": "iana"
  },
  "application/vnd.dvb.ipdcdftnotifaccess": {
    "source": "iana"
  },
  "application/vnd.dvb.ipdcesgaccess": {
    "source": "iana"
  },
  "application/vnd.dvb.ipdcesgaccess2": {
    "source": "iana"
  },
  "application/vnd.dvb.ipdcesgpdd": {
    "source": "iana"
  },
  "application/vnd.dvb.ipdcroaming": {
    "source": "iana"
  },
  "application/vnd.dvb.iptv.alfec-base": {
    "source": "iana"
  },
  "application/vnd.dvb.iptv.alfec-enhancement": {
    "source": "iana"
  },
  "application/vnd.dvb.notif-aggregate-root+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dvb.notif-container+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dvb.notif-generic+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dvb.notif-ia-msglist+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dvb.notif-ia-registration-request+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dvb.notif-ia-registration-response+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dvb.notif-init+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dvb.pfr": {
    "source": "iana"
  },
  "application/vnd.dvb.service": {
    "source": "iana",
    "extensions": ["svc"]
  },
  "application/vnd.dxr": {
    "source": "iana"
  },
  "application/vnd.dynageo": {
    "source": "iana",
    "extensions": ["geo"]
  },
  "application/vnd.dzr": {
    "source": "iana"
  },
  "application/vnd.easykaraoke.cdgdownload": {
    "source": "iana"
  },
  "application/vnd.ecdis-update": {
    "source": "iana"
  },
  "application/vnd.ecip.rlp": {
    "source": "iana"
  },
  "application/vnd.eclipse.ditto+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ecowin.chart": {
    "source": "iana",
    "extensions": ["mag"]
  },
  "application/vnd.ecowin.filerequest": {
    "source": "iana"
  },
  "application/vnd.ecowin.fileupdate": {
    "source": "iana"
  },
  "application/vnd.ecowin.series": {
    "source": "iana"
  },
  "application/vnd.ecowin.seriesrequest": {
    "source": "iana"
  },
  "application/vnd.ecowin.seriesupdate": {
    "source": "iana"
  },
  "application/vnd.efi.img": {
    "source": "iana"
  },
  "application/vnd.efi.iso": {
    "source": "iana"
  },
  "application/vnd.emclient.accessrequest+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.enliven": {
    "source": "iana",
    "extensions": ["nml"]
  },
  "application/vnd.enphase.envoy": {
    "source": "iana"
  },
  "application/vnd.eprints.data+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.epson.esf": {
    "source": "iana",
    "extensions": ["esf"]
  },
  "application/vnd.epson.msf": {
    "source": "iana",
    "extensions": ["msf"]
  },
  "application/vnd.epson.quickanime": {
    "source": "iana",
    "extensions": ["qam"]
  },
  "application/vnd.epson.salt": {
    "source": "iana",
    "extensions": ["slt"]
  },
  "application/vnd.epson.ssf": {
    "source": "iana",
    "extensions": ["ssf"]
  },
  "application/vnd.ericsson.quickcall": {
    "source": "iana"
  },
  "application/vnd.espass-espass+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.eszigno3+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["es3","et3"]
  },
  "application/vnd.etsi.aoc+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.asic-e+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.etsi.asic-s+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.etsi.cug+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.iptvcommand+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.iptvdiscovery+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.iptvprofile+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.iptvsad-bc+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.iptvsad-cod+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.iptvsad-npvr+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.iptvservice+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.iptvsync+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.iptvueprofile+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.mcid+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.mheg5": {
    "source": "iana"
  },
  "application/vnd.etsi.overload-control-policy-dataset+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.pstn+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.sci+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.simservs+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.timestamp-token": {
    "source": "iana"
  },
  "application/vnd.etsi.tsl+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.tsl.der": {
    "source": "iana"
  },
  "application/vnd.eu.kasparian.car+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.eudora.data": {
    "source": "iana"
  },
  "application/vnd.evolv.ecig.profile": {
    "source": "iana"
  },
  "application/vnd.evolv.ecig.settings": {
    "source": "iana"
  },
  "application/vnd.evolv.ecig.theme": {
    "source": "iana"
  },
  "application/vnd.exstream-empower+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.exstream-package": {
    "source": "iana"
  },
  "application/vnd.ezpix-album": {
    "source": "iana",
    "extensions": ["ez2"]
  },
  "application/vnd.ezpix-package": {
    "source": "iana",
    "extensions": ["ez3"]
  },
  "application/vnd.f-secure.mobile": {
    "source": "iana"
  },
  "application/vnd.familysearch.gedcom+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.fastcopy-disk-image": {
    "source": "iana"
  },
  "application/vnd.fdf": {
    "source": "iana",
    "extensions": ["fdf"]
  },
  "application/vnd.fdsn.mseed": {
    "source": "iana",
    "extensions": ["mseed"]
  },
  "application/vnd.fdsn.seed": {
    "source": "iana",
    "extensions": ["seed","dataless"]
  },
  "application/vnd.ffsns": {
    "source": "iana"
  },
  "application/vnd.ficlab.flb+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.filmit.zfc": {
    "source": "iana"
  },
  "application/vnd.fints": {
    "source": "iana"
  },
  "application/vnd.firemonkeys.cloudcell": {
    "source": "iana"
  },
  "application/vnd.flographit": {
    "source": "iana",
    "extensions": ["gph"]
  },
  "application/vnd.fluxtime.clip": {
    "source": "iana",
    "extensions": ["ftc"]
  },
  "application/vnd.font-fontforge-sfd": {
    "source": "iana"
  },
  "application/vnd.framemaker": {
    "source": "iana",
    "extensions": ["fm","frame","maker","book"]
  },
  "application/vnd.frogans.fnc": {
    "source": "iana",
    "extensions": ["fnc"]
  },
  "application/vnd.frogans.ltf": {
    "source": "iana",
    "extensions": ["ltf"]
  },
  "application/vnd.fsc.weblaunch": {
    "source": "iana",
    "extensions": ["fsc"]
  },
  "application/vnd.fujifilm.fb.docuworks": {
    "source": "iana"
  },
  "application/vnd.fujifilm.fb.docuworks.binder": {
    "source": "iana"
  },
  "application/vnd.fujifilm.fb.docuworks.container": {
    "source": "iana"
  },
  "application/vnd.fujifilm.fb.jfi+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.fujitsu.oasys": {
    "source": "iana",
    "extensions": ["oas"]
  },
  "application/vnd.fujitsu.oasys2": {
    "source": "iana",
    "extensions": ["oa2"]
  },
  "application/vnd.fujitsu.oasys3": {
    "source": "iana",
    "extensions": ["oa3"]
  },
  "application/vnd.fujitsu.oasysgp": {
    "source": "iana",
    "extensions": ["fg5"]
  },
  "application/vnd.fujitsu.oasysprs": {
    "source": "iana",
    "extensions": ["bh2"]
  },
  "application/vnd.fujixerox.art-ex": {
    "source": "iana"
  },
  "application/vnd.fujixerox.art4": {
    "source": "iana"
  },
  "application/vnd.fujixerox.ddd": {
    "source": "iana",
    "extensions": ["ddd"]
  },
  "application/vnd.fujixerox.docuworks": {
    "source": "iana",
    "extensions": ["xdw"]
  },
  "application/vnd.fujixerox.docuworks.binder": {
    "source": "iana",
    "extensions": ["xbd"]
  },
  "application/vnd.fujixerox.docuworks.container": {
    "source": "iana"
  },
  "application/vnd.fujixerox.hbpl": {
    "source": "iana"
  },
  "application/vnd.fut-misnet": {
    "source": "iana"
  },
  "application/vnd.futoin+cbor": {
    "source": "iana"
  },
  "application/vnd.futoin+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.fuzzysheet": {
    "source": "iana",
    "extensions": ["fzs"]
  },
  "application/vnd.genomatix.tuxedo": {
    "source": "iana",
    "extensions": ["txd"]
  },
  "application/vnd.gentics.grd+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.geo+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.geocube+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.geogebra.file": {
    "source": "iana",
    "extensions": ["ggb"]
  },
  "application/vnd.geogebra.slides": {
    "source": "iana"
  },
  "application/vnd.geogebra.tool": {
    "source": "iana",
    "extensions": ["ggt"]
  },
  "application/vnd.geometry-explorer": {
    "source": "iana",
    "extensions": ["gex","gre"]
  },
  "application/vnd.geonext": {
    "source": "iana",
    "extensions": ["gxt"]
  },
  "application/vnd.geoplan": {
    "source": "iana",
    "extensions": ["g2w"]
  },
  "application/vnd.geospace": {
    "source": "iana",
    "extensions": ["g3w"]
  },
  "application/vnd.gerber": {
    "source": "iana"
  },
  "application/vnd.globalplatform.card-content-mgt": {
    "source": "iana"
  },
  "application/vnd.globalplatform.card-content-mgt-response": {
    "source": "iana"
  },
  "application/vnd.gmx": {
    "source": "iana",
    "extensions": ["gmx"]
  },
  "application/vnd.google-apps.document": {
    "compressible": false,
    "extensions": ["gdoc"]
  },
  "application/vnd.google-apps.presentation": {
    "compressible": false,
    "extensions": ["gslides"]
  },
  "application/vnd.google-apps.spreadsheet": {
    "compressible": false,
    "extensions": ["gsheet"]
  },
  "application/vnd.google-earth.kml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["kml"]
  },
  "application/vnd.google-earth.kmz": {
    "source": "iana",
    "compressible": false,
    "extensions": ["kmz"]
  },
  "application/vnd.gov.sk.e-form+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.gov.sk.e-form+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.gov.sk.xmldatacontainer+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.grafeq": {
    "source": "iana",
    "extensions": ["gqf","gqs"]
  },
  "application/vnd.gridmp": {
    "source": "iana"
  },
  "application/vnd.groove-account": {
    "source": "iana",
    "extensions": ["gac"]
  },
  "application/vnd.groove-help": {
    "source": "iana",
    "extensions": ["ghf"]
  },
  "application/vnd.groove-identity-message": {
    "source": "iana",
    "extensions": ["gim"]
  },
  "application/vnd.groove-injector": {
    "source": "iana",
    "extensions": ["grv"]
  },
  "application/vnd.groove-tool-message": {
    "source": "iana",
    "extensions": ["gtm"]
  },
  "application/vnd.groove-tool-template": {
    "source": "iana",
    "extensions": ["tpl"]
  },
  "application/vnd.groove-vcard": {
    "source": "iana",
    "extensions": ["vcg"]
  },
  "application/vnd.hal+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.hal+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["hal"]
  },
  "application/vnd.handheld-entertainment+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["zmm"]
  },
  "application/vnd.hbci": {
    "source": "iana",
    "extensions": ["hbci"]
  },
  "application/vnd.hc+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.hcl-bireports": {
    "source": "iana"
  },
  "application/vnd.hdt": {
    "source": "iana"
  },
  "application/vnd.heroku+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.hhe.lesson-player": {
    "source": "iana",
    "extensions": ["les"]
  },
  "application/vnd.hl7cda+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/vnd.hl7v2+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/vnd.hp-hpgl": {
    "source": "iana",
    "extensions": ["hpgl"]
  },
  "application/vnd.hp-hpid": {
    "source": "iana",
    "extensions": ["hpid"]
  },
  "application/vnd.hp-hps": {
    "source": "iana",
    "extensions": ["hps"]
  },
  "application/vnd.hp-jlyt": {
    "source": "iana",
    "extensions": ["jlt"]
  },
  "application/vnd.hp-pcl": {
    "source": "iana",
    "extensions": ["pcl"]
  },
  "application/vnd.hp-pclxl": {
    "source": "iana",
    "extensions": ["pclxl"]
  },
  "application/vnd.httphone": {
    "source": "iana"
  },
  "application/vnd.hydrostatix.sof-data": {
    "source": "iana",
    "extensions": ["sfd-hdstx"]
  },
  "application/vnd.hyper+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.hyper-item+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.hyperdrive+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.hzn-3d-crossword": {
    "source": "iana"
  },
  "application/vnd.ibm.afplinedata": {
    "source": "iana"
  },
  "application/vnd.ibm.electronic-media": {
    "source": "iana"
  },
  "application/vnd.ibm.minipay": {
    "source": "iana",
    "extensions": ["mpy"]
  },
  "application/vnd.ibm.modcap": {
    "source": "iana",
    "extensions": ["afp","listafp","list3820"]
  },
  "application/vnd.ibm.rights-management": {
    "source": "iana",
    "extensions": ["irm"]
  },
  "application/vnd.ibm.secure-container": {
    "source": "iana",
    "extensions": ["sc"]
  },
  "application/vnd.iccprofile": {
    "source": "iana",
    "extensions": ["icc","icm"]
  },
  "application/vnd.ieee.1905": {
    "source": "iana"
  },
  "application/vnd.igloader": {
    "source": "iana",
    "extensions": ["igl"]
  },
  "application/vnd.imagemeter.folder+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.imagemeter.image+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.immervision-ivp": {
    "source": "iana",
    "extensions": ["ivp"]
  },
  "application/vnd.immervision-ivu": {
    "source": "iana",
    "extensions": ["ivu"]
  },
  "application/vnd.ims.imsccv1p1": {
    "source": "iana"
  },
  "application/vnd.ims.imsccv1p2": {
    "source": "iana"
  },
  "application/vnd.ims.imsccv1p3": {
    "source": "iana"
  },
  "application/vnd.ims.lis.v2.result+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ims.lti.v2.toolconsumerprofile+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ims.lti.v2.toolproxy+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ims.lti.v2.toolproxy.id+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ims.lti.v2.toolsettings+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ims.lti.v2.toolsettings.simple+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.informedcontrol.rms+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.informix-visionary": {
    "source": "iana"
  },
  "application/vnd.infotech.project": {
    "source": "iana"
  },
  "application/vnd.infotech.project+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.innopath.wamp.notification": {
    "source": "iana"
  },
  "application/vnd.insors.igm": {
    "source": "iana",
    "extensions": ["igm"]
  },
  "application/vnd.intercon.formnet": {
    "source": "iana",
    "extensions": ["xpw","xpx"]
  },
  "application/vnd.intergeo": {
    "source": "iana",
    "extensions": ["i2g"]
  },
  "application/vnd.intertrust.digibox": {
    "source": "iana"
  },
  "application/vnd.intertrust.nncp": {
    "source": "iana"
  },
  "application/vnd.intu.qbo": {
    "source": "iana",
    "extensions": ["qbo"]
  },
  "application/vnd.intu.qfx": {
    "source": "iana",
    "extensions": ["qfx"]
  },
  "application/vnd.iptc.g2.catalogitem+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.iptc.g2.conceptitem+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.iptc.g2.knowledgeitem+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.iptc.g2.newsitem+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.iptc.g2.newsmessage+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.iptc.g2.packageitem+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.iptc.g2.planningitem+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ipunplugged.rcprofile": {
    "source": "iana",
    "extensions": ["rcprofile"]
  },
  "application/vnd.irepository.package+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["irp"]
  },
  "application/vnd.is-xpr": {
    "source": "iana",
    "extensions": ["xpr"]
  },
  "application/vnd.isac.fcs": {
    "source": "iana",
    "extensions": ["fcs"]
  },
  "application/vnd.iso11783-10+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.jam": {
    "source": "iana",
    "extensions": ["jam"]
  },
  "application/vnd.japannet-directory-service": {
    "source": "iana"
  },
  "application/vnd.japannet-jpnstore-wakeup": {
    "source": "iana"
  },
  "application/vnd.japannet-payment-wakeup": {
    "source": "iana"
  },
  "application/vnd.japannet-registration": {
    "source": "iana"
  },
  "application/vnd.japannet-registration-wakeup": {
    "source": "iana"
  },
  "application/vnd.japannet-setstore-wakeup": {
    "source": "iana"
  },
  "application/vnd.japannet-verification": {
    "source": "iana"
  },
  "application/vnd.japannet-verification-wakeup": {
    "source": "iana"
  },
  "application/vnd.jcp.javame.midlet-rms": {
    "source": "iana",
    "extensions": ["rms"]
  },
  "application/vnd.jisp": {
    "source": "iana",
    "extensions": ["jisp"]
  },
  "application/vnd.joost.joda-archive": {
    "source": "iana",
    "extensions": ["joda"]
  },
  "application/vnd.jsk.isdn-ngn": {
    "source": "iana"
  },
  "application/vnd.kahootz": {
    "source": "iana",
    "extensions": ["ktz","ktr"]
  },
  "application/vnd.kde.karbon": {
    "source": "iana",
    "extensions": ["karbon"]
  },
  "application/vnd.kde.kchart": {
    "source": "iana",
    "extensions": ["chrt"]
  },
  "application/vnd.kde.kformula": {
    "source": "iana",
    "extensions": ["kfo"]
  },
  "application/vnd.kde.kivio": {
    "source": "iana",
    "extensions": ["flw"]
  },
  "application/vnd.kde.kontour": {
    "source": "iana",
    "extensions": ["kon"]
  },
  "application/vnd.kde.kpresenter": {
    "source": "iana",
    "extensions": ["kpr","kpt"]
  },
  "application/vnd.kde.kspread": {
    "source": "iana",
    "extensions": ["ksp"]
  },
  "application/vnd.kde.kword": {
    "source": "iana",
    "extensions": ["kwd","kwt"]
  },
  "application/vnd.kenameaapp": {
    "source": "iana",
    "extensions": ["htke"]
  },
  "application/vnd.kidspiration": {
    "source": "iana",
    "extensions": ["kia"]
  },
  "application/vnd.kinar": {
    "source": "iana",
    "extensions": ["kne","knp"]
  },
  "application/vnd.koan": {
    "source": "iana",
    "extensions": ["skp","skd","skt","skm"]
  },
  "application/vnd.kodak-descriptor": {
    "source": "iana",
    "extensions": ["sse"]
  },
  "application/vnd.las": {
    "source": "iana"
  },
  "application/vnd.las.las+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.las.las+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["lasxml"]
  },
  "application/vnd.laszip": {
    "source": "iana"
  },
  "application/vnd.leap+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.liberty-request+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.llamagraphics.life-balance.desktop": {
    "source": "iana",
    "extensions": ["lbd"]
  },
  "application/vnd.llamagraphics.life-balance.exchange+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["lbe"]
  },
  "application/vnd.logipipe.circuit+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.loom": {
    "source": "iana"
  },
  "application/vnd.lotus-1-2-3": {
    "source": "iana",
    "extensions": ["123"]
  },
  "application/vnd.lotus-approach": {
    "source": "iana",
    "extensions": ["apr"]
  },
  "application/vnd.lotus-freelance": {
    "source": "iana",
    "extensions": ["pre"]
  },
  "application/vnd.lotus-notes": {
    "source": "iana",
    "extensions": ["nsf"]
  },
  "application/vnd.lotus-organizer": {
    "source": "iana",
    "extensions": ["org"]
  },
  "application/vnd.lotus-screencam": {
    "source": "iana",
    "extensions": ["scm"]
  },
  "application/vnd.lotus-wordpro": {
    "source": "iana",
    "extensions": ["lwp"]
  },
  "application/vnd.macports.portpkg": {
    "source": "iana",
    "extensions": ["portpkg"]
  },
  "application/vnd.mapbox-vector-tile": {
    "source": "iana",
    "extensions": ["mvt"]
  },
  "application/vnd.marlin.drm.actiontoken+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.marlin.drm.conftoken+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.marlin.drm.license+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.marlin.drm.mdcf": {
    "source": "iana"
  },
  "application/vnd.mason+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.maxar.archive.3tz+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.maxmind.maxmind-db": {
    "source": "iana"
  },
  "application/vnd.mcd": {
    "source": "iana",
    "extensions": ["mcd"]
  },
  "application/vnd.medcalcdata": {
    "source": "iana",
    "extensions": ["mc1"]
  },
  "application/vnd.mediastation.cdkey": {
    "source": "iana",
    "extensions": ["cdkey"]
  },
  "application/vnd.meridian-slingshot": {
    "source": "iana"
  },
  "application/vnd.mfer": {
    "source": "iana",
    "extensions": ["mwf"]
  },
  "application/vnd.mfmp": {
    "source": "iana",
    "extensions": ["mfm"]
  },
  "application/vnd.micro+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.micrografx.flo": {
    "source": "iana",
    "extensions": ["flo"]
  },
  "application/vnd.micrografx.igx": {
    "source": "iana",
    "extensions": ["igx"]
  },
  "application/vnd.microsoft.portable-executable": {
    "source": "iana"
  },
  "application/vnd.microsoft.windows.thumbnail-cache": {
    "source": "iana"
  },
  "application/vnd.miele+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.mif": {
    "source": "iana",
    "extensions": ["mif"]
  },
  "application/vnd.minisoft-hp3000-save": {
    "source": "iana"
  },
  "application/vnd.mitsubishi.misty-guard.trustweb": {
    "source": "iana"
  },
  "application/vnd.mobius.daf": {
    "source": "iana",
    "extensions": ["daf"]
  },
  "application/vnd.mobius.dis": {
    "source": "iana",
    "extensions": ["dis"]
  },
  "application/vnd.mobius.mbk": {
    "source": "iana",
    "extensions": ["mbk"]
  },
  "application/vnd.mobius.mqy": {
    "source": "iana",
    "extensions": ["mqy"]
  },
  "application/vnd.mobius.msl": {
    "source": "iana",
    "extensions": ["msl"]
  },
  "application/vnd.mobius.plc": {
    "source": "iana",
    "extensions": ["plc"]
  },
  "application/vnd.mobius.txf": {
    "source": "iana",
    "extensions": ["txf"]
  },
  "application/vnd.mophun.application": {
    "source": "iana",
    "extensions": ["mpn"]
  },
  "application/vnd.mophun.certificate": {
    "source": "iana",
    "extensions": ["mpc"]
  },
  "application/vnd.motorola.flexsuite": {
    "source": "iana"
  },
  "application/vnd.motorola.flexsuite.adsi": {
    "source": "iana"
  },
  "application/vnd.motorola.flexsuite.fis": {
    "source": "iana"
  },
  "application/vnd.motorola.flexsuite.gotap": {
    "source": "iana"
  },
  "application/vnd.motorola.flexsuite.kmr": {
    "source": "iana"
  },
  "application/vnd.motorola.flexsuite.ttc": {
    "source": "iana"
  },
  "application/vnd.motorola.flexsuite.wem": {
    "source": "iana"
  },
  "application/vnd.motorola.iprm": {
    "source": "iana"
  },
  "application/vnd.mozilla.xul+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xul"]
  },
  "application/vnd.ms-3mfdocument": {
    "source": "iana"
  },
  "application/vnd.ms-artgalry": {
    "source": "iana",
    "extensions": ["cil"]
  },
  "application/vnd.ms-asf": {
    "source": "iana"
  },
  "application/vnd.ms-cab-compressed": {
    "source": "iana",
    "extensions": ["cab"]
  },
  "application/vnd.ms-color.iccprofile": {
    "source": "apache"
  },
  "application/vnd.ms-excel": {
    "source": "iana",
    "compressible": false,
    "extensions": ["xls","xlm","xla","xlc","xlt","xlw"]
  },
  "application/vnd.ms-excel.addin.macroenabled.12": {
    "source": "iana",
    "extensions": ["xlam"]
  },
  "application/vnd.ms-excel.sheet.binary.macroenabled.12": {
    "source": "iana",
    "extensions": ["xlsb"]
  },
  "application/vnd.ms-excel.sheet.macroenabled.12": {
    "source": "iana",
    "extensions": ["xlsm"]
  },
  "application/vnd.ms-excel.template.macroenabled.12": {
    "source": "iana",
    "extensions": ["xltm"]
  },
  "application/vnd.ms-fontobject": {
    "source": "iana",
    "compressible": true,
    "extensions": ["eot"]
  },
  "application/vnd.ms-htmlhelp": {
    "source": "iana",
    "extensions": ["chm"]
  },
  "application/vnd.ms-ims": {
    "source": "iana",
    "extensions": ["ims"]
  },
  "application/vnd.ms-lrm": {
    "source": "iana",
    "extensions": ["lrm"]
  },
  "application/vnd.ms-office.activex+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ms-officetheme": {
    "source": "iana",
    "extensions": ["thmx"]
  },
  "application/vnd.ms-opentype": {
    "source": "apache",
    "compressible": true
  },
  "application/vnd.ms-outlook": {
    "compressible": false,
    "extensions": ["msg"]
  },
  "application/vnd.ms-package.obfuscated-opentype": {
    "source": "apache"
  },
  "application/vnd.ms-pki.seccat": {
    "source": "apache",
    "extensions": ["cat"]
  },
  "application/vnd.ms-pki.stl": {
    "source": "apache",
    "extensions": ["stl"]
  },
  "application/vnd.ms-playready.initiator+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ms-powerpoint": {
    "source": "iana",
    "compressible": false,
    "extensions": ["ppt","pps","pot"]
  },
  "application/vnd.ms-powerpoint.addin.macroenabled.12": {
    "source": "iana",
    "extensions": ["ppam"]
  },
  "application/vnd.ms-powerpoint.presentation.macroenabled.12": {
    "source": "iana",
    "extensions": ["pptm"]
  },
  "application/vnd.ms-powerpoint.slide.macroenabled.12": {
    "source": "iana",
    "extensions": ["sldm"]
  },
  "application/vnd.ms-powerpoint.slideshow.macroenabled.12": {
    "source": "iana",
    "extensions": ["ppsm"]
  },
  "application/vnd.ms-powerpoint.template.macroenabled.12": {
    "source": "iana",
    "extensions": ["potm"]
  },
  "application/vnd.ms-printdevicecapabilities+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ms-printing.printticket+xml": {
    "source": "apache",
    "compressible": true
  },
  "application/vnd.ms-printschematicket+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ms-project": {
    "source": "iana",
    "extensions": ["mpp","mpt"]
  },
  "application/vnd.ms-tnef": {
    "source": "iana"
  },
  "application/vnd.ms-windows.devicepairing": {
    "source": "iana"
  },
  "application/vnd.ms-windows.nwprinting.oob": {
    "source": "iana"
  },
  "application/vnd.ms-windows.printerpairing": {
    "source": "iana"
  },
  "application/vnd.ms-windows.wsd.oob": {
    "source": "iana"
  },
  "application/vnd.ms-wmdrm.lic-chlg-req": {
    "source": "iana"
  },
  "application/vnd.ms-wmdrm.lic-resp": {
    "source": "iana"
  },
  "application/vnd.ms-wmdrm.meter-chlg-req": {
    "source": "iana"
  },
  "application/vnd.ms-wmdrm.meter-resp": {
    "source": "iana"
  },
  "application/vnd.ms-word.document.macroenabled.12": {
    "source": "iana",
    "extensions": ["docm"]
  },
  "application/vnd.ms-word.template.macroenabled.12": {
    "source": "iana",
    "extensions": ["dotm"]
  },
  "application/vnd.ms-works": {
    "source": "iana",
    "extensions": ["wps","wks","wcm","wdb"]
  },
  "application/vnd.ms-wpl": {
    "source": "iana",
    "extensions": ["wpl"]
  },
  "application/vnd.ms-xpsdocument": {
    "source": "iana",
    "compressible": false,
    "extensions": ["xps"]
  },
  "application/vnd.msa-disk-image": {
    "source": "iana"
  },
  "application/vnd.mseq": {
    "source": "iana",
    "extensions": ["mseq"]
  },
  "application/vnd.msign": {
    "source": "iana"
  },
  "application/vnd.multiad.creator": {
    "source": "iana"
  },
  "application/vnd.multiad.creator.cif": {
    "source": "iana"
  },
  "application/vnd.music-niff": {
    "source": "iana"
  },
  "application/vnd.musician": {
    "source": "iana",
    "extensions": ["mus"]
  },
  "application/vnd.muvee.style": {
    "source": "iana",
    "extensions": ["msty"]
  },
  "application/vnd.mynfc": {
    "source": "iana",
    "extensions": ["taglet"]
  },
  "application/vnd.nacamar.ybrid+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ncd.control": {
    "source": "iana"
  },
  "application/vnd.ncd.reference": {
    "source": "iana"
  },
  "application/vnd.nearst.inv+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.nebumind.line": {
    "source": "iana"
  },
  "application/vnd.nervana": {
    "source": "iana"
  },
  "application/vnd.netfpx": {
    "source": "iana"
  },
  "application/vnd.neurolanguage.nlu": {
    "source": "iana",
    "extensions": ["nlu"]
  },
  "application/vnd.nimn": {
    "source": "iana"
  },
  "application/vnd.nintendo.nitro.rom": {
    "source": "iana"
  },
  "application/vnd.nintendo.snes.rom": {
    "source": "iana"
  },
  "application/vnd.nitf": {
    "source": "iana",
    "extensions": ["ntf","nitf"]
  },
  "application/vnd.noblenet-directory": {
    "source": "iana",
    "extensions": ["nnd"]
  },
  "application/vnd.noblenet-sealer": {
    "source": "iana",
    "extensions": ["nns"]
  },
  "application/vnd.noblenet-web": {
    "source": "iana",
    "extensions": ["nnw"]
  },
  "application/vnd.nokia.catalogs": {
    "source": "iana"
  },
  "application/vnd.nokia.conml+wbxml": {
    "source": "iana"
  },
  "application/vnd.nokia.conml+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.nokia.iptv.config+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.nokia.isds-radio-presets": {
    "source": "iana"
  },
  "application/vnd.nokia.landmark+wbxml": {
    "source": "iana"
  },
  "application/vnd.nokia.landmark+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.nokia.landmarkcollection+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.nokia.n-gage.ac+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["ac"]
  },
  "application/vnd.nokia.n-gage.data": {
    "source": "iana",
    "extensions": ["ngdat"]
  },
  "application/vnd.nokia.n-gage.symbian.install": {
    "source": "iana",
    "extensions": ["n-gage"]
  },
  "application/vnd.nokia.ncd": {
    "source": "iana"
  },
  "application/vnd.nokia.pcd+wbxml": {
    "source": "iana"
  },
  "application/vnd.nokia.pcd+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.nokia.radio-preset": {
    "source": "iana",
    "extensions": ["rpst"]
  },
  "application/vnd.nokia.radio-presets": {
    "source": "iana",
    "extensions": ["rpss"]
  },
  "application/vnd.novadigm.edm": {
    "source": "iana",
    "extensions": ["edm"]
  },
  "application/vnd.novadigm.edx": {
    "source": "iana",
    "extensions": ["edx"]
  },
  "application/vnd.novadigm.ext": {
    "source": "iana",
    "extensions": ["ext"]
  },
  "application/vnd.ntt-local.content-share": {
    "source": "iana"
  },
  "application/vnd.ntt-local.file-transfer": {
    "source": "iana"
  },
  "application/vnd.ntt-local.ogw_remote-access": {
    "source": "iana"
  },
  "application/vnd.ntt-local.sip-ta_remote": {
    "source": "iana"
  },
  "application/vnd.ntt-local.sip-ta_tcp_stream": {
    "source": "iana"
  },
  "application/vnd.oasis.opendocument.chart": {
    "source": "iana",
    "extensions": ["odc"]
  },
  "application/vnd.oasis.opendocument.chart-template": {
    "source": "iana",
    "extensions": ["otc"]
  },
  "application/vnd.oasis.opendocument.database": {
    "source": "iana",
    "extensions": ["odb"]
  },
  "application/vnd.oasis.opendocument.formula": {
    "source": "iana",
    "extensions": ["odf"]
  },
  "application/vnd.oasis.opendocument.formula-template": {
    "source": "iana",
    "extensions": ["odft"]
  },
  "application/vnd.oasis.opendocument.graphics": {
    "source": "iana",
    "compressible": false,
    "extensions": ["odg"]
  },
  "application/vnd.oasis.opendocument.graphics-template": {
    "source": "iana",
    "extensions": ["otg"]
  },
  "application/vnd.oasis.opendocument.image": {
    "source": "iana",
    "extensions": ["odi"]
  },
  "application/vnd.oasis.opendocument.image-template": {
    "source": "iana",
    "extensions": ["oti"]
  },
  "application/vnd.oasis.opendocument.presentation": {
    "source": "iana",
    "compressible": false,
    "extensions": ["odp"]
  },
  "application/vnd.oasis.opendocument.presentation-template": {
    "source": "iana",
    "extensions": ["otp"]
  },
  "application/vnd.oasis.opendocument.spreadsheet": {
    "source": "iana",
    "compressible": false,
    "extensions": ["ods"]
  },
  "application/vnd.oasis.opendocument.spreadsheet-template": {
    "source": "iana",
    "extensions": ["ots"]
  },
  "application/vnd.oasis.opendocument.text": {
    "source": "iana",
    "compressible": false,
    "extensions": ["odt"]
  },
  "application/vnd.oasis.opendocument.text-master": {
    "source": "iana",
    "extensions": ["odm"]
  },
  "application/vnd.oasis.opendocument.text-template": {
    "source": "iana",
    "extensions": ["ott"]
  },
  "application/vnd.oasis.opendocument.text-web": {
    "source": "iana",
    "extensions": ["oth"]
  },
  "application/vnd.obn": {
    "source": "iana"
  },
  "application/vnd.ocf+cbor": {
    "source": "iana"
  },
  "application/vnd.oci.image.manifest.v1+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oftn.l10n+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oipf.contentaccessdownload+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oipf.contentaccessstreaming+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oipf.cspg-hexbinary": {
    "source": "iana"
  },
  "application/vnd.oipf.dae.svg+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oipf.dae.xhtml+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oipf.mippvcontrolmessage+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oipf.pae.gem": {
    "source": "iana"
  },
  "application/vnd.oipf.spdiscovery+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oipf.spdlist+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oipf.ueprofile+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oipf.userprofile+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.olpc-sugar": {
    "source": "iana",
    "extensions": ["xo"]
  },
  "application/vnd.oma-scws-config": {
    "source": "iana"
  },
  "application/vnd.oma-scws-http-request": {
    "source": "iana"
  },
  "application/vnd.oma-scws-http-response": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.associated-procedure-parameter+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.bcast.drm-trigger+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.bcast.imd+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.bcast.ltkm": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.notification+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.bcast.provisioningtrigger": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.sgboot": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.sgdd+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.bcast.sgdu": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.simple-symbol-container": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.smartcard-trigger+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.bcast.sprov+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.bcast.stkm": {
    "source": "iana"
  },
  "application/vnd.oma.cab-address-book+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.cab-feature-handler+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.cab-pcc+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.cab-subs-invite+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.cab-user-prefs+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.dcd": {
    "source": "iana"
  },
  "application/vnd.oma.dcdc": {
    "source": "iana"
  },
  "application/vnd.oma.dd2+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["dd2"]
  },
  "application/vnd.oma.drm.risd+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.group-usage-list+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.lwm2m+cbor": {
    "source": "iana"
  },
  "application/vnd.oma.lwm2m+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.lwm2m+tlv": {
    "source": "iana"
  },
  "application/vnd.oma.pal+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.poc.detailed-progress-report+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.poc.final-report+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.poc.groups+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.poc.invocation-descriptor+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.poc.optimized-progress-report+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.push": {
    "source": "iana"
  },
  "application/vnd.oma.scidm.messages+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.xcap-directory+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.omads-email+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/vnd.omads-file+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/vnd.omads-folder+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/vnd.omaloc-supl-init": {
    "source": "iana"
  },
  "application/vnd.onepager": {
    "source": "iana"
  },
  "application/vnd.onepagertamp": {
    "source": "iana"
  },
  "application/vnd.onepagertamx": {
    "source": "iana"
  },
  "application/vnd.onepagertat": {
    "source": "iana"
  },
  "application/vnd.onepagertatp": {
    "source": "iana"
  },
  "application/vnd.onepagertatx": {
    "source": "iana"
  },
  "application/vnd.openblox.game+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["obgx"]
  },
  "application/vnd.openblox.game-binary": {
    "source": "iana"
  },
  "application/vnd.openeye.oeb": {
    "source": "iana"
  },
  "application/vnd.openofficeorg.extension": {
    "source": "apache",
    "extensions": ["oxt"]
  },
  "application/vnd.openstreetmap.data+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["osm"]
  },
  "application/vnd.opentimestamps.ots": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.custom-properties+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.customxmlproperties+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.drawing+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.drawingml.chart+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.extended-properties+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.comments+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.presentation": {
    "source": "iana",
    "compressible": false,
    "extensions": ["pptx"]
  },
  "application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.presprops+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slide": {
    "source": "iana",
    "extensions": ["sldx"]
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slide+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slideshow": {
    "source": "iana",
    "extensions": ["ppsx"]
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.tags+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.template": {
    "source": "iana",
    "extensions": ["potx"]
  },
  "application/vnd.openxmlformats-officedocument.presentationml.template.main+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
    "source": "iana",
    "compressible": false,
    "extensions": ["xlsx"]
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.template": {
    "source": "iana",
    "extensions": ["xltx"]
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.theme+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.themeoverride+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.vmldrawing": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
    "source": "iana",
    "compressible": false,
    "extensions": ["docx"]
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.template": {
    "source": "iana",
    "extensions": ["dotx"]
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-package.core-properties+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-package.relationships+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oracle.resource+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.orange.indata": {
    "source": "iana"
  },
  "application/vnd.osa.netdeploy": {
    "source": "iana"
  },
  "application/vnd.osgeo.mapguide.package": {
    "source": "iana",
    "extensions": ["mgp"]
  },
  "application/vnd.osgi.bundle": {
    "source": "iana"
  },
  "application/vnd.osgi.dp": {
    "source": "iana",
    "extensions": ["dp"]
  },
  "application/vnd.osgi.subsystem": {
    "source": "iana",
    "extensions": ["esa"]
  },
  "application/vnd.otps.ct-kip+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oxli.countgraph": {
    "source": "iana"
  },
  "application/vnd.pagerduty+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.palm": {
    "source": "iana",
    "extensions": ["pdb","pqa","oprc"]
  },
  "application/vnd.panoply": {
    "source": "iana"
  },
  "application/vnd.paos.xml": {
    "source": "iana"
  },
  "application/vnd.patentdive": {
    "source": "iana"
  },
  "application/vnd.patientecommsdoc": {
    "source": "iana"
  },
  "application/vnd.pawaafile": {
    "source": "iana",
    "extensions": ["paw"]
  },
  "application/vnd.pcos": {
    "source": "iana"
  },
  "application/vnd.pg.format": {
    "source": "iana",
    "extensions": ["str"]
  },
  "application/vnd.pg.osasli": {
    "source": "iana",
    "extensions": ["ei6"]
  },
  "application/vnd.piaccess.application-licence": {
    "source": "iana"
  },
  "application/vnd.picsel": {
    "source": "iana",
    "extensions": ["efif"]
  },
  "application/vnd.pmi.widget": {
    "source": "iana",
    "extensions": ["wg"]
  },
  "application/vnd.poc.group-advertisement+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.pocketlearn": {
    "source": "iana",
    "extensions": ["plf"]
  },
  "application/vnd.powerbuilder6": {
    "source": "iana",
    "extensions": ["pbd"]
  },
  "application/vnd.powerbuilder6-s": {
    "source": "iana"
  },
  "application/vnd.powerbuilder7": {
    "source": "iana"
  },
  "application/vnd.powerbuilder7-s": {
    "source": "iana"
  },
  "application/vnd.powerbuilder75": {
    "source": "iana"
  },
  "application/vnd.powerbuilder75-s": {
    "source": "iana"
  },
  "application/vnd.preminet": {
    "source": "iana"
  },
  "application/vnd.previewsystems.box": {
    "source": "iana",
    "extensions": ["box"]
  },
  "application/vnd.proteus.magazine": {
    "source": "iana",
    "extensions": ["mgz"]
  },
  "application/vnd.psfs": {
    "source": "iana"
  },
  "application/vnd.publishare-delta-tree": {
    "source": "iana",
    "extensions": ["qps"]
  },
  "application/vnd.pvi.ptid1": {
    "source": "iana",
    "extensions": ["ptid"]
  },
  "application/vnd.pwg-multiplexed": {
    "source": "iana"
  },
  "application/vnd.pwg-xhtml-print+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.qualcomm.brew-app-res": {
    "source": "iana"
  },
  "application/vnd.quarantainenet": {
    "source": "iana"
  },
  "application/vnd.quark.quarkxpress": {
    "source": "iana",
    "extensions": ["qxd","qxt","qwd","qwt","qxl","qxb"]
  },
  "application/vnd.quobject-quoxdocument": {
    "source": "iana"
  },
  "application/vnd.radisys.moml+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-audit+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-audit-conf+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-audit-conn+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-audit-dialog+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-audit-stream+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-conf+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-dialog+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-dialog-base+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-dialog-fax-detect+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-dialog-fax-sendrecv+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-dialog-group+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-dialog-speech+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-dialog-transform+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.rainstor.data": {
    "source": "iana"
  },
  "application/vnd.rapid": {
    "source": "iana"
  },
  "application/vnd.rar": {
    "source": "iana",
    "extensions": ["rar"]
  },
  "application/vnd.realvnc.bed": {
    "source": "iana",
    "extensions": ["bed"]
  },
  "application/vnd.recordare.musicxml": {
    "source": "iana",
    "extensions": ["mxl"]
  },
  "application/vnd.recordare.musicxml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["musicxml"]
  },
  "application/vnd.renlearn.rlprint": {
    "source": "iana"
  },
  "application/vnd.resilient.logic": {
    "source": "iana"
  },
  "application/vnd.restful+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.rig.cryptonote": {
    "source": "iana",
    "extensions": ["cryptonote"]
  },
  "application/vnd.rim.cod": {
    "source": "apache",
    "extensions": ["cod"]
  },
  "application/vnd.rn-realmedia": {
    "source": "apache",
    "extensions": ["rm"]
  },
  "application/vnd.rn-realmedia-vbr": {
    "source": "apache",
    "extensions": ["rmvb"]
  },
  "application/vnd.route66.link66+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["link66"]
  },
  "application/vnd.rs-274x": {
    "source": "iana"
  },
  "application/vnd.ruckus.download": {
    "source": "iana"
  },
  "application/vnd.s3sms": {
    "source": "iana"
  },
  "application/vnd.sailingtracker.track": {
    "source": "iana",
    "extensions": ["st"]
  },
  "application/vnd.sar": {
    "source": "iana"
  },
  "application/vnd.sbm.cid": {
    "source": "iana"
  },
  "application/vnd.sbm.mid2": {
    "source": "iana"
  },
  "application/vnd.scribus": {
    "source": "iana"
  },
  "application/vnd.sealed.3df": {
    "source": "iana"
  },
  "application/vnd.sealed.csf": {
    "source": "iana"
  },
  "application/vnd.sealed.doc": {
    "source": "iana"
  },
  "application/vnd.sealed.eml": {
    "source": "iana"
  },
  "application/vnd.sealed.mht": {
    "source": "iana"
  },
  "application/vnd.sealed.net": {
    "source": "iana"
  },
  "application/vnd.sealed.ppt": {
    "source": "iana"
  },
  "application/vnd.sealed.tiff": {
    "source": "iana"
  },
  "application/vnd.sealed.xls": {
    "source": "iana"
  },
  "application/vnd.sealedmedia.softseal.html": {
    "source": "iana"
  },
  "application/vnd.sealedmedia.softseal.pdf": {
    "source": "iana"
  },
  "application/vnd.seemail": {
    "source": "iana",
    "extensions": ["see"]
  },
  "application/vnd.seis+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.sema": {
    "source": "iana",
    "extensions": ["sema"]
  },
  "application/vnd.semd": {
    "source": "iana",
    "extensions": ["semd"]
  },
  "application/vnd.semf": {
    "source": "iana",
    "extensions": ["semf"]
  },
  "application/vnd.shade-save-file": {
    "source": "iana"
  },
  "application/vnd.shana.informed.formdata": {
    "source": "iana",
    "extensions": ["ifm"]
  },
  "application/vnd.shana.informed.formtemplate": {
    "source": "iana",
    "extensions": ["itp"]
  },
  "application/vnd.shana.informed.interchange": {
    "source": "iana",
    "extensions": ["iif"]
  },
  "application/vnd.shana.informed.package": {
    "source": "iana",
    "extensions": ["ipk"]
  },
  "application/vnd.shootproof+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.shopkick+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.shp": {
    "source": "iana"
  },
  "application/vnd.shx": {
    "source": "iana"
  },
  "application/vnd.sigrok.session": {
    "source": "iana"
  },
  "application/vnd.simtech-mindmapper": {
    "source": "iana",
    "extensions": ["twd","twds"]
  },
  "application/vnd.siren+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.smaf": {
    "source": "iana",
    "extensions": ["mmf"]
  },
  "application/vnd.smart.notebook": {
    "source": "iana"
  },
  "application/vnd.smart.teacher": {
    "source": "iana",
    "extensions": ["teacher"]
  },
  "application/vnd.snesdev-page-table": {
    "source": "iana"
  },
  "application/vnd.software602.filler.form+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["fo"]
  },
  "application/vnd.software602.filler.form-xml-zip": {
    "source": "iana"
  },
  "application/vnd.solent.sdkm+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["sdkm","sdkd"]
  },
  "application/vnd.spotfire.dxp": {
    "source": "iana",
    "extensions": ["dxp"]
  },
  "application/vnd.spotfire.sfs": {
    "source": "iana",
    "extensions": ["sfs"]
  },
  "application/vnd.sqlite3": {
    "source": "iana"
  },
  "application/vnd.sss-cod": {
    "source": "iana"
  },
  "application/vnd.sss-dtf": {
    "source": "iana"
  },
  "application/vnd.sss-ntf": {
    "source": "iana"
  },
  "application/vnd.stardivision.calc": {
    "source": "apache",
    "extensions": ["sdc"]
  },
  "application/vnd.stardivision.draw": {
    "source": "apache",
    "extensions": ["sda"]
  },
  "application/vnd.stardivision.impress": {
    "source": "apache",
    "extensions": ["sdd"]
  },
  "application/vnd.stardivision.math": {
    "source": "apache",
    "extensions": ["smf"]
  },
  "application/vnd.stardivision.writer": {
    "source": "apache",
    "extensions": ["sdw","vor"]
  },
  "application/vnd.stardivision.writer-global": {
    "source": "apache",
    "extensions": ["sgl"]
  },
  "application/vnd.stepmania.package": {
    "source": "iana",
    "extensions": ["smzip"]
  },
  "application/vnd.stepmania.stepchart": {
    "source": "iana",
    "extensions": ["sm"]
  },
  "application/vnd.street-stream": {
    "source": "iana"
  },
  "application/vnd.sun.wadl+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["wadl"]
  },
  "application/vnd.sun.xml.calc": {
    "source": "apache",
    "extensions": ["sxc"]
  },
  "application/vnd.sun.xml.calc.template": {
    "source": "apache",
    "extensions": ["stc"]
  },
  "application/vnd.sun.xml.draw": {
    "source": "apache",
    "extensions": ["sxd"]
  },
  "application/vnd.sun.xml.draw.template": {
    "source": "apache",
    "extensions": ["std"]
  },
  "application/vnd.sun.xml.impress": {
    "source": "apache",
    "extensions": ["sxi"]
  },
  "application/vnd.sun.xml.impress.template": {
    "source": "apache",
    "extensions": ["sti"]
  },
  "application/vnd.sun.xml.math": {
    "source": "apache",
    "extensions": ["sxm"]
  },
  "application/vnd.sun.xml.writer": {
    "source": "apache",
    "extensions": ["sxw"]
  },
  "application/vnd.sun.xml.writer.global": {
    "source": "apache",
    "extensions": ["sxg"]
  },
  "application/vnd.sun.xml.writer.template": {
    "source": "apache",
    "extensions": ["stw"]
  },
  "application/vnd.sus-calendar": {
    "source": "iana",
    "extensions": ["sus","susp"]
  },
  "application/vnd.svd": {
    "source": "iana",
    "extensions": ["svd"]
  },
  "application/vnd.swiftview-ics": {
    "source": "iana"
  },
  "application/vnd.sycle+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.syft+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.symbian.install": {
    "source": "apache",
    "extensions": ["sis","sisx"]
  },
  "application/vnd.syncml+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true,
    "extensions": ["xsm"]
  },
  "application/vnd.syncml.dm+wbxml": {
    "source": "iana",
    "charset": "UTF-8",
    "extensions": ["bdm"]
  },
  "application/vnd.syncml.dm+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true,
    "extensions": ["xdm"]
  },
  "application/vnd.syncml.dm.notification": {
    "source": "iana"
  },
  "application/vnd.syncml.dmddf+wbxml": {
    "source": "iana"
  },
  "application/vnd.syncml.dmddf+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true,
    "extensions": ["ddf"]
  },
  "application/vnd.syncml.dmtnds+wbxml": {
    "source": "iana"
  },
  "application/vnd.syncml.dmtnds+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/vnd.syncml.ds.notification": {
    "source": "iana"
  },
  "application/vnd.tableschema+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.tao.intent-module-archive": {
    "source": "iana",
    "extensions": ["tao"]
  },
  "application/vnd.tcpdump.pcap": {
    "source": "iana",
    "extensions": ["pcap","cap","dmp"]
  },
  "application/vnd.think-cell.ppttc+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.tmd.mediaflex.api+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.tml": {
    "source": "iana"
  },
  "application/vnd.tmobile-livetv": {
    "source": "iana",
    "extensions": ["tmo"]
  },
  "application/vnd.tri.onesource": {
    "source": "iana"
  },
  "application/vnd.trid.tpt": {
    "source": "iana",
    "extensions": ["tpt"]
  },
  "application/vnd.triscape.mxs": {
    "source": "iana",
    "extensions": ["mxs"]
  },
  "application/vnd.trueapp": {
    "source": "iana",
    "extensions": ["tra"]
  },
  "application/vnd.truedoc": {
    "source": "iana"
  },
  "application/vnd.ubisoft.webplayer": {
    "source": "iana"
  },
  "application/vnd.ufdl": {
    "source": "iana",
    "extensions": ["ufd","ufdl"]
  },
  "application/vnd.uiq.theme": {
    "source": "iana",
    "extensions": ["utz"]
  },
  "application/vnd.umajin": {
    "source": "iana",
    "extensions": ["umj"]
  },
  "application/vnd.unity": {
    "source": "iana",
    "extensions": ["unityweb"]
  },
  "application/vnd.uoml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["uoml"]
  },
  "application/vnd.uplanet.alert": {
    "source": "iana"
  },
  "application/vnd.uplanet.alert-wbxml": {
    "source": "iana"
  },
  "application/vnd.uplanet.bearer-choice": {
    "source": "iana"
  },
  "application/vnd.uplanet.bearer-choice-wbxml": {
    "source": "iana"
  },
  "application/vnd.uplanet.cacheop": {
    "source": "iana"
  },
  "application/vnd.uplanet.cacheop-wbxml": {
    "source": "iana"
  },
  "application/vnd.uplanet.channel": {
    "source": "iana"
  },
  "application/vnd.uplanet.channel-wbxml": {
    "source": "iana"
  },
  "application/vnd.uplanet.list": {
    "source": "iana"
  },
  "application/vnd.uplanet.list-wbxml": {
    "source": "iana"
  },
  "application/vnd.uplanet.listcmd": {
    "source": "iana"
  },
  "application/vnd.uplanet.listcmd-wbxml": {
    "source": "iana"
  },
  "application/vnd.uplanet.signal": {
    "source": "iana"
  },
  "application/vnd.uri-map": {
    "source": "iana"
  },
  "application/vnd.valve.source.material": {
    "source": "iana"
  },
  "application/vnd.vcx": {
    "source": "iana",
    "extensions": ["vcx"]
  },
  "application/vnd.vd-study": {
    "source": "iana"
  },
  "application/vnd.vectorworks": {
    "source": "iana"
  },
  "application/vnd.vel+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.verimatrix.vcas": {
    "source": "iana"
  },
  "application/vnd.veritone.aion+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.veryant.thin": {
    "source": "iana"
  },
  "application/vnd.ves.encrypted": {
    "source": "iana"
  },
  "application/vnd.vidsoft.vidconference": {
    "source": "iana"
  },
  "application/vnd.visio": {
    "source": "iana",
    "extensions": ["vsd","vst","vss","vsw"]
  },
  "application/vnd.visionary": {
    "source": "iana",
    "extensions": ["vis"]
  },
  "application/vnd.vividence.scriptfile": {
    "source": "iana"
  },
  "application/vnd.vsf": {
    "source": "iana",
    "extensions": ["vsf"]
  },
  "application/vnd.wap.sic": {
    "source": "iana"
  },
  "application/vnd.wap.slc": {
    "source": "iana"
  },
  "application/vnd.wap.wbxml": {
    "source": "iana",
    "charset": "UTF-8",
    "extensions": ["wbxml"]
  },
  "application/vnd.wap.wmlc": {
    "source": "iana",
    "extensions": ["wmlc"]
  },
  "application/vnd.wap.wmlscriptc": {
    "source": "iana",
    "extensions": ["wmlsc"]
  },
  "application/vnd.webturbo": {
    "source": "iana",
    "extensions": ["wtb"]
  },
  "application/vnd.wfa.dpp": {
    "source": "iana"
  },
  "application/vnd.wfa.p2p": {
    "source": "iana"
  },
  "application/vnd.wfa.wsc": {
    "source": "iana"
  },
  "application/vnd.windows.devicepairing": {
    "source": "iana"
  },
  "application/vnd.wmc": {
    "source": "iana"
  },
  "application/vnd.wmf.bootstrap": {
    "source": "iana"
  },
  "application/vnd.wolfram.mathematica": {
    "source": "iana"
  },
  "application/vnd.wolfram.mathematica.package": {
    "source": "iana"
  },
  "application/vnd.wolfram.player": {
    "source": "iana",
    "extensions": ["nbp"]
  },
  "application/vnd.wordperfect": {
    "source": "iana",
    "extensions": ["wpd"]
  },
  "application/vnd.wqd": {
    "source": "iana",
    "extensions": ["wqd"]
  },
  "application/vnd.wrq-hp3000-labelled": {
    "source": "iana"
  },
  "application/vnd.wt.stf": {
    "source": "iana",
    "extensions": ["stf"]
  },
  "application/vnd.wv.csp+wbxml": {
    "source": "iana"
  },
  "application/vnd.wv.csp+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.wv.ssp+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.xacml+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.xara": {
    "source": "iana",
    "extensions": ["xar"]
  },
  "application/vnd.xfdl": {
    "source": "iana",
    "extensions": ["xfdl"]
  },
  "application/vnd.xfdl.webform": {
    "source": "iana"
  },
  "application/vnd.xmi+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.xmpie.cpkg": {
    "source": "iana"
  },
  "application/vnd.xmpie.dpkg": {
    "source": "iana"
  },
  "application/vnd.xmpie.plan": {
    "source": "iana"
  },
  "application/vnd.xmpie.ppkg": {
    "source": "iana"
  },
  "application/vnd.xmpie.xlim": {
    "source": "iana"
  },
  "application/vnd.yamaha.hv-dic": {
    "source": "iana",
    "extensions": ["hvd"]
  },
  "application/vnd.yamaha.hv-script": {
    "source": "iana",
    "extensions": ["hvs"]
  },
  "application/vnd.yamaha.hv-voice": {
    "source": "iana",
    "extensions": ["hvp"]
  },
  "application/vnd.yamaha.openscoreformat": {
    "source": "iana",
    "extensions": ["osf"]
  },
  "application/vnd.yamaha.openscoreformat.osfpvg+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["osfpvg"]
  },
  "application/vnd.yamaha.remote-setup": {
    "source": "iana"
  },
  "application/vnd.yamaha.smaf-audio": {
    "source": "iana",
    "extensions": ["saf"]
  },
  "application/vnd.yamaha.smaf-phrase": {
    "source": "iana",
    "extensions": ["spf"]
  },
  "application/vnd.yamaha.through-ngn": {
    "source": "iana"
  },
  "application/vnd.yamaha.tunnel-udpencap": {
    "source": "iana"
  },
  "application/vnd.yaoweme": {
    "source": "iana"
  },
  "application/vnd.yellowriver-custom-menu": {
    "source": "iana",
    "extensions": ["cmp"]
  },
  "application/vnd.youtube.yt": {
    "source": "iana"
  },
  "application/vnd.zul": {
    "source": "iana",
    "extensions": ["zir","zirz"]
  },
  "application/vnd.zzazz.deck+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["zaz"]
  },
  "application/voicexml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["vxml"]
  },
  "application/voucher-cms+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vq-rtcpxr": {
    "source": "iana"
  },
  "application/wasm": {
    "source": "iana",
    "compressible": true,
    "extensions": ["wasm"]
  },
  "application/watcherinfo+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["wif"]
  },
  "application/webpush-options+json": {
    "source": "iana",
    "compressible": true
  },
  "application/whoispp-query": {
    "source": "iana"
  },
  "application/whoispp-response": {
    "source": "iana"
  },
  "application/widget": {
    "source": "iana",
    "extensions": ["wgt"]
  },
  "application/winhlp": {
    "source": "apache",
    "extensions": ["hlp"]
  },
  "application/wita": {
    "source": "iana"
  },
  "application/wordperfect5.1": {
    "source": "iana"
  },
  "application/wsdl+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["wsdl"]
  },
  "application/wspolicy+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["wspolicy"]
  },
  "application/x-7z-compressed": {
    "source": "apache",
    "compressible": false,
    "extensions": ["7z"]
  },
  "application/x-abiword": {
    "source": "apache",
    "extensions": ["abw"]
  },
  "application/x-ace-compressed": {
    "source": "apache",
    "extensions": ["ace"]
  },
  "application/x-amf": {
    "source": "apache"
  },
  "application/x-apple-diskimage": {
    "source": "apache",
    "extensions": ["dmg"]
  },
  "application/x-arj": {
    "compressible": false,
    "extensions": ["arj"]
  },
  "application/x-authorware-bin": {
    "source": "apache",
    "extensions": ["aab","x32","u32","vox"]
  },
  "application/x-authorware-map": {
    "source": "apache",
    "extensions": ["aam"]
  },
  "application/x-authorware-seg": {
    "source": "apache",
    "extensions": ["aas"]
  },
  "application/x-bcpio": {
    "source": "apache",
    "extensions": ["bcpio"]
  },
  "application/x-bdoc": {
    "compressible": false,
    "extensions": ["bdoc"]
  },
  "application/x-bittorrent": {
    "source": "apache",
    "extensions": ["torrent"]
  },
  "application/x-blorb": {
    "source": "apache",
    "extensions": ["blb","blorb"]
  },
  "application/x-bzip": {
    "source": "apache",
    "compressible": false,
    "extensions": ["bz"]
  },
  "application/x-bzip2": {
    "source": "apache",
    "compressible": false,
    "extensions": ["bz2","boz"]
  },
  "application/x-cbr": {
    "source": "apache",
    "extensions": ["cbr","cba","cbt","cbz","cb7"]
  },
  "application/x-cdlink": {
    "source": "apache",
    "extensions": ["vcd"]
  },
  "application/x-cfs-compressed": {
    "source": "apache",
    "extensions": ["cfs"]
  },
  "application/x-chat": {
    "source": "apache",
    "extensions": ["chat"]
  },
  "application/x-chess-pgn": {
    "source": "apache",
    "extensions": ["pgn"]
  },
  "application/x-chrome-extension": {
    "extensions": ["crx"]
  },
  "application/x-cocoa": {
    "source": "nginx",
    "extensions": ["cco"]
  },
  "application/x-compress": {
    "source": "apache"
  },
  "application/x-conference": {
    "source": "apache",
    "extensions": ["nsc"]
  },
  "application/x-cpio": {
    "source": "apache",
    "extensions": ["cpio"]
  },
  "application/x-csh": {
    "source": "apache",
    "extensions": ["csh"]
  },
  "application/x-deb": {
    "compressible": false
  },
  "application/x-debian-package": {
    "source": "apache",
    "extensions": ["deb","udeb"]
  },
  "application/x-dgc-compressed": {
    "source": "apache",
    "extensions": ["dgc"]
  },
  "application/x-director": {
    "source": "apache",
    "extensions": ["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"]
  },
  "application/x-doom": {
    "source": "apache",
    "extensions": ["wad"]
  },
  "application/x-dtbncx+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["ncx"]
  },
  "application/x-dtbook+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["dtb"]
  },
  "application/x-dtbresource+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["res"]
  },
  "application/x-dvi": {
    "source": "apache",
    "compressible": false,
    "extensions": ["dvi"]
  },
  "application/x-envoy": {
    "source": "apache",
    "extensions": ["evy"]
  },
  "application/x-eva": {
    "source": "apache",
    "extensions": ["eva"]
  },
  "application/x-font-bdf": {
    "source": "apache",
    "extensions": ["bdf"]
  },
  "application/x-font-dos": {
    "source": "apache"
  },
  "application/x-font-framemaker": {
    "source": "apache"
  },
  "application/x-font-ghostscript": {
    "source": "apache",
    "extensions": ["gsf"]
  },
  "application/x-font-libgrx": {
    "source": "apache"
  },
  "application/x-font-linux-psf": {
    "source": "apache",
    "extensions": ["psf"]
  },
  "application/x-font-pcf": {
    "source": "apache",
    "extensions": ["pcf"]
  },
  "application/x-font-snf": {
    "source": "apache",
    "extensions": ["snf"]
  },
  "application/x-font-speedo": {
    "source": "apache"
  },
  "application/x-font-sunos-news": {
    "source": "apache"
  },
  "application/x-font-type1": {
    "source": "apache",
    "extensions": ["pfa","pfb","pfm","afm"]
  },
  "application/x-font-vfont": {
    "source": "apache"
  },
  "application/x-freearc": {
    "source": "apache",
    "extensions": ["arc"]
  },
  "application/x-futuresplash": {
    "source": "apache",
    "extensions": ["spl"]
  },
  "application/x-gca-compressed": {
    "source": "apache",
    "extensions": ["gca"]
  },
  "application/x-glulx": {
    "source": "apache",
    "extensions": ["ulx"]
  },
  "application/x-gnumeric": {
    "source": "apache",
    "extensions": ["gnumeric"]
  },
  "application/x-gramps-xml": {
    "source": "apache",
    "extensions": ["gramps"]
  },
  "application/x-gtar": {
    "source": "apache",
    "extensions": ["gtar"]
  },
  "application/x-gzip": {
    "source": "apache"
  },
  "application/x-hdf": {
    "source": "apache",
    "extensions": ["hdf"]
  },
  "application/x-httpd-php": {
    "compressible": true,
    "extensions": ["php"]
  },
  "application/x-install-instructions": {
    "source": "apache",
    "extensions": ["install"]
  },
  "application/x-iso9660-image": {
    "source": "apache",
    "extensions": ["iso"]
  },
  "application/x-iwork-keynote-sffkey": {
    "extensions": ["key"]
  },
  "application/x-iwork-numbers-sffnumbers": {
    "extensions": ["numbers"]
  },
  "application/x-iwork-pages-sffpages": {
    "extensions": ["pages"]
  },
  "application/x-java-archive-diff": {
    "source": "nginx",
    "extensions": ["jardiff"]
  },
  "application/x-java-jnlp-file": {
    "source": "apache",
    "compressible": false,
    "extensions": ["jnlp"]
  },
  "application/x-javascript": {
    "compressible": true
  },
  "application/x-keepass2": {
    "extensions": ["kdbx"]
  },
  "application/x-latex": {
    "source": "apache",
    "compressible": false,
    "extensions": ["latex"]
  },
  "application/x-lua-bytecode": {
    "extensions": ["luac"]
  },
  "application/x-lzh-compressed": {
    "source": "apache",
    "extensions": ["lzh","lha"]
  },
  "application/x-makeself": {
    "source": "nginx",
    "extensions": ["run"]
  },
  "application/x-mie": {
    "source": "apache",
    "extensions": ["mie"]
  },
  "application/x-mobipocket-ebook": {
    "source": "apache",
    "extensions": ["prc","mobi"]
  },
  "application/x-mpegurl": {
    "compressible": false
  },
  "application/x-ms-application": {
    "source": "apache",
    "extensions": ["application"]
  },
  "application/x-ms-shortcut": {
    "source": "apache",
    "extensions": ["lnk"]
  },
  "application/x-ms-wmd": {
    "source": "apache",
    "extensions": ["wmd"]
  },
  "application/x-ms-wmz": {
    "source": "apache",
    "extensions": ["wmz"]
  },
  "application/x-ms-xbap": {
    "source": "apache",
    "extensions": ["xbap"]
  },
  "application/x-msaccess": {
    "source": "apache",
    "extensions": ["mdb"]
  },
  "application/x-msbinder": {
    "source": "apache",
    "extensions": ["obd"]
  },
  "application/x-mscardfile": {
    "source": "apache",
    "extensions": ["crd"]
  },
  "application/x-msclip": {
    "source": "apache",
    "extensions": ["clp"]
  },
  "application/x-msdos-program": {
    "extensions": ["exe"]
  },
  "application/x-msdownload": {
    "source": "apache",
    "extensions": ["exe","dll","com","bat","msi"]
  },
  "application/x-msmediaview": {
    "source": "apache",
    "extensions": ["mvb","m13","m14"]
  },
  "application/x-msmetafile": {
    "source": "apache",
    "extensions": ["wmf","wmz","emf","emz"]
  },
  "application/x-msmoney": {
    "source": "apache",
    "extensions": ["mny"]
  },
  "application/x-mspublisher": {
    "source": "apache",
    "extensions": ["pub"]
  },
  "application/x-msschedule": {
    "source": "apache",
    "extensions": ["scd"]
  },
  "application/x-msterminal": {
    "source": "apache",
    "extensions": ["trm"]
  },
  "application/x-mswrite": {
    "source": "apache",
    "extensions": ["wri"]
  },
  "application/x-netcdf": {
    "source": "apache",
    "extensions": ["nc","cdf"]
  },
  "application/x-ns-proxy-autoconfig": {
    "compressible": true,
    "extensions": ["pac"]
  },
  "application/x-nzb": {
    "source": "apache",
    "extensions": ["nzb"]
  },
  "application/x-perl": {
    "source": "nginx",
    "extensions": ["pl","pm"]
  },
  "application/x-pilot": {
    "source": "nginx",
    "extensions": ["prc","pdb"]
  },
  "application/x-pkcs12": {
    "source": "apache",
    "compressible": false,
    "extensions": ["p12","pfx"]
  },
  "application/x-pkcs7-certificates": {
    "source": "apache",
    "extensions": ["p7b","spc"]
  },
  "application/x-pkcs7-certreqresp": {
    "source": "apache",
    "extensions": ["p7r"]
  },
  "application/x-pki-message": {
    "source": "iana"
  },
  "application/x-rar-compressed": {
    "source": "apache",
    "compressible": false,
    "extensions": ["rar"]
  },
  "application/x-redhat-package-manager": {
    "source": "nginx",
    "extensions": ["rpm"]
  },
  "application/x-research-info-systems": {
    "source": "apache",
    "extensions": ["ris"]
  },
  "application/x-sea": {
    "source": "nginx",
    "extensions": ["sea"]
  },
  "application/x-sh": {
    "source": "apache",
    "compressible": true,
    "extensions": ["sh"]
  },
  "application/x-shar": {
    "source": "apache",
    "extensions": ["shar"]
  },
  "application/x-shockwave-flash": {
    "source": "apache",
    "compressible": false,
    "extensions": ["swf"]
  },
  "application/x-silverlight-app": {
    "source": "apache",
    "extensions": ["xap"]
  },
  "application/x-sql": {
    "source": "apache",
    "extensions": ["sql"]
  },
  "application/x-stuffit": {
    "source": "apache",
    "compressible": false,
    "extensions": ["sit"]
  },
  "application/x-stuffitx": {
    "source": "apache",
    "extensions": ["sitx"]
  },
  "application/x-subrip": {
    "source": "apache",
    "extensions": ["srt"]
  },
  "application/x-sv4cpio": {
    "source": "apache",
    "extensions": ["sv4cpio"]
  },
  "application/x-sv4crc": {
    "source": "apache",
    "extensions": ["sv4crc"]
  },
  "application/x-t3vm-image": {
    "source": "apache",
    "extensions": ["t3"]
  },
  "application/x-tads": {
    "source": "apache",
    "extensions": ["gam"]
  },
  "application/x-tar": {
    "source": "apache",
    "compressible": true,
    "extensions": ["tar"]
  },
  "application/x-tcl": {
    "source": "apache",
    "extensions": ["tcl","tk"]
  },
  "application/x-tex": {
    "source": "apache",
    "extensions": ["tex"]
  },
  "application/x-tex-tfm": {
    "source": "apache",
    "extensions": ["tfm"]
  },
  "application/x-texinfo": {
    "source": "apache",
    "extensions": ["texinfo","texi"]
  },
  "application/x-tgif": {
    "source": "apache",
    "extensions": ["obj"]
  },
  "application/x-ustar": {
    "source": "apache",
    "extensions": ["ustar"]
  },
  "application/x-virtualbox-hdd": {
    "compressible": true,
    "extensions": ["hdd"]
  },
  "application/x-virtualbox-ova": {
    "compressible": true,
    "extensions": ["ova"]
  },
  "application/x-virtualbox-ovf": {
    "compressible": true,
    "extensions": ["ovf"]
  },
  "application/x-virtualbox-vbox": {
    "compressible": true,
    "extensions": ["vbox"]
  },
  "application/x-virtualbox-vbox-extpack": {
    "compressible": false,
    "extensions": ["vbox-extpack"]
  },
  "application/x-virtualbox-vdi": {
    "compressible": true,
    "extensions": ["vdi"]
  },
  "application/x-virtualbox-vhd": {
    "compressible": true,
    "extensions": ["vhd"]
  },
  "application/x-virtualbox-vmdk": {
    "compressible": true,
    "extensions": ["vmdk"]
  },
  "application/x-wais-source": {
    "source": "apache",
    "extensions": ["src"]
  },
  "application/x-web-app-manifest+json": {
    "compressible": true,
    "extensions": ["webapp"]
  },
  "application/x-www-form-urlencoded": {
    "source": "iana",
    "compressible": true
  },
  "application/x-x509-ca-cert": {
    "source": "iana",
    "extensions": ["der","crt","pem"]
  },
  "application/x-x509-ca-ra-cert": {
    "source": "iana"
  },
  "application/x-x509-next-ca-cert": {
    "source": "iana"
  },
  "application/x-xfig": {
    "source": "apache",
    "extensions": ["fig"]
  },
  "application/x-xliff+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["xlf"]
  },
  "application/x-xpinstall": {
    "source": "apache",
    "compressible": false,
    "extensions": ["xpi"]
  },
  "application/x-xz": {
    "source": "apache",
    "extensions": ["xz"]
  },
  "application/x-zmachine": {
    "source": "apache",
    "extensions": ["z1","z2","z3","z4","z5","z6","z7","z8"]
  },
  "application/x400-bp": {
    "source": "iana"
  },
  "application/xacml+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/xaml+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["xaml"]
  },
  "application/xcap-att+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xav"]
  },
  "application/xcap-caps+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xca"]
  },
  "application/xcap-diff+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xdf"]
  },
  "application/xcap-el+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xel"]
  },
  "application/xcap-error+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/xcap-ns+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xns"]
  },
  "application/xcon-conference-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/xcon-conference-info-diff+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/xenc+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xenc"]
  },
  "application/xhtml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xhtml","xht"]
  },
  "application/xhtml-voice+xml": {
    "source": "apache",
    "compressible": true
  },
  "application/xliff+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xlf"]
  },
  "application/xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xml","xsl","xsd","rng"]
  },
  "application/xml-dtd": {
    "source": "iana",
    "compressible": true,
    "extensions": ["dtd"]
  },
  "application/xml-external-parsed-entity": {
    "source": "iana"
  },
  "application/xml-patch+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/xmpp+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/xop+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xop"]
  },
  "application/xproc+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["xpl"]
  },
  "application/xslt+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xsl","xslt"]
  },
  "application/xspf+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["xspf"]
  },
  "application/xv+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["mxml","xhvml","xvml","xvm"]
  },
  "application/yang": {
    "source": "iana",
    "extensions": ["yang"]
  },
  "application/yang-data+json": {
    "source": "iana",
    "compressible": true
  },
  "application/yang-data+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/yang-patch+json": {
    "source": "iana",
    "compressible": true
  },
  "application/yang-patch+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/yin+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["yin"]
  },
  "application/zip": {
    "source": "iana",
    "compressible": false,
    "extensions": ["zip"]
  },
  "application/zlib": {
    "source": "iana"
  },
  "application/zstd": {
    "source": "iana"
  },
  "audio/1d-interleaved-parityfec": {
    "source": "iana"
  },
  "audio/32kadpcm": {
    "source": "iana"
  },
  "audio/3gpp": {
    "source": "iana",
    "compressible": false,
    "extensions": ["3gpp"]
  },
  "audio/3gpp2": {
    "source": "iana"
  },
  "audio/aac": {
    "source": "iana"
  },
  "audio/ac3": {
    "source": "iana"
  },
  "audio/adpcm": {
    "source": "apache",
    "extensions": ["adp"]
  },
  "audio/amr": {
    "source": "iana",
    "extensions": ["amr"]
  },
  "audio/amr-wb": {
    "source": "iana"
  },
  "audio/amr-wb+": {
    "source": "iana"
  },
  "audio/aptx": {
    "source": "iana"
  },
  "audio/asc": {
    "source": "iana"
  },
  "audio/atrac-advanced-lossless": {
    "source": "iana"
  },
  "audio/atrac-x": {
    "source": "iana"
  },
  "audio/atrac3": {
    "source": "iana"
  },
  "audio/basic": {
    "source": "iana",
    "compressible": false,
    "extensions": ["au","snd"]
  },
  "audio/bv16": {
    "source": "iana"
  },
  "audio/bv32": {
    "source": "iana"
  },
  "audio/clearmode": {
    "source": "iana"
  },
  "audio/cn": {
    "source": "iana"
  },
  "audio/dat12": {
    "source": "iana"
  },
  "audio/dls": {
    "source": "iana"
  },
  "audio/dsr-es201108": {
    "source": "iana"
  },
  "audio/dsr-es202050": {
    "source": "iana"
  },
  "audio/dsr-es202211": {
    "source": "iana"
  },
  "audio/dsr-es202212": {
    "source": "iana"
  },
  "audio/dv": {
    "source": "iana"
  },
  "audio/dvi4": {
    "source": "iana"
  },
  "audio/eac3": {
    "source": "iana"
  },
  "audio/encaprtp": {
    "source": "iana"
  },
  "audio/evrc": {
    "source": "iana"
  },
  "audio/evrc-qcp": {
    "source": "iana"
  },
  "audio/evrc0": {
    "source": "iana"
  },
  "audio/evrc1": {
    "source": "iana"
  },
  "audio/evrcb": {
    "source": "iana"
  },
  "audio/evrcb0": {
    "source": "iana"
  },
  "audio/evrcb1": {
    "source": "iana"
  },
  "audio/evrcnw": {
    "source": "iana"
  },
  "audio/evrcnw0": {
    "source": "iana"
  },
  "audio/evrcnw1": {
    "source": "iana"
  },
  "audio/evrcwb": {
    "source": "iana"
  },
  "audio/evrcwb0": {
    "source": "iana"
  },
  "audio/evrcwb1": {
    "source": "iana"
  },
  "audio/evs": {
    "source": "iana"
  },
  "audio/flexfec": {
    "source": "iana"
  },
  "audio/fwdred": {
    "source": "iana"
  },
  "audio/g711-0": {
    "source": "iana"
  },
  "audio/g719": {
    "source": "iana"
  },
  "audio/g722": {
    "source": "iana"
  },
  "audio/g7221": {
    "source": "iana"
  },
  "audio/g723": {
    "source": "iana"
  },
  "audio/g726-16": {
    "source": "iana"
  },
  "audio/g726-24": {
    "source": "iana"
  },
  "audio/g726-32": {
    "source": "iana"
  },
  "audio/g726-40": {
    "source": "iana"
  },
  "audio/g728": {
    "source": "iana"
  },
  "audio/g729": {
    "source": "iana"
  },
  "audio/g7291": {
    "source": "iana"
  },
  "audio/g729d": {
    "source": "iana"
  },
  "audio/g729e": {
    "source": "iana"
  },
  "audio/gsm": {
    "source": "iana"
  },
  "audio/gsm-efr": {
    "source": "iana"
  },
  "audio/gsm-hr-08": {
    "source": "iana"
  },
  "audio/ilbc": {
    "source": "iana"
  },
  "audio/ip-mr_v2.5": {
    "source": "iana"
  },
  "audio/isac": {
    "source": "apache"
  },
  "audio/l16": {
    "source": "iana"
  },
  "audio/l20": {
    "source": "iana"
  },
  "audio/l24": {
    "source": "iana",
    "compressible": false
  },
  "audio/l8": {
    "source": "iana"
  },
  "audio/lpc": {
    "source": "iana"
  },
  "audio/melp": {
    "source": "iana"
  },
  "audio/melp1200": {
    "source": "iana"
  },
  "audio/melp2400": {
    "source": "iana"
  },
  "audio/melp600": {
    "source": "iana"
  },
  "audio/mhas": {
    "source": "iana"
  },
  "audio/midi": {
    "source": "apache",
    "extensions": ["mid","midi","kar","rmi"]
  },
  "audio/mobile-xmf": {
    "source": "iana",
    "extensions": ["mxmf"]
  },
  "audio/mp3": {
    "compressible": false,
    "extensions": ["mp3"]
  },
  "audio/mp4": {
    "source": "iana",
    "compressible": false,
    "extensions": ["m4a","mp4a"]
  },
  "audio/mp4a-latm": {
    "source": "iana"
  },
  "audio/mpa": {
    "source": "iana"
  },
  "audio/mpa-robust": {
    "source": "iana"
  },
  "audio/mpeg": {
    "source": "iana",
    "compressible": false,
    "extensions": ["mpga","mp2","mp2a","mp3","m2a","m3a"]
  },
  "audio/mpeg4-generic": {
    "source": "iana"
  },
  "audio/musepack": {
    "source": "apache"
  },
  "audio/ogg": {
    "source": "iana",
    "compressible": false,
    "extensions": ["oga","ogg","spx","opus"]
  },
  "audio/opus": {
    "source": "iana"
  },
  "audio/parityfec": {
    "source": "iana"
  },
  "audio/pcma": {
    "source": "iana"
  },
  "audio/pcma-wb": {
    "source": "iana"
  },
  "audio/pcmu": {
    "source": "iana"
  },
  "audio/pcmu-wb": {
    "source": "iana"
  },
  "audio/prs.sid": {
    "source": "iana"
  },
  "audio/qcelp": {
    "source": "iana"
  },
  "audio/raptorfec": {
    "source": "iana"
  },
  "audio/red": {
    "source": "iana"
  },
  "audio/rtp-enc-aescm128": {
    "source": "iana"
  },
  "audio/rtp-midi": {
    "source": "iana"
  },
  "audio/rtploopback": {
    "source": "iana"
  },
  "audio/rtx": {
    "source": "iana"
  },
  "audio/s3m": {
    "source": "apache",
    "extensions": ["s3m"]
  },
  "audio/scip": {
    "source": "iana"
  },
  "audio/silk": {
    "source": "apache",
    "extensions": ["sil"]
  },
  "audio/smv": {
    "source": "iana"
  },
  "audio/smv-qcp": {
    "source": "iana"
  },
  "audio/smv0": {
    "source": "iana"
  },
  "audio/sofa": {
    "source": "iana"
  },
  "audio/sp-midi": {
    "source": "iana"
  },
  "audio/speex": {
    "source": "iana"
  },
  "audio/t140c": {
    "source": "iana"
  },
  "audio/t38": {
    "source": "iana"
  },
  "audio/telephone-event": {
    "source": "iana"
  },
  "audio/tetra_acelp": {
    "source": "iana"
  },
  "audio/tetra_acelp_bb": {
    "source": "iana"
  },
  "audio/tone": {
    "source": "iana"
  },
  "audio/tsvcis": {
    "source": "iana"
  },
  "audio/uemclip": {
    "source": "iana"
  },
  "audio/ulpfec": {
    "source": "iana"
  },
  "audio/usac": {
    "source": "iana"
  },
  "audio/vdvi": {
    "source": "iana"
  },
  "audio/vmr-wb": {
    "source": "iana"
  },
  "audio/vnd.3gpp.iufp": {
    "source": "iana"
  },
  "audio/vnd.4sb": {
    "source": "iana"
  },
  "audio/vnd.audiokoz": {
    "source": "iana"
  },
  "audio/vnd.celp": {
    "source": "iana"
  },
  "audio/vnd.cisco.nse": {
    "source": "iana"
  },
  "audio/vnd.cmles.radio-events": {
    "source": "iana"
  },
  "audio/vnd.cns.anp1": {
    "source": "iana"
  },
  "audio/vnd.cns.inf1": {
    "source": "iana"
  },
  "audio/vnd.dece.audio": {
    "source": "iana",
    "extensions": ["uva","uvva"]
  },
  "audio/vnd.digital-winds": {
    "source": "iana",
    "extensions": ["eol"]
  },
  "audio/vnd.dlna.adts": {
    "source": "iana"
  },
  "audio/vnd.dolby.heaac.1": {
    "source": "iana"
  },
  "audio/vnd.dolby.heaac.2": {
    "source": "iana"
  },
  "audio/vnd.dolby.mlp": {
    "source": "iana"
  },
  "audio/vnd.dolby.mps": {
    "source": "iana"
  },
  "audio/vnd.dolby.pl2": {
    "source": "iana"
  },
  "audio/vnd.dolby.pl2x": {
    "source": "iana"
  },
  "audio/vnd.dolby.pl2z": {
    "source": "iana"
  },
  "audio/vnd.dolby.pulse.1": {
    "source": "iana"
  },
  "audio/vnd.dra": {
    "source": "iana",
    "extensions": ["dra"]
  },
  "audio/vnd.dts": {
    "source": "iana",
    "extensions": ["dts"]
  },
  "audio/vnd.dts.hd": {
    "source": "iana",
    "extensions": ["dtshd"]
  },
  "audio/vnd.dts.uhd": {
    "source": "iana"
  },
  "audio/vnd.dvb.file": {
    "source": "iana"
  },
  "audio/vnd.everad.plj": {
    "source": "iana"
  },
  "audio/vnd.hns.audio": {
    "source": "iana"
  },
  "audio/vnd.lucent.voice": {
    "source": "iana",
    "extensions": ["lvp"]
  },
  "audio/vnd.ms-playready.media.pya": {
    "source": "iana",
    "extensions": ["pya"]
  },
  "audio/vnd.nokia.mobile-xmf": {
    "source": "iana"
  },
  "audio/vnd.nortel.vbk": {
    "source": "iana"
  },
  "audio/vnd.nuera.ecelp4800": {
    "source": "iana",
    "extensions": ["ecelp4800"]
  },
  "audio/vnd.nuera.ecelp7470": {
    "source": "iana",
    "extensions": ["ecelp7470"]
  },
  "audio/vnd.nuera.ecelp9600": {
    "source": "iana",
    "extensions": ["ecelp9600"]
  },
  "audio/vnd.octel.sbc": {
    "source": "iana"
  },
  "audio/vnd.presonus.multitrack": {
    "source": "iana"
  },
  "audio/vnd.qcelp": {
    "source": "iana"
  },
  "audio/vnd.rhetorex.32kadpcm": {
    "source": "iana"
  },
  "audio/vnd.rip": {
    "source": "iana",
    "extensions": ["rip"]
  },
  "audio/vnd.rn-realaudio": {
    "compressible": false
  },
  "audio/vnd.sealedmedia.softseal.mpeg": {
    "source": "iana"
  },
  "audio/vnd.vmx.cvsd": {
    "source": "iana"
  },
  "audio/vnd.wave": {
    "compressible": false
  },
  "audio/vorbis": {
    "source": "iana",
    "compressible": false
  },
  "audio/vorbis-config": {
    "source": "iana"
  },
  "audio/wav": {
    "compressible": false,
    "extensions": ["wav"]
  },
  "audio/wave": {
    "compressible": false,
    "extensions": ["wav"]
  },
  "audio/webm": {
    "source": "apache",
    "compressible": false,
    "extensions": ["weba"]
  },
  "audio/x-aac": {
    "source": "apache",
    "compressible": false,
    "extensions": ["aac"]
  },
  "audio/x-aiff": {
    "source": "apache",
    "extensions": ["aif","aiff","aifc"]
  },
  "audio/x-caf": {
    "source": "apache",
    "compressible": false,
    "extensions": ["caf"]
  },
  "audio/x-flac": {
    "source": "apache",
    "extensions": ["flac"]
  },
  "audio/x-m4a": {
    "source": "nginx",
    "extensions": ["m4a"]
  },
  "audio/x-matroska": {
    "source": "apache",
    "extensions": ["mka"]
  },
  "audio/x-mpegurl": {
    "source": "apache",
    "extensions": ["m3u"]
  },
  "audio/x-ms-wax": {
    "source": "apache",
    "extensions": ["wax"]
  },
  "audio/x-ms-wma": {
    "source": "apache",
    "extensions": ["wma"]
  },
  "audio/x-pn-realaudio": {
    "source": "apache",
    "extensions": ["ram","ra"]
  },
  "audio/x-pn-realaudio-plugin": {
    "source": "apache",
    "extensions": ["rmp"]
  },
  "audio/x-realaudio": {
    "source": "nginx",
    "extensions": ["ra"]
  },
  "audio/x-tta": {
    "source": "apache"
  },
  "audio/x-wav": {
    "source": "apache",
    "extensions": ["wav"]
  },
  "audio/xm": {
    "source": "apache",
    "extensions": ["xm"]
  },
  "chemical/x-cdx": {
    "source": "apache",
    "extensions": ["cdx"]
  },
  "chemical/x-cif": {
    "source": "apache",
    "extensions": ["cif"]
  },
  "chemical/x-cmdf": {
    "source": "apache",
    "extensions": ["cmdf"]
  },
  "chemical/x-cml": {
    "source": "apache",
    "extensions": ["cml"]
  },
  "chemical/x-csml": {
    "source": "apache",
    "extensions": ["csml"]
  },
  "chemical/x-pdb": {
    "source": "apache"
  },
  "chemical/x-xyz": {
    "source": "apache",
    "extensions": ["xyz"]
  },
  "font/collection": {
    "source": "iana",
    "extensions": ["ttc"]
  },
  "font/otf": {
    "source": "iana",
    "compressible": true,
    "extensions": ["otf"]
  },
  "font/sfnt": {
    "source": "iana"
  },
  "font/ttf": {
    "source": "iana",
    "compressible": true,
    "extensions": ["ttf"]
  },
  "font/woff": {
    "source": "iana",
    "extensions": ["woff"]
  },
  "font/woff2": {
    "source": "iana",
    "extensions": ["woff2"]
  },
  "image/aces": {
    "source": "iana",
    "extensions": ["exr"]
  },
  "image/apng": {
    "compressible": false,
    "extensions": ["apng"]
  },
  "image/avci": {
    "source": "iana",
    "extensions": ["avci"]
  },
  "image/avcs": {
    "source": "iana",
    "extensions": ["avcs"]
  },
  "image/avif": {
    "source": "iana",
    "compressible": false,
    "extensions": ["avif"]
  },
  "image/bmp": {
    "source": "iana",
    "compressible": true,
    "extensions": ["bmp"]
  },
  "image/cgm": {
    "source": "iana",
    "extensions": ["cgm"]
  },
  "image/dicom-rle": {
    "source": "iana",
    "extensions": ["drle"]
  },
  "image/emf": {
    "source": "iana",
    "extensions": ["emf"]
  },
  "image/fits": {
    "source": "iana",
    "extensions": ["fits"]
  },
  "image/g3fax": {
    "source": "iana",
    "extensions": ["g3"]
  },
  "image/gif": {
    "source": "iana",
    "compressible": false,
    "extensions": ["gif"]
  },
  "image/heic": {
    "source": "iana",
    "extensions": ["heic"]
  },
  "image/heic-sequence": {
    "source": "iana",
    "extensions": ["heics"]
  },
  "image/heif": {
    "source": "iana",
    "extensions": ["heif"]
  },
  "image/heif-sequence": {
    "source": "iana",
    "extensions": ["heifs"]
  },
  "image/hej2k": {
    "source": "iana",
    "extensions": ["hej2"]
  },
  "image/hsj2": {
    "source": "iana",
    "extensions": ["hsj2"]
  },
  "image/ief": {
    "source": "iana",
    "extensions": ["ief"]
  },
  "image/jls": {
    "source": "iana",
    "extensions": ["jls"]
  },
  "image/jp2": {
    "source": "iana",
    "compressible": false,
    "extensions": ["jp2","jpg2"]
  },
  "image/jpeg": {
    "source": "iana",
    "compressible": false,
    "extensions": ["jpeg","jpg","jpe"]
  },
  "image/jph": {
    "source": "iana",
    "extensions": ["jph"]
  },
  "image/jphc": {
    "source": "iana",
    "extensions": ["jhc"]
  },
  "image/jpm": {
    "source": "iana",
    "compressible": false,
    "extensions": ["jpm"]
  },
  "image/jpx": {
    "source": "iana",
    "compressible": false,
    "extensions": ["jpx","jpf"]
  },
  "image/jxr": {
    "source": "iana",
    "extensions": ["jxr"]
  },
  "image/jxra": {
    "source": "iana",
    "extensions": ["jxra"]
  },
  "image/jxrs": {
    "source": "iana",
    "extensions": ["jxrs"]
  },
  "image/jxs": {
    "source": "iana",
    "extensions": ["jxs"]
  },
  "image/jxsc": {
    "source": "iana",
    "extensions": ["jxsc"]
  },
  "image/jxsi": {
    "source": "iana",
    "extensions": ["jxsi"]
  },
  "image/jxss": {
    "source": "iana",
    "extensions": ["jxss"]
  },
  "image/ktx": {
    "source": "iana",
    "extensions": ["ktx"]
  },
  "image/ktx2": {
    "source": "iana",
    "extensions": ["ktx2"]
  },
  "image/naplps": {
    "source": "iana"
  },
  "image/pjpeg": {
    "compressible": false
  },
  "image/png": {
    "source": "iana",
    "compressible": false,
    "extensions": ["png"]
  },
  "image/prs.btif": {
    "source": "iana",
    "extensions": ["btif"]
  },
  "image/prs.pti": {
    "source": "iana",
    "extensions": ["pti"]
  },
  "image/pwg-raster": {
    "source": "iana"
  },
  "image/sgi": {
    "source": "apache",
    "extensions": ["sgi"]
  },
  "image/svg+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["svg","svgz"]
  },
  "image/t38": {
    "source": "iana",
    "extensions": ["t38"]
  },
  "image/tiff": {
    "source": "iana",
    "compressible": false,
    "extensions": ["tif","tiff"]
  },
  "image/tiff-fx": {
    "source": "iana",
    "extensions": ["tfx"]
  },
  "image/vnd.adobe.photoshop": {
    "source": "iana",
    "compressible": true,
    "extensions": ["psd"]
  },
  "image/vnd.airzip.accelerator.azv": {
    "source": "iana",
    "extensions": ["azv"]
  },
  "image/vnd.cns.inf2": {
    "source": "iana"
  },
  "image/vnd.dece.graphic": {
    "source": "iana",
    "extensions": ["uvi","uvvi","uvg","uvvg"]
  },
  "image/vnd.djvu": {
    "source": "iana",
    "extensions": ["djvu","djv"]
  },
  "image/vnd.dvb.subtitle": {
    "source": "iana",
    "extensions": ["sub"]
  },
  "image/vnd.dwg": {
    "source": "iana",
    "extensions": ["dwg"]
  },
  "image/vnd.dxf": {
    "source": "iana",
    "extensions": ["dxf"]
  },
  "image/vnd.fastbidsheet": {
    "source": "iana",
    "extensions": ["fbs"]
  },
  "image/vnd.fpx": {
    "source": "iana",
    "extensions": ["fpx"]
  },
  "image/vnd.fst": {
    "source": "iana",
    "extensions": ["fst"]
  },
  "image/vnd.fujixerox.edmics-mmr": {
    "source": "iana",
    "extensions": ["mmr"]
  },
  "image/vnd.fujixerox.edmics-rlc": {
    "source": "iana",
    "extensions": ["rlc"]
  },
  "image/vnd.globalgraphics.pgb": {
    "source": "iana"
  },
  "image/vnd.microsoft.icon": {
    "source": "iana",
    "compressible": true,
    "extensions": ["ico"]
  },
  "image/vnd.mix": {
    "source": "iana"
  },
  "image/vnd.mozilla.apng": {
    "source": "iana"
  },
  "image/vnd.ms-dds": {
    "compressible": true,
    "extensions": ["dds"]
  },
  "image/vnd.ms-modi": {
    "source": "iana",
    "extensions": ["mdi"]
  },
  "image/vnd.ms-photo": {
    "source": "apache",
    "extensions": ["wdp"]
  },
  "image/vnd.net-fpx": {
    "source": "iana",
    "extensions": ["npx"]
  },
  "image/vnd.pco.b16": {
    "source": "iana",
    "extensions": ["b16"]
  },
  "image/vnd.radiance": {
    "source": "iana"
  },
  "image/vnd.sealed.png": {
    "source": "iana"
  },
  "image/vnd.sealedmedia.softseal.gif": {
    "source": "iana"
  },
  "image/vnd.sealedmedia.softseal.jpg": {
    "source": "iana"
  },
  "image/vnd.svf": {
    "source": "iana"
  },
  "image/vnd.tencent.tap": {
    "source": "iana",
    "extensions": ["tap"]
  },
  "image/vnd.valve.source.texture": {
    "source": "iana",
    "extensions": ["vtf"]
  },
  "image/vnd.wap.wbmp": {
    "source": "iana",
    "extensions": ["wbmp"]
  },
  "image/vnd.xiff": {
    "source": "iana",
    "extensions": ["xif"]
  },
  "image/vnd.zbrush.pcx": {
    "source": "iana",
    "extensions": ["pcx"]
  },
  "image/webp": {
    "source": "apache",
    "extensions": ["webp"]
  },
  "image/wmf": {
    "source": "iana",
    "extensions": ["wmf"]
  },
  "image/x-3ds": {
    "source": "apache",
    "extensions": ["3ds"]
  },
  "image/x-cmu-raster": {
    "source": "apache",
    "extensions": ["ras"]
  },
  "image/x-cmx": {
    "source": "apache",
    "extensions": ["cmx"]
  },
  "image/x-freehand": {
    "source": "apache",
    "extensions": ["fh","fhc","fh4","fh5","fh7"]
  },
  "image/x-icon": {
    "source": "apache",
    "compressible": true,
    "extensions": ["ico"]
  },
  "image/x-jng": {
    "source": "nginx",
    "extensions": ["jng"]
  },
  "image/x-mrsid-image": {
    "source": "apache",
    "extensions": ["sid"]
  },
  "image/x-ms-bmp": {
    "source": "nginx",
    "compressible": true,
    "extensions": ["bmp"]
  },
  "image/x-pcx": {
    "source": "apache",
    "extensions": ["pcx"]
  },
  "image/x-pict": {
    "source": "apache",
    "extensions": ["pic","pct"]
  },
  "image/x-portable-anymap": {
    "source": "apache",
    "extensions": ["pnm"]
  },
  "image/x-portable-bitmap": {
    "source": "apache",
    "extensions": ["pbm"]
  },
  "image/x-portable-graymap": {
    "source": "apache",
    "extensions": ["pgm"]
  },
  "image/x-portable-pixmap": {
    "source": "apache",
    "extensions": ["ppm"]
  },
  "image/x-rgb": {
    "source": "apache",
    "extensions": ["rgb"]
  },
  "image/x-tga": {
    "source": "apache",
    "extensions": ["tga"]
  },
  "image/x-xbitmap": {
    "source": "apache",
    "extensions": ["xbm"]
  },
  "image/x-xcf": {
    "compressible": false
  },
  "image/x-xpixmap": {
    "source": "apache",
    "extensions": ["xpm"]
  },
  "image/x-xwindowdump": {
    "source": "apache",
    "extensions": ["xwd"]
  },
  "message/cpim": {
    "source": "iana"
  },
  "message/delivery-status": {
    "source": "iana"
  },
  "message/disposition-notification": {
    "source": "iana",
    "extensions": [
      "disposition-notification"
    ]
  },
  "message/external-body": {
    "source": "iana"
  },
  "message/feedback-report": {
    "source": "iana"
  },
  "message/global": {
    "source": "iana",
    "extensions": ["u8msg"]
  },
  "message/global-delivery-status": {
    "source": "iana",
    "extensions": ["u8dsn"]
  },
  "message/global-disposition-notification": {
    "source": "iana",
    "extensions": ["u8mdn"]
  },
  "message/global-headers": {
    "source": "iana",
    "extensions": ["u8hdr"]
  },
  "message/http": {
    "source": "iana",
    "compressible": false
  },
  "message/imdn+xml": {
    "source": "iana",
    "compressible": true
  },
  "message/news": {
    "source": "iana"
  },
  "message/partial": {
    "source": "iana",
    "compressible": false
  },
  "message/rfc822": {
    "source": "iana",
    "compressible": true,
    "extensions": ["eml","mime"]
  },
  "message/s-http": {
    "source": "iana"
  },
  "message/sip": {
    "source": "iana"
  },
  "message/sipfrag": {
    "source": "iana"
  },
  "message/tracking-status": {
    "source": "iana"
  },
  "message/vnd.si.simp": {
    "source": "iana"
  },
  "message/vnd.wfa.wsc": {
    "source": "iana",
    "extensions": ["wsc"]
  },
  "model/3mf": {
    "source": "iana",
    "extensions": ["3mf"]
  },
  "model/e57": {
    "source": "iana"
  },
  "model/gltf+json": {
    "source": "iana",
    "compressible": true,
    "extensions": ["gltf"]
  },
  "model/gltf-binary": {
    "source": "iana",
    "compressible": true,
    "extensions": ["glb"]
  },
  "model/iges": {
    "source": "iana",
    "compressible": false,
    "extensions": ["igs","iges"]
  },
  "model/mesh": {
    "source": "iana",
    "compressible": false,
    "extensions": ["msh","mesh","silo"]
  },
  "model/mtl": {
    "source": "iana",
    "extensions": ["mtl"]
  },
  "model/obj": {
    "source": "iana",
    "extensions": ["obj"]
  },
  "model/step": {
    "source": "iana"
  },
  "model/step+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["stpx"]
  },
  "model/step+zip": {
    "source": "iana",
    "compressible": false,
    "extensions": ["stpz"]
  },
  "model/step-xml+zip": {
    "source": "iana",
    "compressible": false,
    "extensions": ["stpxz"]
  },
  "model/stl": {
    "source": "iana",
    "extensions": ["stl"]
  },
  "model/vnd.collada+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["dae"]
  },
  "model/vnd.dwf": {
    "source": "iana",
    "extensions": ["dwf"]
  },
  "model/vnd.flatland.3dml": {
    "source": "iana"
  },
  "model/vnd.gdl": {
    "source": "iana",
    "extensions": ["gdl"]
  },
  "model/vnd.gs-gdl": {
    "source": "apache"
  },
  "model/vnd.gs.gdl": {
    "source": "iana"
  },
  "model/vnd.gtw": {
    "source": "iana",
    "extensions": ["gtw"]
  },
  "model/vnd.moml+xml": {
    "source": "iana",
    "compressible": true
  },
  "model/vnd.mts": {
    "source": "iana",
    "extensions": ["mts"]
  },
  "model/vnd.opengex": {
    "source": "iana",
    "extensions": ["ogex"]
  },
  "model/vnd.parasolid.transmit.binary": {
    "source": "iana",
    "extensions": ["x_b"]
  },
  "model/vnd.parasolid.transmit.text": {
    "source": "iana",
    "extensions": ["x_t"]
  },
  "model/vnd.pytha.pyox": {
    "source": "iana"
  },
  "model/vnd.rosette.annotated-data-model": {
    "source": "iana"
  },
  "model/vnd.sap.vds": {
    "source": "iana",
    "extensions": ["vds"]
  },
  "model/vnd.usdz+zip": {
    "source": "iana",
    "compressible": false,
    "extensions": ["usdz"]
  },
  "model/vnd.valve.source.compiled-map": {
    "source": "iana",
    "extensions": ["bsp"]
  },
  "model/vnd.vtu": {
    "source": "iana",
    "extensions": ["vtu"]
  },
  "model/vrml": {
    "source": "iana",
    "compressible": false,
    "extensions": ["wrl","vrml"]
  },
  "model/x3d+binary": {
    "source": "apache",
    "compressible": false,
    "extensions": ["x3db","x3dbz"]
  },
  "model/x3d+fastinfoset": {
    "source": "iana",
    "extensions": ["x3db"]
  },
  "model/x3d+vrml": {
    "source": "apache",
    "compressible": false,
    "extensions": ["x3dv","x3dvz"]
  },
  "model/x3d+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["x3d","x3dz"]
  },
  "model/x3d-vrml": {
    "source": "iana",
    "extensions": ["x3dv"]
  },
  "multipart/alternative": {
    "source": "iana",
    "compressible": false
  },
  "multipart/appledouble": {
    "source": "iana"
  },
  "multipart/byteranges": {
    "source": "iana"
  },
  "multipart/digest": {
    "source": "iana"
  },
  "multipart/encrypted": {
    "source": "iana",
    "compressible": false
  },
  "multipart/form-data": {
    "source": "iana",
    "compressible": false
  },
  "multipart/header-set": {
    "source": "iana"
  },
  "multipart/mixed": {
    "source": "iana"
  },
  "multipart/multilingual": {
    "source": "iana"
  },
  "multipart/parallel": {
    "source": "iana"
  },
  "multipart/related": {
    "source": "iana",
    "compressible": false
  },
  "multipart/report": {
    "source": "iana"
  },
  "multipart/signed": {
    "source": "iana",
    "compressible": false
  },
  "multipart/vnd.bint.med-plus": {
    "source": "iana"
  },
  "multipart/voice-message": {
    "source": "iana"
  },
  "multipart/x-mixed-replace": {
    "source": "iana"
  },
  "text/1d-interleaved-parityfec": {
    "source": "iana"
  },
  "text/cache-manifest": {
    "source": "iana",
    "compressible": true,
    "extensions": ["appcache","manifest"]
  },
  "text/calendar": {
    "source": "iana",
    "extensions": ["ics","ifb"]
  },
  "text/calender": {
    "compressible": true
  },
  "text/cmd": {
    "compressible": true
  },
  "text/coffeescript": {
    "extensions": ["coffee","litcoffee"]
  },
  "text/cql": {
    "source": "iana"
  },
  "text/cql-expression": {
    "source": "iana"
  },
  "text/cql-identifier": {
    "source": "iana"
  },
  "text/css": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true,
    "extensions": ["css"]
  },
  "text/csv": {
    "source": "iana",
    "compressible": true,
    "extensions": ["csv"]
  },
  "text/csv-schema": {
    "source": "iana"
  },
  "text/directory": {
    "source": "iana"
  },
  "text/dns": {
    "source": "iana"
  },
  "text/ecmascript": {
    "source": "iana"
  },
  "text/encaprtp": {
    "source": "iana"
  },
  "text/enriched": {
    "source": "iana"
  },
  "text/fhirpath": {
    "source": "iana"
  },
  "text/flexfec": {
    "source": "iana"
  },
  "text/fwdred": {
    "source": "iana"
  },
  "text/gff3": {
    "source": "iana"
  },
  "text/grammar-ref-list": {
    "source": "iana"
  },
  "text/html": {
    "source": "iana",
    "compressible": true,
    "extensions": ["html","htm","shtml"]
  },
  "text/jade": {
    "extensions": ["jade"]
  },
  "text/javascript": {
    "source": "iana",
    "compressible": true
  },
  "text/jcr-cnd": {
    "source": "iana"
  },
  "text/jsx": {
    "compressible": true,
    "extensions": ["jsx"]
  },
  "text/less": {
    "compressible": true,
    "extensions": ["less"]
  },
  "text/markdown": {
    "source": "iana",
    "compressible": true,
    "extensions": ["markdown","md"]
  },
  "text/mathml": {
    "source": "nginx",
    "extensions": ["mml"]
  },
  "text/mdx": {
    "compressible": true,
    "extensions": ["mdx"]
  },
  "text/mizar": {
    "source": "iana"
  },
  "text/n3": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true,
    "extensions": ["n3"]
  },
  "text/parameters": {
    "source": "iana",
    "charset": "UTF-8"
  },
  "text/parityfec": {
    "source": "iana"
  },
  "text/plain": {
    "source": "iana",
    "compressible": true,
    "extensions": ["txt","text","conf","def","list","log","in","ini"]
  },
  "text/provenance-notation": {
    "source": "iana",
    "charset": "UTF-8"
  },
  "text/prs.fallenstein.rst": {
    "source": "iana"
  },
  "text/prs.lines.tag": {
    "source": "iana",
    "extensions": ["dsc"]
  },
  "text/prs.prop.logic": {
    "source": "iana"
  },
  "text/raptorfec": {
    "source": "iana"
  },
  "text/red": {
    "source": "iana"
  },
  "text/rfc822-headers": {
    "source": "iana"
  },
  "text/richtext": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rtx"]
  },
  "text/rtf": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rtf"]
  },
  "text/rtp-enc-aescm128": {
    "source": "iana"
  },
  "text/rtploopback": {
    "source": "iana"
  },
  "text/rtx": {
    "source": "iana"
  },
  "text/sgml": {
    "source": "iana",
    "extensions": ["sgml","sgm"]
  },
  "text/shaclc": {
    "source": "iana"
  },
  "text/shex": {
    "source": "iana",
    "extensions": ["shex"]
  },
  "text/slim": {
    "extensions": ["slim","slm"]
  },
  "text/spdx": {
    "source": "iana",
    "extensions": ["spdx"]
  },
  "text/strings": {
    "source": "iana"
  },
  "text/stylus": {
    "extensions": ["stylus","styl"]
  },
  "text/t140": {
    "source": "iana"
  },
  "text/tab-separated-values": {
    "source": "iana",
    "compressible": true,
    "extensions": ["tsv"]
  },
  "text/troff": {
    "source": "iana",
    "extensions": ["t","tr","roff","man","me","ms"]
  },
  "text/turtle": {
    "source": "iana",
    "charset": "UTF-8",
    "extensions": ["ttl"]
  },
  "text/ulpfec": {
    "source": "iana"
  },
  "text/uri-list": {
    "source": "iana",
    "compressible": true,
    "extensions": ["uri","uris","urls"]
  },
  "text/vcard": {
    "source": "iana",
    "compressible": true,
    "extensions": ["vcard"]
  },
  "text/vnd.a": {
    "source": "iana"
  },
  "text/vnd.abc": {
    "source": "iana"
  },
  "text/vnd.ascii-art": {
    "source": "iana"
  },
  "text/vnd.curl": {
    "source": "iana",
    "extensions": ["curl"]
  },
  "text/vnd.curl.dcurl": {
    "source": "apache",
    "extensions": ["dcurl"]
  },
  "text/vnd.curl.mcurl": {
    "source": "apache",
    "extensions": ["mcurl"]
  },
  "text/vnd.curl.scurl": {
    "source": "apache",
    "extensions": ["scurl"]
  },
  "text/vnd.debian.copyright": {
    "source": "iana",
    "charset": "UTF-8"
  },
  "text/vnd.dmclientscript": {
    "source": "iana"
  },
  "text/vnd.dvb.subtitle": {
    "source": "iana",
    "extensions": ["sub"]
  },
  "text/vnd.esmertec.theme-descriptor": {
    "source": "iana",
    "charset": "UTF-8"
  },
  "text/vnd.familysearch.gedcom": {
    "source": "iana",
    "extensions": ["ged"]
  },
  "text/vnd.ficlab.flt": {
    "source": "iana"
  },
  "text/vnd.fly": {
    "source": "iana",
    "extensions": ["fly"]
  },
  "text/vnd.fmi.flexstor": {
    "source": "iana",
    "extensions": ["flx"]
  },
  "text/vnd.gml": {
    "source": "iana"
  },
  "text/vnd.graphviz": {
    "source": "iana",
    "extensions": ["gv"]
  },
  "text/vnd.hans": {
    "source": "iana"
  },
  "text/vnd.hgl": {
    "source": "iana"
  },
  "text/vnd.in3d.3dml": {
    "source": "iana",
    "extensions": ["3dml"]
  },
  "text/vnd.in3d.spot": {
    "source": "iana",
    "extensions": ["spot"]
  },
  "text/vnd.iptc.newsml": {
    "source": "iana"
  },
  "text/vnd.iptc.nitf": {
    "source": "iana"
  },
  "text/vnd.latex-z": {
    "source": "iana"
  },
  "text/vnd.motorola.reflex": {
    "source": "iana"
  },
  "text/vnd.ms-mediapackage": {
    "source": "iana"
  },
  "text/vnd.net2phone.commcenter.command": {
    "source": "iana"
  },
  "text/vnd.radisys.msml-basic-layout": {
    "source": "iana"
  },
  "text/vnd.senx.warpscript": {
    "source": "iana"
  },
  "text/vnd.si.uricatalogue": {
    "source": "iana"
  },
  "text/vnd.sosi": {
    "source": "iana"
  },
  "text/vnd.sun.j2me.app-descriptor": {
    "source": "iana",
    "charset": "UTF-8",
    "extensions": ["jad"]
  },
  "text/vnd.trolltech.linguist": {
    "source": "iana",
    "charset": "UTF-8"
  },
  "text/vnd.wap.si": {
    "source": "iana"
  },
  "text/vnd.wap.sl": {
    "source": "iana"
  },
  "text/vnd.wap.wml": {
    "source": "iana",
    "extensions": ["wml"]
  },
  "text/vnd.wap.wmlscript": {
    "source": "iana",
    "extensions": ["wmls"]
  },
  "text/vtt": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true,
    "extensions": ["vtt"]
  },
  "text/x-asm": {
    "source": "apache",
    "extensions": ["s","asm"]
  },
  "text/x-c": {
    "source": "apache",
    "extensions": ["c","cc","cxx","cpp","h","hh","dic"]
  },
  "text/x-component": {
    "source": "nginx",
    "extensions": ["htc"]
  },
  "text/x-fortran": {
    "source": "apache",
    "extensions": ["f","for","f77","f90"]
  },
  "text/x-gwt-rpc": {
    "compressible": true
  },
  "text/x-handlebars-template": {
    "extensions": ["hbs"]
  },
  "text/x-java-source": {
    "source": "apache",
    "extensions": ["java"]
  },
  "text/x-jquery-tmpl": {
    "compressible": true
  },
  "text/x-lua": {
    "extensions": ["lua"]
  },
  "text/x-markdown": {
    "compressible": true,
    "extensions": ["mkd"]
  },
  "text/x-nfo": {
    "source": "apache",
    "extensions": ["nfo"]
  },
  "text/x-opml": {
    "source": "apache",
    "extensions": ["opml"]
  },
  "text/x-org": {
    "compressible": true,
    "extensions": ["org"]
  },
  "text/x-pascal": {
    "source": "apache",
    "extensions": ["p","pas"]
  },
  "text/x-processing": {
    "compressible": true,
    "extensions": ["pde"]
  },
  "text/x-sass": {
    "extensions": ["sass"]
  },
  "text/x-scss": {
    "extensions": ["scss"]
  },
  "text/x-setext": {
    "source": "apache",
    "extensions": ["etx"]
  },
  "text/x-sfv": {
    "source": "apache",
    "extensions": ["sfv"]
  },
  "text/x-suse-ymp": {
    "compressible": true,
    "extensions": ["ymp"]
  },
  "text/x-uuencode": {
    "source": "apache",
    "extensions": ["uu"]
  },
  "text/x-vcalendar": {
    "source": "apache",
    "extensions": ["vcs"]
  },
  "text/x-vcard": {
    "source": "apache",
    "extensions": ["vcf"]
  },
  "text/xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xml"]
  },
  "text/xml-external-parsed-entity": {
    "source": "iana"
  },
  "text/yaml": {
    "compressible": true,
    "extensions": ["yaml","yml"]
  },
  "video/1d-interleaved-parityfec": {
    "source": "iana"
  },
  "video/3gpp": {
    "source": "iana",
    "extensions": ["3gp","3gpp"]
  },
  "video/3gpp-tt": {
    "source": "iana"
  },
  "video/3gpp2": {
    "source": "iana",
    "extensions": ["3g2"]
  },
  "video/av1": {
    "source": "iana"
  },
  "video/bmpeg": {
    "source": "iana"
  },
  "video/bt656": {
    "source": "iana"
  },
  "video/celb": {
    "source": "iana"
  },
  "video/dv": {
    "source": "iana"
  },
  "video/encaprtp": {
    "source": "iana"
  },
  "video/ffv1": {
    "source": "iana"
  },
  "video/flexfec": {
    "source": "iana"
  },
  "video/h261": {
    "source": "iana",
    "extensions": ["h261"]
  },
  "video/h263": {
    "source": "iana",
    "extensions": ["h263"]
  },
  "video/h263-1998": {
    "source": "iana"
  },
  "video/h263-2000": {
    "source": "iana"
  },
  "video/h264": {
    "source": "iana",
    "extensions": ["h264"]
  },
  "video/h264-rcdo": {
    "source": "iana"
  },
  "video/h264-svc": {
    "source": "iana"
  },
  "video/h265": {
    "source": "iana"
  },
  "video/iso.segment": {
    "source": "iana",
    "extensions": ["m4s"]
  },
  "video/jpeg": {
    "source": "iana",
    "extensions": ["jpgv"]
  },
  "video/jpeg2000": {
    "source": "iana"
  },
  "video/jpm": {
    "source": "apache",
    "extensions": ["jpm","jpgm"]
  },
  "video/jxsv": {
    "source": "iana"
  },
  "video/mj2": {
    "source": "iana",
    "extensions": ["mj2","mjp2"]
  },
  "video/mp1s": {
    "source": "iana"
  },
  "video/mp2p": {
    "source": "iana"
  },
  "video/mp2t": {
    "source": "iana",
    "extensions": ["ts"]
  },
  "video/mp4": {
    "source": "iana",
    "compressible": false,
    "extensions": ["mp4","mp4v","mpg4"]
  },
  "video/mp4v-es": {
    "source": "iana"
  },
  "video/mpeg": {
    "source": "iana",
    "compressible": false,
    "extensions": ["mpeg","mpg","mpe","m1v","m2v"]
  },
  "video/mpeg4-generic": {
    "source": "iana"
  },
  "video/mpv": {
    "source": "iana"
  },
  "video/nv": {
    "source": "iana"
  },
  "video/ogg": {
    "source": "iana",
    "compressible": false,
    "extensions": ["ogv"]
  },
  "video/parityfec": {
    "source": "iana"
  },
  "video/pointer": {
    "source": "iana"
  },
  "video/quicktime": {
    "source": "iana",
    "compressible": false,
    "extensions": ["qt","mov"]
  },
  "video/raptorfec": {
    "source": "iana"
  },
  "video/raw": {
    "source": "iana"
  },
  "video/rtp-enc-aescm128": {
    "source": "iana"
  },
  "video/rtploopback": {
    "source": "iana"
  },
  "video/rtx": {
    "source": "iana"
  },
  "video/scip": {
    "source": "iana"
  },
  "video/smpte291": {
    "source": "iana"
  },
  "video/smpte292m": {
    "source": "iana"
  },
  "video/ulpfec": {
    "source": "iana"
  },
  "video/vc1": {
    "source": "iana"
  },
  "video/vc2": {
    "source": "iana"
  },
  "video/vnd.cctv": {
    "source": "iana"
  },
  "video/vnd.dece.hd": {
    "source": "iana",
    "extensions": ["uvh","uvvh"]
  },
  "video/vnd.dece.mobile": {
    "source": "iana",
    "extensions": ["uvm","uvvm"]
  },
  "video/vnd.dece.mp4": {
    "source": "iana"
  },
  "video/vnd.dece.pd": {
    "source": "iana",
    "extensions": ["uvp","uvvp"]
  },
  "video/vnd.dece.sd": {
    "source": "iana",
    "extensions": ["uvs","uvvs"]
  },
  "video/vnd.dece.video": {
    "source": "iana",
    "extensions": ["uvv","uvvv"]
  },
  "video/vnd.directv.mpeg": {
    "source": "iana"
  },
  "video/vnd.directv.mpeg-tts": {
    "source": "iana"
  },
  "video/vnd.dlna.mpeg-tts": {
    "source": "iana"
  },
  "video/vnd.dvb.file": {
    "source": "iana",
    "extensions": ["dvb"]
  },
  "video/vnd.fvt": {
    "source": "iana",
    "extensions": ["fvt"]
  },
  "video/vnd.hns.video": {
    "source": "iana"
  },
  "video/vnd.iptvforum.1dparityfec-1010": {
    "source": "iana"
  },
  "video/vnd.iptvforum.1dparityfec-2005": {
    "source": "iana"
  },
  "video/vnd.iptvforum.2dparityfec-1010": {
    "source": "iana"
  },
  "video/vnd.iptvforum.2dparityfec-2005": {
    "source": "iana"
  },
  "video/vnd.iptvforum.ttsavc": {
    "source": "iana"
  },
  "video/vnd.iptvforum.ttsmpeg2": {
    "source": "iana"
  },
  "video/vnd.motorola.video": {
    "source": "iana"
  },
  "video/vnd.motorola.videop": {
    "source": "iana"
  },
  "video/vnd.mpegurl": {
    "source": "iana",
    "extensions": ["mxu","m4u"]
  },
  "video/vnd.ms-playready.media.pyv": {
    "source": "iana",
    "extensions": ["pyv"]
  },
  "video/vnd.nokia.interleaved-multimedia": {
    "source": "iana"
  },
  "video/vnd.nokia.mp4vr": {
    "source": "iana"
  },
  "video/vnd.nokia.videovoip": {
    "source": "iana"
  },
  "video/vnd.objectvideo": {
    "source": "iana"
  },
  "video/vnd.radgamettools.bink": {
    "source": "iana"
  },
  "video/vnd.radgamettools.smacker": {
    "source": "iana"
  },
  "video/vnd.sealed.mpeg1": {
    "source": "iana"
  },
  "video/vnd.sealed.mpeg4": {
    "source": "iana"
  },
  "video/vnd.sealed.swf": {
    "source": "iana"
  },
  "video/vnd.sealedmedia.softseal.mov": {
    "source": "iana"
  },
  "video/vnd.uvvu.mp4": {
    "source": "iana",
    "extensions": ["uvu","uvvu"]
  },
  "video/vnd.vivo": {
    "source": "iana",
    "extensions": ["viv"]
  },
  "video/vnd.youtube.yt": {
    "source": "iana"
  },
  "video/vp8": {
    "source": "iana"
  },
  "video/vp9": {
    "source": "iana"
  },
  "video/webm": {
    "source": "apache",
    "compressible": false,
    "extensions": ["webm"]
  },
  "video/x-f4v": {
    "source": "apache",
    "extensions": ["f4v"]
  },
  "video/x-fli": {
    "source": "apache",
    "extensions": ["fli"]
  },
  "video/x-flv": {
    "source": "apache",
    "compressible": false,
    "extensions": ["flv"]
  },
  "video/x-m4v": {
    "source": "apache",
    "extensions": ["m4v"]
  },
  "video/x-matroska": {
    "source": "apache",
    "compressible": false,
    "extensions": ["mkv","mk3d","mks"]
  },
  "video/x-mng": {
    "source": "apache",
    "extensions": ["mng"]
  },
  "video/x-ms-asf": {
    "source": "apache",
    "extensions": ["asf","asx"]
  },
  "video/x-ms-vob": {
    "source": "apache",
    "extensions": ["vob"]
  },
  "video/x-ms-wm": {
    "source": "apache",
    "extensions": ["wm"]
  },
  "video/x-ms-wmv": {
    "source": "apache",
    "compressible": false,
    "extensions": ["wmv"]
  },
  "video/x-ms-wmx": {
    "source": "apache",
    "extensions": ["wmx"]
  },
  "video/x-ms-wvx": {
    "source": "apache",
    "extensions": ["wvx"]
  },
  "video/x-msvideo": {
    "source": "apache",
    "extensions": ["avi"]
  },
  "video/x-sgi-movie": {
    "source": "apache",
    "extensions": ["movie"]
  },
  "video/x-smv": {
    "source": "apache",
    "extensions": ["smv"]
  },
  "x-conference/x-cooltalk": {
    "source": "apache",
    "extensions": ["ice"]
  },
  "x-shader/x-fragment": {
    "compressible": true
  },
  "x-shader/x-vertex": {
    "compressible": true
  }
}
===== ./Hare.h =====
// Hare.h
#pragma once
#include <string>
#include <cstdlib>
#include <ctime>

class Hare {
public:
    Hare() : square(1) {}
    void move();
    bool victor() const;
    void win() const;
    int square;
};

inline void Hare::move() {
    int x = 1 + rand() % 10;
    if (x >= 1 && x <= 2) {
        square += 0;
    }
    else if (x >= 3 && x <= 4) {
        square += 9;
    }
    else if (x == 5) {
        square -= 12;
    }
    else if (x >= 6 && x <= 8) {
        ++square;
    }
    else {
        square -= 2;
    }
    if (square < 1) {
        square = 1;
    }
}

inline bool Hare::victor() const {
    return square >= 70;
}

inline void Hare::win() const {
    std::cout << "HARE WINS!!! YAY!!!" << std::endl;
}===== ./program7.cpp =====
#include <iostream>
using namespace std;

const int ROWS    = 3,
          COLUMNS = 7;

double inputValidate();
void getInfo(double[][COLUMNS]);
double getAverage(const double[][COLUMNS]);
double getLeast(const double[][COLUMNS]);
double getHighest(const double[][COLUMNS]);

int main()
{
    double pounds_of_food[ROWS][COLUMNS];
    double average_per_day,
           least_per_week,
           highest_per_week;

    getInfo(pounds_of_food);

    average_per_day = getAverage(pounds_of_food);
    cout << "Average amount eaten during the week per day = "
         << average_per_day
         << endl;

    least_per_week = getLeast(pounds_of_food);
    cout << "Lowest amount eaten during the week = "
         << least_per_week
         << endl;

    highest_per_week = getHighest(pounds_of_food);
    cout << "Highest amount eaten during the week = "
         << highest_per_week
         << endl
         << endl;

    return 0;
} // End int main()

double inputValidate()
{
    double number;
    while(!(cin >> number) || number < 0)
    {
        cout << "Error, enter a positive number: ";
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
    }
    return number;
}

void getInfo(double array[][COLUMNS])
{
    cout << "\nEnter the following information, " << endl
         << "How many pounds of food eaten per day: " << endl;
    for(int row = 0; row < ROWS; row++)
    {
        for(int column = 0; column < COLUMNS; column++)
        {
            cout << "Monkey #"    // monkey #1, on day 1: ksdjfsdfl
                 << (row + 1)
                 << ", on day "
                 << (column + 1)
                 << ": ";

            array[row][column] = inputValidate();
        }
        cout << endl;
    }
}

double getAverage(const double array[][COLUMNS])
{
    double columns_sum;
    int total_elements = ROWS * COLUMNS; // 15

    for(int row = 0; row < ROWS; row++)
    {
        for(int column = 0; column < COLUMNS; column++)
            columns_sum += array[row][column];
    }

    return columns_sum / total_elements;
}

double getLeast(const double array[][COLUMNS])
{
    double sum, 
           local_array[ROWS];

    for(int row = 0; row < ROWS; row++)
    {
        sum = 0;
        for(int column = 0; column < COLUMNS; column++)
            sum += array[row][column];

        local_array[row] = sum;

    }

    double lowest_number = local_array[0];

    for (int number = 1; number < ROWS; number++)
    {
        if (local_array[number] <= lowest_number)
            lowest_number = local_array[number];
        
    }

    return lowest_number;
}

double getHighest(const double array[][COLUMNS])
{
    double sum, 
           local_array[ROWS];

    for(int row = 0; row < ROWS; row++)
    {
        sum = 0;
        for(int column = 0; column < COLUMNS; column++)
            sum += array[row][column];

        local_array[row] = sum;

    }

    double highest_number = local_array[0];
    for (int number = 1; number < ROWS; number++)
    {
        if (local_array[number] >= highest_number)
            highest_number = local_array[number];
        
    }
    
    return highest_number;
}===== ./airline_ticket.c =====
#include <stdio.h>

int main()
{
int r[]={0,0,0,0,0,0,0,0,0,0}; 
int n=0;
while(n<10){
int myNum;
int mySeat=0;


printf("Choose the arrangement you want \n");
printf("Enter 1 for first class\n");
printf("Enter 2 for economy class\n");
scanf("%d", &myNum);



if (myNum==1){
printf("You chose  first class\n");
  for(int i=0;i<5;i++){
      if(r[i]==0){
         mySeat=i+1;
         r[i]=1;
        printf("Your sit number is %d",mySeat);
        printf("\n");
         break;
      }
  }
  if(mySeat==0){printf("All seats are full\n");}
}
else if(myNum==2){
printf("You choose economy class\n");
for(int i=5;i<=9;i++){
      if(r[i]==0){
         mySeat=i+1;
         r[i]=1;
         printf("Your sit number is %d",mySeat);
         printf("\n");
         break;
      }
      
  }
  if(mySeat==0){printf("All seats are full\n");}
}
    
}
    return 0;
}===== ./polyhedra_Stack_Queue.cpp =====
#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <vector>
#include <iomanip>

using namespace std;

class Polyhedra {
public:
    string name;
    string wythoff;
    string symbol;
    string c_num;
    string w_num;
    string u_num;
    string k_num;
    int vertices;
    int edges;
    int faces;
    string faces_by_type;

    void display(int longest_line_length) const {
        cout << setw(longest_line_length) << left << name << " ";
        cout << setw(17) << left << wythoff << " ";
        cout << setw(6) << left << symbol << " ";
        cout << setw(8) << left << c_num << " ";
        cout << setw(6) << left << w_num << " ";
        cout << setw(6) << left << u_num << " ";
        cout << setw(6) << left << k_num << " ";
        cout << setw(6) << left << vertices << " ";
        cout << setw(8) << left << edges << " ";
        cout << setw(6) << left << faces << " ";
        cout << setw(10) << left << faces_by_type << "\n";
    }
};

class Stack {
private:
    Polyhedra arr[50]; 
    int top;

public:
    Stack() {
        top = -1;
    }

    bool isEmpty() {
        return top == -1;
    }

    bool isFull() {
        return top == 49; 
    }

    void push(Polyhedra value) {
        if (isFull()) {
            cout << "Stack is full" << endl;
            return;
        }
        arr[++top] = value;
        cout << "Now pushing " << value.name << endl;
    }

    void pop() {
        if (isEmpty()) {
            cout << "Stack is empty" << endl;
            return;
        }
        cout << "Now popping " << arr[top].name << endl;
        top--;
    }
};

class Queue {
private:
    Polyhedra arr[50]; 
    int front, rear;

public:
    Queue() {
        front = rear = -1;
    }

    bool isEmpty() {
        return front == -1;
    }

    bool isFull() {
        return (front == 0 && rear == 49) || (rear == (front - 1) % 49); 
    }

    void push(Polyhedra value) {
        if (isFull()) {
            cout << "Queue is full" << endl;
            return;
        }
        if (front == -1) {
            front = rear = 0;
        } else {
            rear = (rear + 1) % 50;
        }
        arr[rear] = value;
        cout << "Now pushing " << value.name << endl;
    }

    void pop() {
        if (isEmpty()) {
            cout << "Queue is empty" << endl;
            return;
        }
        cout << "Now popping " << arr[front].name << endl;
        if (front == rear) {
            front = rear = -1;
        } else {
            front = (front + 1) % 50;
        }
    }
};

int main() {
    vector<Polyhedra> data;
    ifstream inputFile("polyhedra.txt");
    if (inputFile) {
        string line;
        while (getline(inputFile, line)) {
            stringstream ss(line);
            Polyhedra polyhedron;
            getline(ss, polyhedron.name, ',');
            getline(ss, polyhedron.wythoff, ',');
            getline(ss, polyhedron.symbol, ',');
            getline(ss, polyhedron.c_num, ',');
            getline(ss, polyhedron.w_num, ',');
            getline(ss, polyhedron.u_num, ',');
            getline(ss, polyhedron.k_num, ',');
            ss >> polyhedron.vertices;
            ss.ignore();
            ss >> polyhedron.edges;
            ss.ignore();
            ss >> polyhedron.faces;
            ss.ignore();
            getline(ss, polyhedron.faces_by_type, '\n');
            data.push_back(polyhedron);
        }
        inputFile.close();
    } else {
        cerr << "Error: Unable to open input file." << endl;
        return 1;
    }

    int longest_line_length = 0;
    for (const auto& polyhedron : data) {
        if (polyhedron.name.length() > longest_line_length) {
            longest_line_length = polyhedron.name.length();
        }
    }

    Stack myStack;
    Queue myQueue;

    for (const auto& polyhedron : data) {
        myStack.push(polyhedron);
        myQueue.push(polyhedron);
    }

    int choice = 0;
    while (choice != 4) {
        cout << "\nMenu:\n";
        cout << "1. List Original Data\n";
        cout << "2. Report of Stack of Data\n";
        cout << "3. Report of Queue of Data\n";
        cout << "4. End Program\n";
        cout << "Enter choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "\nOriginal Data:\n";
                cout << setw(longest_line_length) << left << "Name" << " ";
                cout << setw(17) << left << "Wythoff" << " ";
                cout << setw(6) << left << "Symbol" << " ";
                cout << setw(8) << left << "C#" << " ";
                cout << setw(6) << left << "W#" << " ";
                cout << setw(6) << left << "U#" << " ";
                cout << setw(6) << left << "K#" << " ";
                cout << setw(6) << left << "Vertices" << " ";
                cout << setw(8) << left << "Edges" << " ";
                cout << setw(6) << left << "Faces" << " ";
                cout << setw(10) << left << "Faces by Type" << "\n";
                for (const auto& polyhedron : data) {
                    polyhedron.display(longest_line_length);
                }
                break;
            case 2:
                cout << "\nStack of Data:\n";
                while (!myStack.isEmpty()) {
                    myStack.pop();
                }
                break;
            case 3:
                cout << "\nQueue of Data:\n";
                while (!myQueue.isEmpty()) {
                    myQueue.pop();
                }
                break;
            case 4:
                cout << "\nExiting program.\n";
                break;
            default:
                cout << "\nInvalid choice. Please try again.\n";
                break;
        }
    }

    return 0;
}===== ./history.cpp =====
#include <iostream>
#include <vector>
#include <algorithm>
#include <fstream>

using namespace std;

class Player {
public:
    string name;
    int points;
    Player(string n, int p = 0) : name(n), points(p) {}
};

vector<Player> load_players_from_file() {
    vector<Player> players;
    ifstream file("tournament_players.csv");
    if (file.is_open()) {
        string name;
        int points;
        while (file >> name >> points) {
            players.emplace_back(name, points);
        }
        file.close();
    }
    return players;
}

void save_players_to_file(const vector<Player>& players) {
    ofstream file("tournament_players.csv");
    if (file.is_open()) {
        for (const Player& player : players) {
            file << player.name << " " << player.points << "\n";
        }
        file.close();
    }
}

vector<pair<Player, Player>> generate_match_pairs(const vector<Player>& players) {
    vector<Player> shuffled_players = players;
    random_shuffle(shuffled_players.begin(), shuffled_players.end());
    vector<pair<Player, Player>> pairs;
    for (size_t i = 0; i < shuffled_players.size(); i += 2) {
        pairs.emplace_back(shuffled_players[i], shuffled_players[i + 1]);
    }
    return pairs;
}

int main() {
    vector<Player> players = load_players_from_file();
    vector<Player> winners;

    while (true) {
        cout << "\nMain Menu:\n";
        cout << "1: Input Number of Players and Assign IDs\n";
        cout << "2: Start Tournament\n";
        cout << "3: View Standings\n";
        cout << "4: Save Players\n";
        cout << "0: Exit\n";

        int choice;
        cout << "Enter your choice: ";
        cin >> choice;

        if (choice == 1) {
            int num_players;
            cout << "Enter the number of players: ";
            cin >> num_players;
            if (num_players < 2) {
                cout << "Need at least 2 players to create a match.\n";
            }
            else {
                players.clear();
                for (int i = 0; i < num_players; ++i) {
                    string name;
                    cout << "Enter the name of player " << i + 1 << ": ";
                    cin >> name;
                    players.emplace_back(name);
                }
                save_players_to_file(players);
                cout << "Players saved.\n";
            }
        }
        else if (choice == 2) {
            if (players.size() < 2) {
                cout << "Need at least 2 players to start the tournament.\n";
            }
            else {
                int round_number = 1;
                while (players.size() > 1) {
                    cout << "\nRound " << round_number << " Match Pairings:\n";
                    vector<pair<Player, Player>> pairing_table = generate_match_pairs(players);
                    for (size_t i = 0; i < pairing_table.size(); ++i) {
                        cout << "Match " << i + 1 << ": " << pairing_table[i].first.name << " vs " << pairing_table[i].second.name << "\n";
                    }
                    for (auto& match : pairing_table) {
                        cout << "Enter the winner for Match: " << match.first.name << " vs " << match.second.name << "\n";
                        cout << "1: " << match.first.name << "\n";
                        cout << "2: " << match.second.name << "\n";
                        cout << "0: Save and Exit\n";
                        int winner_choice;
                        cout << "Enter the winner (1, 2, or 0): ";
                        cin >> winner_choice;
                        if (winner_choice == 0) {
                            save_players_to_file(players);
                            cout << "Tournament progress saved.\n";
                            return 0;
                        }
                        else if (winner_choice == 1) {
                            winners.push_back(match.first);
                        }
                        else if (winner_choice == 2) {
                            winners.push_back(match.second);
                        }
                        else {
                            cout << "Invalid choice, skipping match.\n";
                            continue;
                        }
                        match.first.points += 2;
                        match.second.points += 2;
                    }
                    players = winners;
                    winners.clear();
                    ++round_number;
                }
            }
        }
        else if (choice == 3) {
            sort(players.begin(), players.end(), [](const Player& a, const Player& b) {
                return a.points > b.points;
                });
            for (size_t i = 0; i < players.size(); ++i) {
                cout << i + 1 << ". " << players[i].name << " - Points: " << players[i].points << "\n";
            }
        }
        else if (choice == 4) {
            save_players_to_file(players);
            cout << "Players saved.\n";
        }
        else if (choice == 0) {
            break;
        }
        else {
            cout << "Invalid choice. Please choose again.\n";
        }
    }

    return 0;
}===== ./grades.txt =====
George Martinez
78 89 77 98 66
Cynthia Garcia
99 100 85 79 80
Michael Sustaita
69 47 60 87 100
Isaiah Vasquez
89 100 100 86 66
Charlie Delgado
46 0 39 79 100
===== ./student_grades_struct_cpp.cpp =====
#include <iostream>
#include <string>
#include <fstream>

using namespace std;

struct studentInfo
{
    string studentName;
    double studentGrade;
    string studentMajor;
};

void averageGrade(studentInfo student[]);

int main ()
{
    cout << "Please enter the file you wish to open:" << endl;
    string fileName;
    cin >> fileName;

    ifstream infile;
    infile.open("grades.txt");

    if (!infile)
    {
        cout << "Error! Cannot find specified file!" << endl;

        return 1;
    }

    studentInfo array[11];
    int i;

    for (int i = 0; i < 11; i ++)
    {
        infile >> array[i].studentName >>  array[i].studentGrade >>array[i].studentMajor;
    }

    for (int i = 0; i < 11; i++)
    {
        cout << array[i].studentName << " ";
        cout << array[i].studentGrade << " ";
        cout << array[i].studentMajor << "\n ";
    }

    return 0;
}
void averageGrade(studentInfo[] student[], int i){
        double average;
        double total = 0;
        int j;
            for (j = 0; j < 5; j++){
                total = total + studentInfo.array[i];
                //student[i] << endl;
            }
            average = total / 5;
            cout << " average", average;
            if ( average > 90 && average <= 100)
                cout << " The average grade is: A\n";
            else if (average > 80 && average <= 90)
                cout << " The average grade is: B\n";
            else if (average > 70 && average <= 80)
                cout << " The average grade is: C\n";
            else if (average > 60 && average <= 70)
                cout << " The average grade is: D\n";
            else if (average < 60)
                cout <<" The average grade is: F\n";
}
===== ./inventoryProgram(example).c =====

#include <stdio.h>
#include <string.h>
#include <ctype.h>
#define SIZE 25
#define MAX 100

  typedef struct {
    char item[SIZE]; //item for the company
    char company[SIZE]; //company that sells the item
    int intStock; //how many of the item are instock
    char lastShipDate[SIZE]; //last ship date of that item
    double cost; //cost to make the item
    double price; //price of the item 
    } gaming;

//prompts the user to get a selection
int Menu(void);

//display the options to the user
void DisplayOptions(void);

//display some entries for inventory
void HardCodeEntries(gaming entry[],int *size);

//function to add a new entry to the inventory
void AddNewEntry(gaming entry[], int *size);

//function to delete a selected entry from inventory
void Delete(gaming entry[], int *size, int location);

//display the current inventory to screen
void Display(gaming entry[], int size);

//save the current inventory to file
void SaveInventory(gaming br[], int *size);

//clears out the entire inventory
void Clear(int *size);

//load the inventory from the file that is being saved
void LoadSalesRecords(gaming br[], int *size);

//find location of entry that is going to be edited or deleted
int FindLocation(gaming entry[], int size);

//display the options for editing an entry
int EditMenuOptions(void);

//function to edit selected entry
void Edit(gaming entry[], int location);

int main()
{
    int selection;
    gaming entry [150];
    int size=0;
    char trash;
    int choice;
    int location;

    //display size of inventory before and after
    printf("\nSIZE before: %d", size);
    HardCodeEntries(entry, &size);
    printf("\nSIZE after: %d\n\n", size);

    DisplayOptions();

    selection= Menu();

    while(selection != 8)
    {
          if (selection==1)
          { 
              printf("ADD ENTRIES\n\n");
              //display size of inventory before adding entries
              printf("\nSIZE BEFORE ADDING: %d\n", size);

              AddNewEntry(entry, &size);

              //display size of inventory after adding entries
              printf("\nSIZE AFTER ADDING: %d\n", size);
          }
          else if(selection==2)
          {
              printf("DELETE\n\n");
              //get location of entry to be deleted

              location = FindLocation(entry,size);
              printf("\nLOCATION: %d\n", location);

              Delete(entry, &size, location);
          }
          else if(selection==3)
          {
              printf("EDIT\n\n");

              //get the location of entry to be edited
              location = FindLocation(entry, size);

              printf("\nLOCATION: %d\n", location);
              Edit(entry, location);
          }
          else if(selection==4)
          {
              printf("DISPLAY OF INVENTORY\n\n");
              Display(entry, size);
          }
          else if(selection==5)
          {
              printf("SAVING CURRENT INVENTORY TO FILE\n\n");
              SaveInventory(entry, &size);
              //saves to file
          }
          else if(selection==6)
          {
              printf("CLEARING ENTIRE DATA\n\n");
              Clear(&size);
          }
          else if(selection==7)
          {
              printf("LOADING SALES RECORDS FROM FILE\n\n");
              LoadSalesRecords(entry, &size);
          }
          else
          {
              printf("COMMAND NOT RECOGNIZED\n\n");
          }

          printf("\n\n");
          DisplayOptions();

          //clears buffer
          scanf("%c", &trash);

          selection = Menu();
    }

    if (selection==8)
    {
        printf("\nHAVE A NICE DAY!!!\n\n");
    }
    return 0;
}

//display the options to the user
void DisplayOptions(void)
{
    printf("HELLO, WELCOME TO THE INVENTORY PROGRAM.\n");
    printf("THIS PROGRAM HOLDS INVENORY FOR ELECTRONICS COMPANIES ALONG WITH THEIR ITEMS, COST TO PRODUCE, PRICE,\n");
    printf("LAST SHIP DATE AND NUMBER IN STOCK\n");
    printf("THERE ARE COMPANIES IN THE INVENTORY ALREADY\n");
    printf("*********************************************\n\n");
    printf("HERE ARE YOUR OPTIONS\n");
    printf("1--ADD A NEW ENTRY\n");
    printf("2--DELETE AN ENTRY\n");
    printf("3--EDIT AN ENTRY\n");
    printf("4--DISPLAY THE INVENTORY\n");
    printf("5--SAVE CURRENT INVENTORY TO FILE\n");
    printf("6--CLEAR THE ENTIRE INVENTORY\n");
    printf("7--LOAD SALES RECORD FROM FILE\n");
    printf("8--QUIT\n");
}

//prompts the user to get a selection
int Menu(void)
{
    int selection;
    printf("\nENTER SELECTION: ");
    scanf("%d", &selection);

    return selection;
}

//display some entries for inventory
void HardCodeEntries(gaming entry[], int *size)
{
    strcpy(entry[0].item,"Xbox360");
    strcpy(entry[0].lastShipDate,"04/10/12");
    entry[0].cost=200.00;
    strcpy(entry[0].company,"Microsoft");
    entry[0].price=300.0;
    entry[0].intStock=150;

    *size = *size + 1;

    strcpy(entry[1].item,"PlayStation3");
    strcpy(entry[1].lastShipDate,"04/10/12");
    entry[1].cost=200.00;
    strcpy(entry[1].company,"Sony");
    entry[1].price=450.00;
    entry[1].intStock=100;

    *size = *size + 1;

    strcpy(entry[2].item,"XboxController");
    strcpy(entry[2].lastShipDate,"04/10/12");
    entry[2].cost=25.00;
    strcpy(entry[2].company,"Microsoft");
    entry[2].price=50.00;
    entry[2].intStock=50;

    *size = *size + 1;

    strcpy(entry[3].item,"PS3Controller");
    strcpy(entry[3].lastShipDate,"04/10/12");
    entry[3].cost=30.00;
    strcpy(entry[3].company,"Sony");
    entry[3].price=45.00;
    entry[3].intStock=50;

    *size = *size + 1;

    strcpy(entry[4].item,"Wii");
    strcpy(entry[4].lastShipDate,"04/10/12");
    entry[4].cost=100.00;
    strcpy(entry[4].company,"Nintendo");
    entry[4].price=200.00;
    entry[4].intStock=150;

    *size = *size + 1;

}

//function to add a new enty to the inventory
void AddNewEntry(gaming entry[], int *size)
{
    printf("\nENTER ITEM:\t\t");
    scanf("%s", entry[*size].item);

    printf("ENTER SHIP DATE:\t");
    scanf("%s", entry[*size].lastShipDate);

    printf("ENTER COST TO MAKE:\t\t");
    scanf("%lf", &entry[*size].cost);

    printf("ENTER COMPANY:\t\t");
    scanf("%s", entry[*size].company);

    printf("ENTER PRICE:\t\t");
    scanf("%lf", &entry[*size].price);

    printf("ENTER NUMBER IN STOCK:\t");
    scanf("%d", &entry[*size].intStock);

    *size = *size + 1;
}

//function to delete a selected entry from inventory
void Delete(gaming entry[], int *size, int location)
{
    entry[location] = entry[*size - 1];
    *size = *size - 1;
}

//display the current inventory onto the screen
void Display(gaming entry[], int size)
{
    int i;
    for(i=0; i<size; i++)
    {
        printf("\n");
        printf("ITEM:\t\t %s\n", entry[i].item);
        printf("LAST SHIP DATE:\t %s\n", entry[i].lastShipDate);
        printf("COST:\t\t %4.2f\n",entry[i].cost);
        printf("COMPANY:\t %s\n", entry[i].company);
        printf("PRICE:\t\t %4.2f\n", entry[i].price);
        printf("IN STOCK:\t %d\n", entry[i].intStock);
    }
}

//save the current inventory to a file
void SaveInventory(gaming br[], int *size)
{
    FILE *outp;

    if((outp = fopen("output.txt","w"))==0)
    {
        printf("\nCANNOT OPEN FILE\n");
        return;
    }

    //connect to the file
    outp= fopen("output.txt","w");

    fprintf(outp,"%d", *size);
    fwrite(br, sizeof(gaming),*size,outp);

    //close file pointer
    fclose(outp);
}

//clears out the entire inventory
void Clear(int *size)
{
    *size = 0;
}

//load the inventory from the file that is being saved
void LoadSalesRecords(gaming br[], int *size)
{
    FILE * inp;

    if((inp = fopen("output.txt","r"))==0)
    {
        printf("CANNOT OPEN FILE\n");
        return;
    }
    //connect to file
    inp = fopen("output.txt","r");

    fscanf(inp,"%d",size);
    fread(br, sizeof(gaming),*size,inp);

    //close file pointer
    fclose(inp);
}

//find location of entry that is going to be edited or deleted
int FindLocation(gaming entry[], int size)
{
    int i;
    int j;
    int length;
    char userItem[SIZE];

    //enter the item to delete
    printf("ENTER ITEM TO EDIT OR DELETE: ");
    scanf("%s", userItem);
    length = strlen(userItem);

    for(i=0; i<length; i++)
    {
        userItem[i] = toupper(userItem[i]);
    }
    printf("\nYOUR BRAND IN UPPER CASE IS:  %s\n", userItem);

    for(j=0; j<size; j++)
    {
        if(strcmp(entry[j].item,userItem)==0)
        {
            return j;
        }
    }
    return -1;
}

//function to edit a selected entry
void Edit(gaming entry[], int location)
{
    int choice;

    choice = EditMenuOptions();

    if(choice==1)
    {
        printf("\nENTER NEW ITEM: ");
        scanf("%s", &entry[location].item);
    }
    else if(choice==2)
    {
        printf("\nENTER SHIP DATE: ");
        scanf("%s", &entry[location].lastShipDate);
    }
    else if(choice==3)
    {
        printf("\nENTER COST TO MAKE: ");
        scanf("%lf", &entry[location].cost);
    }
    else if(choice==4)
    {
        printf("\nENTER COMPANY: ");
        scanf("%s", &entry[location].company);
    }
    else if (choice==5)
    {
        printf("\nENTER PRICE: ");
        scanf("%lf", &entry[location].price);
    }
    else if (choice==6)
    {
        printf("\nENTER HOW MANY IN STOCK: ");
        scanf("%d", &entry[location].intStock);
    }
    else if (choice==7)
    {

        printf("\nENTER NEW ITEM: ");
        scanf("%s", &entry[location].item);
        printf("\nENTER SHIP DATE: ");
        scanf("%s", &entry[location].lastShipDate);
        printf("\nENTER COST TO MAKE: ");
        scanf("%lf", &entry[location].cost);
        printf("\nENTER COMPANY: ");
        scanf("%s", &entry[location].company);
        printf("\nENTER PRICE: ");
        scanf("%lf", &entry[location].price);
        printf("\nENTER HOW MANY IN STOCK: ");
        scanf("%d", &entry[location].intStock);
    }
    else
    {
        printf("Invalid Entry");
    }
}

//display the options for edditing an entry
int EditMenuOptions(void)
{
    int choice;

    printf("\nENTER 1 TO EDIT ITEM\n");
    printf("ENTER 2 TO EDIT DATE\n");
    printf("ENTER 3 TO EDIT COST\n");
    printf("ENTER 4 TO EDIT COMPANY\n");
    printf("ENTER 5 TO EDIT PRICE\n");
    printf("ENTER 6 TO EDIT NUMBERS IN STOCK\n");
    printf("ENTER 7 TO EDIT ALL DATA\n");
    printf("\nENTER SELECTION: ");
    scanf("%d", &choice);
    return choice;
}===== ./Time.cpp =====
#include <iomanip>
#include <stdexcept>
#include <sstream>
#include <string>
#include "Time.h"
using namespace std;


Time::Time(int hour, int minute, int second) {
    setTime(hour, minute, second);
}

void Time::setTime(int h, int m, int s) {
    setHour(h);
    setMinute(m);
    setSecond(s);
}

void Time::setHour(int h) {
    if (h >= 0 && h < 24) {
        hour = h;
    } else {
        throw invalid_argument("hour must be 0-23");
    }
}

void Time::setMinute(int m) {
    if (m >= 0 && m < 60) {
        minute = m;
    } else {
        throw invalid_argument("minute must be 0-59");
    }
}

void Time::setSecond(int s) {
    if (s >= 0 && s < 60) {
        second = s;
    } else {
        throw invalid_argument("second must be 0-59");
    }
}

unsigned int Time::getHour() const {
    return hour;
}

unsigned int Time::getMinute() const {
    return minute;
}

unsigned int Time::getSecond() const {
    return second;
}

string Time::toUniversalString() const {
    ostringstream output;
    output << setfill('0') << setw(2) << getHour() << ":"
           << setw(2) << getMinute() << ":" << setw(2) << getSecond();
    return output.str();
}

string Time::toStandardString() const {
    ostringstream output;
    output << ((getHour() == 0 || getHour() == 12) ? 12 : getHour() % 12)
           << ":" << setw(2) << getMinute() << ":" << setw(2) << getSecond()
           << (hour < 12 ? "AM" : "PM");
    return output.str();
}
===== ./eucjp.json =====
[
["0","\u0000",127],
["8ea1","｡",62],
["a1a1","　、。，．・：；？！゛゜´｀¨＾￣＿ヽヾゝゞ〃仝々〆〇ー―‐／＼～∥｜…‥‘’“”（）〔〕［］｛｝〈",9,"＋－±×÷＝≠＜＞≦≧∞∴♂♀°′″℃￥＄￠￡％＃＆＊＠§☆★○●◎◇"],
["a2a1","◆□■△▲▽▼※〒→←↑↓〓"],
["a2ba","∈∋⊆⊇⊂⊃∪∩"],
["a2ca","∧∨￢⇒⇔∀∃"],
["a2dc","∠⊥⌒∂∇≡≒≪≫√∽∝∵∫∬"],
["a2f2","Å‰♯♭♪†‡¶"],
["a2fe","◯"],
["a3b0","０",9],
["a3c1","Ａ",25],
["a3e1","ａ",25],
["a4a1","ぁ",82],
["a5a1","ァ",85],
["a6a1","Α",16,"Σ",6],
["a6c1","α",16,"σ",6],
["a7a1","А",5,"ЁЖ",25],
["a7d1","а",5,"ёж",25],
["a8a1","─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂"],
["ada1","①",19,"Ⅰ",9],
["adc0","㍉㌔㌢㍍㌘㌧㌃㌶㍑㍗㌍㌦㌣㌫㍊㌻㎜㎝㎞㎎㎏㏄㎡"],
["addf","㍻〝〟№㏍℡㊤",4,"㈱㈲㈹㍾㍽㍼≒≡∫∮∑√⊥∠∟⊿∵∩∪"],
["b0a1","亜唖娃阿哀愛挨姶逢葵茜穐悪握渥旭葦芦鯵梓圧斡扱宛姐虻飴絢綾鮎或粟袷安庵按暗案闇鞍杏以伊位依偉囲夷委威尉惟意慰易椅為畏異移維緯胃萎衣謂違遺医井亥域育郁磯一壱溢逸稲茨芋鰯允印咽員因姻引飲淫胤蔭"],
["b1a1","院陰隠韻吋右宇烏羽迂雨卯鵜窺丑碓臼渦嘘唄欝蔚鰻姥厩浦瓜閏噂云運雲荏餌叡営嬰影映曳栄永泳洩瑛盈穎頴英衛詠鋭液疫益駅悦謁越閲榎厭円園堰奄宴延怨掩援沿演炎焔煙燕猿縁艶苑薗遠鉛鴛塩於汚甥凹央奥往応"],
["b2a1","押旺横欧殴王翁襖鴬鴎黄岡沖荻億屋憶臆桶牡乙俺卸恩温穏音下化仮何伽価佳加可嘉夏嫁家寡科暇果架歌河火珂禍禾稼箇花苛茄荷華菓蝦課嘩貨迦過霞蚊俄峨我牙画臥芽蛾賀雅餓駕介会解回塊壊廻快怪悔恢懐戒拐改"],
["b3a1","魁晦械海灰界皆絵芥蟹開階貝凱劾外咳害崖慨概涯碍蓋街該鎧骸浬馨蛙垣柿蛎鈎劃嚇各廓拡撹格核殻獲確穫覚角赫較郭閣隔革学岳楽額顎掛笠樫橿梶鰍潟割喝恰括活渇滑葛褐轄且鰹叶椛樺鞄株兜竃蒲釜鎌噛鴨栢茅萱"],
["b4a1","粥刈苅瓦乾侃冠寒刊勘勧巻喚堪姦完官寛干幹患感慣憾換敢柑桓棺款歓汗漢澗潅環甘監看竿管簡緩缶翰肝艦莞観諌貫還鑑間閑関陥韓館舘丸含岸巌玩癌眼岩翫贋雁頑顔願企伎危喜器基奇嬉寄岐希幾忌揮机旗既期棋棄"],
["b5a1","機帰毅気汽畿祈季稀紀徽規記貴起軌輝飢騎鬼亀偽儀妓宜戯技擬欺犠疑祇義蟻誼議掬菊鞠吉吃喫桔橘詰砧杵黍却客脚虐逆丘久仇休及吸宮弓急救朽求汲泣灸球究窮笈級糾給旧牛去居巨拒拠挙渠虚許距鋸漁禦魚亨享京"],
["b6a1","供侠僑兇競共凶協匡卿叫喬境峡強彊怯恐恭挟教橋況狂狭矯胸脅興蕎郷鏡響饗驚仰凝尭暁業局曲極玉桐粁僅勤均巾錦斤欣欽琴禁禽筋緊芹菌衿襟謹近金吟銀九倶句区狗玖矩苦躯駆駈駒具愚虞喰空偶寓遇隅串櫛釧屑屈"],
["b7a1","掘窟沓靴轡窪熊隈粂栗繰桑鍬勲君薫訓群軍郡卦袈祁係傾刑兄啓圭珪型契形径恵慶慧憩掲携敬景桂渓畦稽系経継繋罫茎荊蛍計詣警軽頚鶏芸迎鯨劇戟撃激隙桁傑欠決潔穴結血訣月件倹倦健兼券剣喧圏堅嫌建憲懸拳捲"],
["b8a1","検権牽犬献研硯絹県肩見謙賢軒遣鍵険顕験鹸元原厳幻弦減源玄現絃舷言諺限乎個古呼固姑孤己庫弧戸故枯湖狐糊袴股胡菰虎誇跨鈷雇顧鼓五互伍午呉吾娯後御悟梧檎瑚碁語誤護醐乞鯉交佼侯候倖光公功効勾厚口向"],
["b9a1","后喉坑垢好孔孝宏工巧巷幸広庚康弘恒慌抗拘控攻昂晃更杭校梗構江洪浩港溝甲皇硬稿糠紅紘絞綱耕考肯肱腔膏航荒行衡講貢購郊酵鉱砿鋼閤降項香高鴻剛劫号合壕拷濠豪轟麹克刻告国穀酷鵠黒獄漉腰甑忽惚骨狛込"],
["baa1","此頃今困坤墾婚恨懇昏昆根梱混痕紺艮魂些佐叉唆嵯左差査沙瑳砂詐鎖裟坐座挫債催再最哉塞妻宰彩才採栽歳済災采犀砕砦祭斎細菜裁載際剤在材罪財冴坂阪堺榊肴咲崎埼碕鷺作削咋搾昨朔柵窄策索錯桜鮭笹匙冊刷"],
["bba1","察拶撮擦札殺薩雑皐鯖捌錆鮫皿晒三傘参山惨撒散桟燦珊産算纂蚕讃賛酸餐斬暫残仕仔伺使刺司史嗣四士始姉姿子屍市師志思指支孜斯施旨枝止死氏獅祉私糸紙紫肢脂至視詞詩試誌諮資賜雌飼歯事似侍児字寺慈持時"],
["bca1","次滋治爾璽痔磁示而耳自蒔辞汐鹿式識鴫竺軸宍雫七叱執失嫉室悉湿漆疾質実蔀篠偲柴芝屡蕊縞舎写射捨赦斜煮社紗者謝車遮蛇邪借勺尺杓灼爵酌釈錫若寂弱惹主取守手朱殊狩珠種腫趣酒首儒受呪寿授樹綬需囚収周"],
["bda1","宗就州修愁拾洲秀秋終繍習臭舟蒐衆襲讐蹴輯週酋酬集醜什住充十従戎柔汁渋獣縦重銃叔夙宿淑祝縮粛塾熟出術述俊峻春瞬竣舜駿准循旬楯殉淳準潤盾純巡遵醇順処初所暑曙渚庶緒署書薯藷諸助叙女序徐恕鋤除傷償"],
["bea1","勝匠升召哨商唱嘗奨妾娼宵将小少尚庄床廠彰承抄招掌捷昇昌昭晶松梢樟樵沼消渉湘焼焦照症省硝礁祥称章笑粧紹肖菖蒋蕉衝裳訟証詔詳象賞醤鉦鍾鐘障鞘上丈丞乗冗剰城場壌嬢常情擾条杖浄状畳穣蒸譲醸錠嘱埴飾"],
["bfa1","拭植殖燭織職色触食蝕辱尻伸信侵唇娠寝審心慎振新晋森榛浸深申疹真神秦紳臣芯薪親診身辛進針震人仁刃塵壬尋甚尽腎訊迅陣靭笥諏須酢図厨逗吹垂帥推水炊睡粋翠衰遂酔錐錘随瑞髄崇嵩数枢趨雛据杉椙菅頗雀裾"],
["c0a1","澄摺寸世瀬畝是凄制勢姓征性成政整星晴棲栖正清牲生盛精聖声製西誠誓請逝醒青静斉税脆隻席惜戚斥昔析石積籍績脊責赤跡蹟碩切拙接摂折設窃節説雪絶舌蝉仙先千占宣専尖川戦扇撰栓栴泉浅洗染潜煎煽旋穿箭線"],
["c1a1","繊羨腺舛船薦詮賎践選遷銭銑閃鮮前善漸然全禅繕膳糎噌塑岨措曾曽楚狙疏疎礎祖租粗素組蘇訴阻遡鼠僧創双叢倉喪壮奏爽宋層匝惣想捜掃挿掻操早曹巣槍槽漕燥争痩相窓糟総綜聡草荘葬蒼藻装走送遭鎗霜騒像増憎"],
["c2a1","臓蔵贈造促側則即息捉束測足速俗属賊族続卒袖其揃存孫尊損村遜他多太汰詑唾堕妥惰打柁舵楕陀駄騨体堆対耐岱帯待怠態戴替泰滞胎腿苔袋貸退逮隊黛鯛代台大第醍題鷹滝瀧卓啄宅托択拓沢濯琢託鐸濁諾茸凧蛸只"],
["c3a1","叩但達辰奪脱巽竪辿棚谷狸鱈樽誰丹単嘆坦担探旦歎淡湛炭短端箪綻耽胆蛋誕鍛団壇弾断暖檀段男談値知地弛恥智池痴稚置致蜘遅馳築畜竹筑蓄逐秩窒茶嫡着中仲宙忠抽昼柱注虫衷註酎鋳駐樗瀦猪苧著貯丁兆凋喋寵"],
["c4a1","帖帳庁弔張彫徴懲挑暢朝潮牒町眺聴脹腸蝶調諜超跳銚長頂鳥勅捗直朕沈珍賃鎮陳津墜椎槌追鎚痛通塚栂掴槻佃漬柘辻蔦綴鍔椿潰坪壷嬬紬爪吊釣鶴亭低停偵剃貞呈堤定帝底庭廷弟悌抵挺提梯汀碇禎程締艇訂諦蹄逓"],
["c5a1","邸鄭釘鼎泥摘擢敵滴的笛適鏑溺哲徹撤轍迭鉄典填天展店添纏甜貼転顛点伝殿澱田電兎吐堵塗妬屠徒斗杜渡登菟賭途都鍍砥砺努度土奴怒倒党冬凍刀唐塔塘套宕島嶋悼投搭東桃梼棟盗淘湯涛灯燈当痘祷等答筒糖統到"],
["c6a1","董蕩藤討謄豆踏逃透鐙陶頭騰闘働動同堂導憧撞洞瞳童胴萄道銅峠鴇匿得徳涜特督禿篤毒独読栃橡凸突椴届鳶苫寅酉瀞噸屯惇敦沌豚遁頓呑曇鈍奈那内乍凪薙謎灘捺鍋楢馴縄畷南楠軟難汝二尼弐迩匂賑肉虹廿日乳入"],
["c7a1","如尿韮任妊忍認濡禰祢寧葱猫熱年念捻撚燃粘乃廼之埜嚢悩濃納能脳膿農覗蚤巴把播覇杷波派琶破婆罵芭馬俳廃拝排敗杯盃牌背肺輩配倍培媒梅楳煤狽買売賠陪這蝿秤矧萩伯剥博拍柏泊白箔粕舶薄迫曝漠爆縛莫駁麦"],
["c8a1","函箱硲箸肇筈櫨幡肌畑畠八鉢溌発醗髪伐罰抜筏閥鳩噺塙蛤隼伴判半反叛帆搬斑板氾汎版犯班畔繁般藩販範釆煩頒飯挽晩番盤磐蕃蛮匪卑否妃庇彼悲扉批披斐比泌疲皮碑秘緋罷肥被誹費避非飛樋簸備尾微枇毘琵眉美"],
["c9a1","鼻柊稗匹疋髭彦膝菱肘弼必畢筆逼桧姫媛紐百謬俵彪標氷漂瓢票表評豹廟描病秒苗錨鋲蒜蛭鰭品彬斌浜瀕貧賓頻敏瓶不付埠夫婦富冨布府怖扶敷斧普浮父符腐膚芙譜負賦赴阜附侮撫武舞葡蕪部封楓風葺蕗伏副復幅服"],
["caa1","福腹複覆淵弗払沸仏物鮒分吻噴墳憤扮焚奮粉糞紛雰文聞丙併兵塀幣平弊柄並蔽閉陛米頁僻壁癖碧別瞥蔑箆偏変片篇編辺返遍便勉娩弁鞭保舗鋪圃捕歩甫補輔穂募墓慕戊暮母簿菩倣俸包呆報奉宝峰峯崩庖抱捧放方朋"],
["cba1","法泡烹砲縫胞芳萌蓬蜂褒訪豊邦鋒飽鳳鵬乏亡傍剖坊妨帽忘忙房暴望某棒冒紡肪膨謀貌貿鉾防吠頬北僕卜墨撲朴牧睦穆釦勃没殆堀幌奔本翻凡盆摩磨魔麻埋妹昧枚毎哩槙幕膜枕鮪柾鱒桝亦俣又抹末沫迄侭繭麿万慢満"],
["cca1","漫蔓味未魅巳箕岬密蜜湊蓑稔脈妙粍民眠務夢無牟矛霧鵡椋婿娘冥名命明盟迷銘鳴姪牝滅免棉綿緬面麺摸模茂妄孟毛猛盲網耗蒙儲木黙目杢勿餅尤戻籾貰問悶紋門匁也冶夜爺耶野弥矢厄役約薬訳躍靖柳薮鑓愉愈油癒"],
["cda1","諭輸唯佑優勇友宥幽悠憂揖有柚湧涌猶猷由祐裕誘遊邑郵雄融夕予余与誉輿預傭幼妖容庸揚揺擁曜楊様洋溶熔用窯羊耀葉蓉要謡踊遥陽養慾抑欲沃浴翌翼淀羅螺裸来莱頼雷洛絡落酪乱卵嵐欄濫藍蘭覧利吏履李梨理璃"],
["cea1","痢裏裡里離陸律率立葎掠略劉流溜琉留硫粒隆竜龍侶慮旅虜了亮僚両凌寮料梁涼猟療瞭稜糧良諒遼量陵領力緑倫厘林淋燐琳臨輪隣鱗麟瑠塁涙累類令伶例冷励嶺怜玲礼苓鈴隷零霊麗齢暦歴列劣烈裂廉恋憐漣煉簾練聯"],
["cfa1","蓮連錬呂魯櫓炉賂路露労婁廊弄朗楼榔浪漏牢狼篭老聾蝋郎六麓禄肋録論倭和話歪賄脇惑枠鷲亙亘鰐詫藁蕨椀湾碗腕"],
["d0a1","弌丐丕个丱丶丼丿乂乖乘亂亅豫亊舒弍于亞亟亠亢亰亳亶从仍仄仆仂仗仞仭仟价伉佚估佛佝佗佇佶侈侏侘佻佩佰侑佯來侖儘俔俟俎俘俛俑俚俐俤俥倚倨倔倪倥倅伜俶倡倩倬俾俯們倆偃假會偕偐偈做偖偬偸傀傚傅傴傲"],
["d1a1","僉僊傳僂僖僞僥僭僣僮價僵儉儁儂儖儕儔儚儡儺儷儼儻儿兀兒兌兔兢竸兩兪兮冀冂囘册冉冏冑冓冕冖冤冦冢冩冪冫决冱冲冰况冽凅凉凛几處凩凭凰凵凾刄刋刔刎刧刪刮刳刹剏剄剋剌剞剔剪剴剩剳剿剽劍劔劒剱劈劑辨"],
["d2a1","辧劬劭劼劵勁勍勗勞勣勦飭勠勳勵勸勹匆匈甸匍匐匏匕匚匣匯匱匳匸區卆卅丗卉卍凖卞卩卮夘卻卷厂厖厠厦厥厮厰厶參簒雙叟曼燮叮叨叭叺吁吽呀听吭吼吮吶吩吝呎咏呵咎呟呱呷呰咒呻咀呶咄咐咆哇咢咸咥咬哄哈咨"],
["d3a1","咫哂咤咾咼哘哥哦唏唔哽哮哭哺哢唹啀啣啌售啜啅啖啗唸唳啝喙喀咯喊喟啻啾喘喞單啼喃喩喇喨嗚嗅嗟嗄嗜嗤嗔嘔嗷嘖嗾嗽嘛嗹噎噐營嘴嘶嘲嘸噫噤嘯噬噪嚆嚀嚊嚠嚔嚏嚥嚮嚶嚴囂嚼囁囃囀囈囎囑囓囗囮囹圀囿圄圉"],
["d4a1","圈國圍圓團圖嗇圜圦圷圸坎圻址坏坩埀垈坡坿垉垓垠垳垤垪垰埃埆埔埒埓堊埖埣堋堙堝塲堡塢塋塰毀塒堽塹墅墹墟墫墺壞墻墸墮壅壓壑壗壙壘壥壜壤壟壯壺壹壻壼壽夂夊夐夛梦夥夬夭夲夸夾竒奕奐奎奚奘奢奠奧奬奩"],
["d5a1","奸妁妝佞侫妣妲姆姨姜妍姙姚娥娟娑娜娉娚婀婬婉娵娶婢婪媚媼媾嫋嫂媽嫣嫗嫦嫩嫖嫺嫻嬌嬋嬖嬲嫐嬪嬶嬾孃孅孀孑孕孚孛孥孩孰孳孵學斈孺宀它宦宸寃寇寉寔寐寤實寢寞寥寫寰寶寳尅將專對尓尠尢尨尸尹屁屆屎屓"],
["d6a1","屐屏孱屬屮乢屶屹岌岑岔妛岫岻岶岼岷峅岾峇峙峩峽峺峭嶌峪崋崕崗嵜崟崛崑崔崢崚崙崘嵌嵒嵎嵋嵬嵳嵶嶇嶄嶂嶢嶝嶬嶮嶽嶐嶷嶼巉巍巓巒巖巛巫已巵帋帚帙帑帛帶帷幄幃幀幎幗幔幟幢幤幇幵并幺麼广庠廁廂廈廐廏"],
["d7a1","廖廣廝廚廛廢廡廨廩廬廱廳廰廴廸廾弃弉彝彜弋弑弖弩弭弸彁彈彌彎弯彑彖彗彙彡彭彳彷徃徂彿徊很徑徇從徙徘徠徨徭徼忖忻忤忸忱忝悳忿怡恠怙怐怩怎怱怛怕怫怦怏怺恚恁恪恷恟恊恆恍恣恃恤恂恬恫恙悁悍惧悃悚"],
["d8a1","悄悛悖悗悒悧悋惡悸惠惓悴忰悽惆悵惘慍愕愆惶惷愀惴惺愃愡惻惱愍愎慇愾愨愧慊愿愼愬愴愽慂慄慳慷慘慙慚慫慴慯慥慱慟慝慓慵憙憖憇憬憔憚憊憑憫憮懌懊應懷懈懃懆憺懋罹懍懦懣懶懺懴懿懽懼懾戀戈戉戍戌戔戛"],
["d9a1","戞戡截戮戰戲戳扁扎扞扣扛扠扨扼抂抉找抒抓抖拔抃抔拗拑抻拏拿拆擔拈拜拌拊拂拇抛拉挌拮拱挧挂挈拯拵捐挾捍搜捏掖掎掀掫捶掣掏掉掟掵捫捩掾揩揀揆揣揉插揶揄搖搴搆搓搦搶攝搗搨搏摧摯摶摎攪撕撓撥撩撈撼"],
["daa1","據擒擅擇撻擘擂擱擧舉擠擡抬擣擯攬擶擴擲擺攀擽攘攜攅攤攣攫攴攵攷收攸畋效敖敕敍敘敞敝敲數斂斃變斛斟斫斷旃旆旁旄旌旒旛旙无旡旱杲昊昃旻杳昵昶昴昜晏晄晉晁晞晝晤晧晨晟晢晰暃暈暎暉暄暘暝曁暹曉暾暼"],
["dba1","曄暸曖曚曠昿曦曩曰曵曷朏朖朞朦朧霸朮朿朶杁朸朷杆杞杠杙杣杤枉杰枩杼杪枌枋枦枡枅枷柯枴柬枳柩枸柤柞柝柢柮枹柎柆柧檜栞框栩桀桍栲桎梳栫桙档桷桿梟梏梭梔條梛梃檮梹桴梵梠梺椏梍桾椁棊椈棘椢椦棡椌棍"],
["dca1","棔棧棕椶椒椄棗棣椥棹棠棯椨椪椚椣椡棆楹楷楜楸楫楔楾楮椹楴椽楙椰楡楞楝榁楪榲榮槐榿槁槓榾槎寨槊槝榻槃榧樮榑榠榜榕榴槞槨樂樛槿權槹槲槧樅榱樞槭樔槫樊樒櫁樣樓橄樌橲樶橸橇橢橙橦橈樸樢檐檍檠檄檢檣"],
["dda1","檗蘗檻櫃櫂檸檳檬櫞櫑櫟檪櫚櫪櫻欅蘖櫺欒欖鬱欟欸欷盜欹飮歇歃歉歐歙歔歛歟歡歸歹歿殀殄殃殍殘殕殞殤殪殫殯殲殱殳殷殼毆毋毓毟毬毫毳毯麾氈氓气氛氤氣汞汕汢汪沂沍沚沁沛汾汨汳沒沐泄泱泓沽泗泅泝沮沱沾"],
["dea1","沺泛泯泙泪洟衍洶洫洽洸洙洵洳洒洌浣涓浤浚浹浙涎涕濤涅淹渕渊涵淇淦涸淆淬淞淌淨淒淅淺淙淤淕淪淮渭湮渮渙湲湟渾渣湫渫湶湍渟湃渺湎渤滿渝游溂溪溘滉溷滓溽溯滄溲滔滕溏溥滂溟潁漑灌滬滸滾漿滲漱滯漲滌"],
["dfa1","漾漓滷澆潺潸澁澀潯潛濳潭澂潼潘澎澑濂潦澳澣澡澤澹濆澪濟濕濬濔濘濱濮濛瀉瀋濺瀑瀁瀏濾瀛瀚潴瀝瀘瀟瀰瀾瀲灑灣炙炒炯烱炬炸炳炮烟烋烝烙焉烽焜焙煥煕熈煦煢煌煖煬熏燻熄熕熨熬燗熹熾燒燉燔燎燠燬燧燵燼"],
["e0a1","燹燿爍爐爛爨爭爬爰爲爻爼爿牀牆牋牘牴牾犂犁犇犒犖犢犧犹犲狃狆狄狎狒狢狠狡狹狷倏猗猊猜猖猝猴猯猩猥猾獎獏默獗獪獨獰獸獵獻獺珈玳珎玻珀珥珮珞璢琅瑯琥珸琲琺瑕琿瑟瑙瑁瑜瑩瑰瑣瑪瑶瑾璋璞璧瓊瓏瓔珱"],
["e1a1","瓠瓣瓧瓩瓮瓲瓰瓱瓸瓷甄甃甅甌甎甍甕甓甞甦甬甼畄畍畊畉畛畆畚畩畤畧畫畭畸當疆疇畴疊疉疂疔疚疝疥疣痂疳痃疵疽疸疼疱痍痊痒痙痣痞痾痿痼瘁痰痺痲痳瘋瘍瘉瘟瘧瘠瘡瘢瘤瘴瘰瘻癇癈癆癜癘癡癢癨癩癪癧癬癰"],
["e2a1","癲癶癸發皀皃皈皋皎皖皓皙皚皰皴皸皹皺盂盍盖盒盞盡盥盧盪蘯盻眈眇眄眩眤眞眥眦眛眷眸睇睚睨睫睛睥睿睾睹瞎瞋瞑瞠瞞瞰瞶瞹瞿瞼瞽瞻矇矍矗矚矜矣矮矼砌砒礦砠礪硅碎硴碆硼碚碌碣碵碪碯磑磆磋磔碾碼磅磊磬"],
["e3a1","磧磚磽磴礇礒礑礙礬礫祀祠祗祟祚祕祓祺祿禊禝禧齋禪禮禳禹禺秉秕秧秬秡秣稈稍稘稙稠稟禀稱稻稾稷穃穗穉穡穢穩龝穰穹穽窈窗窕窘窖窩竈窰窶竅竄窿邃竇竊竍竏竕竓站竚竝竡竢竦竭竰笂笏笊笆笳笘笙笞笵笨笶筐"],
["e4a1","筺笄筍笋筌筅筵筥筴筧筰筱筬筮箝箘箟箍箜箚箋箒箏筝箙篋篁篌篏箴篆篝篩簑簔篦篥籠簀簇簓篳篷簗簍篶簣簧簪簟簷簫簽籌籃籔籏籀籐籘籟籤籖籥籬籵粃粐粤粭粢粫粡粨粳粲粱粮粹粽糀糅糂糘糒糜糢鬻糯糲糴糶糺紆"],
["e5a1","紂紜紕紊絅絋紮紲紿紵絆絳絖絎絲絨絮絏絣經綉絛綏絽綛綺綮綣綵緇綽綫總綢綯緜綸綟綰緘緝緤緞緻緲緡縅縊縣縡縒縱縟縉縋縢繆繦縻縵縹繃縷縲縺繧繝繖繞繙繚繹繪繩繼繻纃緕繽辮繿纈纉續纒纐纓纔纖纎纛纜缸缺"],
["e6a1","罅罌罍罎罐网罕罔罘罟罠罨罩罧罸羂羆羃羈羇羌羔羞羝羚羣羯羲羹羮羶羸譱翅翆翊翕翔翡翦翩翳翹飜耆耄耋耒耘耙耜耡耨耿耻聊聆聒聘聚聟聢聨聳聲聰聶聹聽聿肄肆肅肛肓肚肭冐肬胛胥胙胝胄胚胖脉胯胱脛脩脣脯腋"],
["e7a1","隋腆脾腓腑胼腱腮腥腦腴膃膈膊膀膂膠膕膤膣腟膓膩膰膵膾膸膽臀臂膺臉臍臑臙臘臈臚臟臠臧臺臻臾舁舂舅與舊舍舐舖舩舫舸舳艀艙艘艝艚艟艤艢艨艪艫舮艱艷艸艾芍芒芫芟芻芬苡苣苟苒苴苳苺莓范苻苹苞茆苜茉苙"],
["e8a1","茵茴茖茲茱荀茹荐荅茯茫茗茘莅莚莪莟莢莖茣莎莇莊荼莵荳荵莠莉莨菴萓菫菎菽萃菘萋菁菷萇菠菲萍萢萠莽萸蔆菻葭萪萼蕚蒄葷葫蒭葮蒂葩葆萬葯葹萵蓊葢蒹蒿蒟蓙蓍蒻蓚蓐蓁蓆蓖蒡蔡蓿蓴蔗蔘蔬蔟蔕蔔蓼蕀蕣蕘蕈"],
["e9a1","蕁蘂蕋蕕薀薤薈薑薊薨蕭薔薛藪薇薜蕷蕾薐藉薺藏薹藐藕藝藥藜藹蘊蘓蘋藾藺蘆蘢蘚蘰蘿虍乕虔號虧虱蚓蚣蚩蚪蚋蚌蚶蚯蛄蛆蚰蛉蠣蚫蛔蛞蛩蛬蛟蛛蛯蜒蜆蜈蜀蜃蛻蜑蜉蜍蛹蜊蜴蜿蜷蜻蜥蜩蜚蝠蝟蝸蝌蝎蝴蝗蝨蝮蝙"],
["eaa1","蝓蝣蝪蠅螢螟螂螯蟋螽蟀蟐雖螫蟄螳蟇蟆螻蟯蟲蟠蠏蠍蟾蟶蟷蠎蟒蠑蠖蠕蠢蠡蠱蠶蠹蠧蠻衄衂衒衙衞衢衫袁衾袞衵衽袵衲袂袗袒袮袙袢袍袤袰袿袱裃裄裔裘裙裝裹褂裼裴裨裲褄褌褊褓襃褞褥褪褫襁襄褻褶褸襌褝襠襞"],
["eba1","襦襤襭襪襯襴襷襾覃覈覊覓覘覡覩覦覬覯覲覺覽覿觀觚觜觝觧觴觸訃訖訐訌訛訝訥訶詁詛詒詆詈詼詭詬詢誅誂誄誨誡誑誥誦誚誣諄諍諂諚諫諳諧諤諱謔諠諢諷諞諛謌謇謚諡謖謐謗謠謳鞫謦謫謾謨譁譌譏譎證譖譛譚譫"],
["eca1","譟譬譯譴譽讀讌讎讒讓讖讙讚谺豁谿豈豌豎豐豕豢豬豸豺貂貉貅貊貍貎貔豼貘戝貭貪貽貲貳貮貶賈賁賤賣賚賽賺賻贄贅贊贇贏贍贐齎贓賍贔贖赧赭赱赳趁趙跂趾趺跏跚跖跌跛跋跪跫跟跣跼踈踉跿踝踞踐踟蹂踵踰踴蹊"],
["eda1","蹇蹉蹌蹐蹈蹙蹤蹠踪蹣蹕蹶蹲蹼躁躇躅躄躋躊躓躑躔躙躪躡躬躰軆躱躾軅軈軋軛軣軼軻軫軾輊輅輕輒輙輓輜輟輛輌輦輳輻輹轅轂輾轌轉轆轎轗轜轢轣轤辜辟辣辭辯辷迚迥迢迪迯邇迴逅迹迺逑逕逡逍逞逖逋逧逶逵逹迸"],
["eea1","遏遐遑遒逎遉逾遖遘遞遨遯遶隨遲邂遽邁邀邊邉邏邨邯邱邵郢郤扈郛鄂鄒鄙鄲鄰酊酖酘酣酥酩酳酲醋醉醂醢醫醯醪醵醴醺釀釁釉釋釐釖釟釡釛釼釵釶鈞釿鈔鈬鈕鈑鉞鉗鉅鉉鉤鉈銕鈿鉋鉐銜銖銓銛鉚鋏銹銷鋩錏鋺鍄錮"],
["efa1","錙錢錚錣錺錵錻鍜鍠鍼鍮鍖鎰鎬鎭鎔鎹鏖鏗鏨鏥鏘鏃鏝鏐鏈鏤鐚鐔鐓鐃鐇鐐鐶鐫鐵鐡鐺鑁鑒鑄鑛鑠鑢鑞鑪鈩鑰鑵鑷鑽鑚鑼鑾钁鑿閂閇閊閔閖閘閙閠閨閧閭閼閻閹閾闊濶闃闍闌闕闔闖關闡闥闢阡阨阮阯陂陌陏陋陷陜陞"],
["f0a1","陝陟陦陲陬隍隘隕隗險隧隱隲隰隴隶隸隹雎雋雉雍襍雜霍雕雹霄霆霈霓霎霑霏霖霙霤霪霰霹霽霾靄靆靈靂靉靜靠靤靦靨勒靫靱靹鞅靼鞁靺鞆鞋鞏鞐鞜鞨鞦鞣鞳鞴韃韆韈韋韜韭齏韲竟韶韵頏頌頸頤頡頷頽顆顏顋顫顯顰"],
["f1a1","顱顴顳颪颯颱颶飄飃飆飩飫餃餉餒餔餘餡餝餞餤餠餬餮餽餾饂饉饅饐饋饑饒饌饕馗馘馥馭馮馼駟駛駝駘駑駭駮駱駲駻駸騁騏騅駢騙騫騷驅驂驀驃騾驕驍驛驗驟驢驥驤驩驫驪骭骰骼髀髏髑髓體髞髟髢髣髦髯髫髮髴髱髷"],
["f2a1","髻鬆鬘鬚鬟鬢鬣鬥鬧鬨鬩鬪鬮鬯鬲魄魃魏魍魎魑魘魴鮓鮃鮑鮖鮗鮟鮠鮨鮴鯀鯊鮹鯆鯏鯑鯒鯣鯢鯤鯔鯡鰺鯲鯱鯰鰕鰔鰉鰓鰌鰆鰈鰒鰊鰄鰮鰛鰥鰤鰡鰰鱇鰲鱆鰾鱚鱠鱧鱶鱸鳧鳬鳰鴉鴈鳫鴃鴆鴪鴦鶯鴣鴟鵄鴕鴒鵁鴿鴾鵆鵈"],
["f3a1","鵝鵞鵤鵑鵐鵙鵲鶉鶇鶫鵯鵺鶚鶤鶩鶲鷄鷁鶻鶸鶺鷆鷏鷂鷙鷓鷸鷦鷭鷯鷽鸚鸛鸞鹵鹹鹽麁麈麋麌麒麕麑麝麥麩麸麪麭靡黌黎黏黐黔黜點黝黠黥黨黯黴黶黷黹黻黼黽鼇鼈皷鼕鼡鼬鼾齊齒齔齣齟齠齡齦齧齬齪齷齲齶龕龜龠"],
["f4a1","堯槇遙瑤凜熙"],
["f9a1","纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德"],
["faa1","忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱"],
["fba1","犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚"],
["fca1","釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑"],
["fcf1","ⅰ",9,"￢￤＇＂"],
["8fa2af","˘ˇ¸˙˝¯˛˚～΄΅"],
["8fa2c2","¡¦¿"],
["8fa2eb","ºª©®™¤№"],
["8fa6e1","ΆΈΉΊΪ"],
["8fa6e7","Ό"],
["8fa6e9","ΎΫ"],
["8fa6ec","Ώ"],
["8fa6f1","άέήίϊΐόςύϋΰώ"],
["8fa7c2","Ђ",10,"ЎЏ"],
["8fa7f2","ђ",10,"ўџ"],
["8fa9a1","ÆĐ"],
["8fa9a4","Ħ"],
["8fa9a6","Ĳ"],
["8fa9a8","ŁĿ"],
["8fa9ab","ŊØŒ"],
["8fa9af","ŦÞ"],
["8fa9c1","æđðħıĳĸłŀŉŋøœßŧþ"],
["8faaa1","ÁÀÄÂĂǍĀĄÅÃĆĈČÇĊĎÉÈËÊĚĖĒĘ"],
["8faaba","ĜĞĢĠĤÍÌÏÎǏİĪĮĨĴĶĹĽĻŃŇŅÑÓÒÖÔǑŐŌÕŔŘŖŚŜŠŞŤŢÚÙÜÛŬǓŰŪŲŮŨǗǛǙǕŴÝŸŶŹŽŻ"],
["8faba1","áàäâăǎāąåãćĉčçċďéèëêěėēęǵĝğ"],
["8fabbd","ġĥíìïîǐ"],
["8fabc5","īįĩĵķĺľļńňņñóòöôǒőōõŕřŗśŝšşťţúùüûŭǔűūųůũǘǜǚǖŵýÿŷźžż"],
["8fb0a1","丂丄丅丌丒丟丣两丨丫丮丯丰丵乀乁乄乇乑乚乜乣乨乩乴乵乹乿亍亖亗亝亯亹仃仐仚仛仠仡仢仨仯仱仳仵份仾仿伀伂伃伈伋伌伒伕伖众伙伮伱你伳伵伷伹伻伾佀佂佈佉佋佌佒佔佖佘佟佣佪佬佮佱佷佸佹佺佽佾侁侂侄"],
["8fb1a1","侅侉侊侌侎侐侒侓侔侗侙侚侞侟侲侷侹侻侼侽侾俀俁俅俆俈俉俋俌俍俏俒俜俠俢俰俲俼俽俿倀倁倄倇倊倌倎倐倓倗倘倛倜倝倞倢倧倮倰倲倳倵偀偁偂偅偆偊偌偎偑偒偓偗偙偟偠偢偣偦偧偪偭偰偱倻傁傃傄傆傊傎傏傐"],
["8fb2a1","傒傓傔傖傛傜傞",4,"傪傯傰傹傺傽僀僃僄僇僌僎僐僓僔僘僜僝僟僢僤僦僨僩僯僱僶僺僾儃儆儇儈儋儌儍儎僲儐儗儙儛儜儝儞儣儧儨儬儭儯儱儳儴儵儸儹兂兊兏兓兕兗兘兟兤兦兾冃冄冋冎冘冝冡冣冭冸冺冼冾冿凂"],
["8fb3a1","凈减凑凒凓凕凘凞凢凥凮凲凳凴凷刁刂刅划刓刕刖刘刢刨刱刲刵刼剅剉剕剗剘剚剜剟剠剡剦剮剷剸剹劀劂劅劊劌劓劕劖劗劘劚劜劤劥劦劧劯劰劶劷劸劺劻劽勀勄勆勈勌勏勑勔勖勛勜勡勥勨勩勪勬勰勱勴勶勷匀匃匊匋"],
["8fb4a1","匌匑匓匘匛匜匞匟匥匧匨匩匫匬匭匰匲匵匼匽匾卂卌卋卙卛卡卣卥卬卭卲卹卾厃厇厈厎厓厔厙厝厡厤厪厫厯厲厴厵厷厸厺厽叀叅叏叒叓叕叚叝叞叠另叧叵吂吓吚吡吧吨吪启吱吴吵呃呄呇呍呏呞呢呤呦呧呩呫呭呮呴呿"],
["8fb5a1","咁咃咅咈咉咍咑咕咖咜咟咡咦咧咩咪咭咮咱咷咹咺咻咿哆哊响哎哠哪哬哯哶哼哾哿唀唁唅唈唉唌唍唎唕唪唫唲唵唶唻唼唽啁啇啉啊啍啐啑啘啚啛啞啠啡啤啦啿喁喂喆喈喎喏喑喒喓喔喗喣喤喭喲喿嗁嗃嗆嗉嗋嗌嗎嗑嗒"],
["8fb6a1","嗓嗗嗘嗛嗞嗢嗩嗶嗿嘅嘈嘊嘍",5,"嘙嘬嘰嘳嘵嘷嘹嘻嘼嘽嘿噀噁噃噄噆噉噋噍噏噔噞噠噡噢噣噦噩噭噯噱噲噵嚄嚅嚈嚋嚌嚕嚙嚚嚝嚞嚟嚦嚧嚨嚩嚫嚬嚭嚱嚳嚷嚾囅囉囊囋囏囐囌囍囙囜囝囟囡囤",4,"囱囫园"],
["8fb7a1","囶囷圁圂圇圊圌圑圕圚圛圝圠圢圣圤圥圩圪圬圮圯圳圴圽圾圿坅坆坌坍坒坢坥坧坨坫坭",4,"坳坴坵坷坹坺坻坼坾垁垃垌垔垗垙垚垜垝垞垟垡垕垧垨垩垬垸垽埇埈埌埏埕埝埞埤埦埧埩埭埰埵埶埸埽埾埿堃堄堈堉埡"],
["8fb8a1","堌堍堛堞堟堠堦堧堭堲堹堿塉塌塍塏塐塕塟塡塤塧塨塸塼塿墀墁墇墈墉墊墌墍墏墐墔墖墝墠墡墢墦墩墱墲壄墼壂壈壍壎壐壒壔壖壚壝壡壢壩壳夅夆夋夌夒夓夔虁夝夡夣夤夨夯夰夳夵夶夿奃奆奒奓奙奛奝奞奟奡奣奫奭"],
["8fb9a1","奯奲奵奶她奻奼妋妌妎妒妕妗妟妤妧妭妮妯妰妳妷妺妼姁姃姄姈姊姍姒姝姞姟姣姤姧姮姯姱姲姴姷娀娄娌娍娎娒娓娞娣娤娧娨娪娭娰婄婅婇婈婌婐婕婞婣婥婧婭婷婺婻婾媋媐媓媖媙媜媞媟媠媢媧媬媱媲媳媵媸媺媻媿"],
["8fbaa1","嫄嫆嫈嫏嫚嫜嫠嫥嫪嫮嫵嫶嫽嬀嬁嬈嬗嬴嬙嬛嬝嬡嬥嬭嬸孁孋孌孒孖孞孨孮孯孼孽孾孿宁宄宆宊宎宐宑宓宔宖宨宩宬宭宯宱宲宷宺宼寀寁寍寏寖",4,"寠寯寱寴寽尌尗尞尟尣尦尩尫尬尮尰尲尵尶屙屚屜屢屣屧屨屩"],
["8fbba1","屭屰屴屵屺屻屼屽岇岈岊岏岒岝岟岠岢岣岦岪岲岴岵岺峉峋峒峝峗峮峱峲峴崁崆崍崒崫崣崤崦崧崱崴崹崽崿嵂嵃嵆嵈嵕嵑嵙嵊嵟嵠嵡嵢嵤嵪嵭嵰嵹嵺嵾嵿嶁嶃嶈嶊嶒嶓嶔嶕嶙嶛嶟嶠嶧嶫嶰嶴嶸嶹巃巇巋巐巎巘巙巠巤"],
["8fbca1","巩巸巹帀帇帍帒帔帕帘帟帠帮帨帲帵帾幋幐幉幑幖幘幛幜幞幨幪",4,"幰庀庋庎庢庤庥庨庪庬庱庳庽庾庿廆廌廋廎廑廒廔廕廜廞廥廫异弆弇弈弎弙弜弝弡弢弣弤弨弫弬弮弰弴弶弻弽弿彀彄彅彇彍彐彔彘彛彠彣彤彧"],
["8fbda1","彯彲彴彵彸彺彽彾徉徍徏徖徜徝徢徧徫徤徬徯徰徱徸忄忇忈忉忋忐",4,"忞忡忢忨忩忪忬忭忮忯忲忳忶忺忼怇怊怍怓怔怗怘怚怟怤怭怳怵恀恇恈恉恌恑恔恖恗恝恡恧恱恾恿悂悆悈悊悎悑悓悕悘悝悞悢悤悥您悰悱悷"],
["8fbea1","悻悾惂惄惈惉惊惋惎惏惔惕惙惛惝惞惢惥惲惵惸惼惽愂愇愊愌愐",4,"愖愗愙愜愞愢愪愫愰愱愵愶愷愹慁慅慆慉慞慠慬慲慸慻慼慿憀憁憃憄憋憍憒憓憗憘憜憝憟憠憥憨憪憭憸憹憼懀懁懂懎懏懕懜懝懞懟懡懢懧懩懥"],
["8fbfa1","懬懭懯戁戃戄戇戓戕戜戠戢戣戧戩戫戹戽扂扃扄扆扌扐扑扒扔扖扚扜扤扭扯扳扺扽抍抎抏抐抦抨抳抶抷抺抾抿拄拎拕拖拚拪拲拴拼拽挃挄挊挋挍挐挓挖挘挩挪挭挵挶挹挼捁捂捃捄捆捊捋捎捒捓捔捘捛捥捦捬捭捱捴捵"],
["8fc0a1","捸捼捽捿掂掄掇掊掐掔掕掙掚掞掤掦掭掮掯掽揁揅揈揎揑揓揔揕揜揠揥揪揬揲揳揵揸揹搉搊搐搒搔搘搞搠搢搤搥搩搪搯搰搵搽搿摋摏摑摒摓摔摚摛摜摝摟摠摡摣摭摳摴摻摽撅撇撏撐撑撘撙撛撝撟撡撣撦撨撬撳撽撾撿"],
["8fc1a1","擄擉擊擋擌擎擐擑擕擗擤擥擩擪擭擰擵擷擻擿攁攄攈攉攊攏攓攔攖攙攛攞攟攢攦攩攮攱攺攼攽敃敇敉敐敒敔敟敠敧敫敺敽斁斅斊斒斕斘斝斠斣斦斮斲斳斴斿旂旈旉旎旐旔旖旘旟旰旲旴旵旹旾旿昀昄昈昉昍昑昒昕昖昝"],
["8fc2a1","昞昡昢昣昤昦昩昪昫昬昮昰昱昳昹昷晀晅晆晊晌晑晎晗晘晙晛晜晠晡曻晪晫晬晾晳晵晿晷晸晹晻暀晼暋暌暍暐暒暙暚暛暜暟暠暤暭暱暲暵暻暿曀曂曃曈曌曎曏曔曛曟曨曫曬曮曺朅朇朎朓朙朜朠朢朳朾杅杇杈杌杔杕杝"],
["8fc3a1","杦杬杮杴杶杻极构枎枏枑枓枖枘枙枛枰枱枲枵枻枼枽柹柀柂柃柅柈柉柒柗柙柜柡柦柰柲柶柷桒栔栙栝栟栨栧栬栭栯栰栱栳栻栿桄桅桊桌桕桗桘桛桫桮",4,"桵桹桺桻桼梂梄梆梈梖梘梚梜梡梣梥梩梪梮梲梻棅棈棌棏"],
["8fc4a1","棐棑棓棖棙棜棝棥棨棪棫棬棭棰棱棵棶棻棼棽椆椉椊椐椑椓椖椗椱椳椵椸椻楂楅楉楎楗楛楣楤楥楦楨楩楬楰楱楲楺楻楿榀榍榒榖榘榡榥榦榨榫榭榯榷榸榺榼槅槈槑槖槗槢槥槮槯槱槳槵槾樀樁樃樏樑樕樚樝樠樤樨樰樲"],
["8fc5a1","樴樷樻樾樿橅橆橉橊橎橐橑橒橕橖橛橤橧橪橱橳橾檁檃檆檇檉檋檑檛檝檞檟檥檫檯檰檱檴檽檾檿櫆櫉櫈櫌櫐櫔櫕櫖櫜櫝櫤櫧櫬櫰櫱櫲櫼櫽欂欃欆欇欉欏欐欑欗欛欞欤欨欫欬欯欵欶欻欿歆歊歍歒歖歘歝歠歧歫歮歰歵歽"],
["8fc6a1","歾殂殅殗殛殟殠殢殣殨殩殬殭殮殰殸殹殽殾毃毄毉毌毖毚毡毣毦毧毮毱毷毹毿氂氄氅氉氍氎氐氒氙氟氦氧氨氬氮氳氵氶氺氻氿汊汋汍汏汒汔汙汛汜汫汭汯汴汶汸汹汻沅沆沇沉沔沕沗沘沜沟沰沲沴泂泆泍泏泐泑泒泔泖"],
["8fc7a1","泚泜泠泧泩泫泬泮泲泴洄洇洊洎洏洑洓洚洦洧洨汧洮洯洱洹洼洿浗浞浟浡浥浧浯浰浼涂涇涑涒涔涖涗涘涪涬涴涷涹涽涿淄淈淊淎淏淖淛淝淟淠淢淥淩淯淰淴淶淼渀渄渞渢渧渲渶渹渻渼湄湅湈湉湋湏湑湒湓湔湗湜湝湞"],
["8fc8a1","湢湣湨湳湻湽溍溓溙溠溧溭溮溱溳溻溿滀滁滃滇滈滊滍滎滏滫滭滮滹滻滽漄漈漊漌漍漖漘漚漛漦漩漪漯漰漳漶漻漼漭潏潑潒潓潗潙潚潝潞潡潢潨潬潽潾澃澇澈澋澌澍澐澒澓澔澖澚澟澠澥澦澧澨澮澯澰澵澶澼濅濇濈濊"],
["8fc9a1","濚濞濨濩濰濵濹濼濽瀀瀅瀆瀇瀍瀗瀠瀣瀯瀴瀷瀹瀼灃灄灈灉灊灋灔灕灝灞灎灤灥灬灮灵灶灾炁炅炆炔",4,"炛炤炫炰炱炴炷烊烑烓烔烕烖烘烜烤烺焃",4,"焋焌焏焞焠焫焭焯焰焱焸煁煅煆煇煊煋煐煒煗煚煜煞煠"],
["8fcaa1","煨煹熀熅熇熌熒熚熛熠熢熯熰熲熳熺熿燀燁燄燋燌燓燖燙燚燜燸燾爀爇爈爉爓爗爚爝爟爤爫爯爴爸爹牁牂牃牅牎牏牐牓牕牖牚牜牞牠牣牨牫牮牯牱牷牸牻牼牿犄犉犍犎犓犛犨犭犮犱犴犾狁狇狉狌狕狖狘狟狥狳狴狺狻"],
["8fcba1","狾猂猄猅猇猋猍猒猓猘猙猞猢猤猧猨猬猱猲猵猺猻猽獃獍獐獒獖獘獝獞獟獠獦獧獩獫獬獮獯獱獷獹獼玀玁玃玅玆玎玐玓玕玗玘玜玞玟玠玢玥玦玪玫玭玵玷玹玼玽玿珅珆珉珋珌珏珒珓珖珙珝珡珣珦珧珩珴珵珷珹珺珻珽"],
["8fcca1","珿琀琁琄琇琊琑琚琛琤琦琨",9,"琹瑀瑃瑄瑆瑇瑋瑍瑑瑒瑗瑝瑢瑦瑧瑨瑫瑭瑮瑱瑲璀璁璅璆璇璉璏璐璑璒璘璙璚璜璟璠璡璣璦璨璩璪璫璮璯璱璲璵璹璻璿瓈瓉瓌瓐瓓瓘瓚瓛瓞瓟瓤瓨瓪瓫瓯瓴瓺瓻瓼瓿甆"],
["8fcda1","甒甖甗甠甡甤甧甩甪甯甶甹甽甾甿畀畃畇畈畎畐畒畗畞畟畡畯畱畹",5,"疁疅疐疒疓疕疙疜疢疤疴疺疿痀痁痄痆痌痎痏痗痜痟痠痡痤痧痬痮痯痱痹瘀瘂瘃瘄瘇瘈瘊瘌瘏瘒瘓瘕瘖瘙瘛瘜瘝瘞瘣瘥瘦瘩瘭瘲瘳瘵瘸瘹"],
["8fcea1","瘺瘼癊癀癁癃癄癅癉癋癕癙癟癤癥癭癮癯癱癴皁皅皌皍皕皛皜皝皟皠皢",6,"皪皭皽盁盅盉盋盌盎盔盙盠盦盨盬盰盱盶盹盼眀眆眊眎眒眔眕眗眙眚眜眢眨眭眮眯眴眵眶眹眽眾睂睅睆睊睍睎睏睒睖睗睜睞睟睠睢"],
["8fcfa1","睤睧睪睬睰睲睳睴睺睽瞀瞄瞌瞍瞔瞕瞖瞚瞟瞢瞧瞪瞮瞯瞱瞵瞾矃矉矑矒矕矙矞矟矠矤矦矪矬矰矱矴矸矻砅砆砉砍砎砑砝砡砢砣砭砮砰砵砷硃硄硇硈硌硎硒硜硞硠硡硣硤硨硪确硺硾碊碏碔碘碡碝碞碟碤碨碬碭碰碱碲碳"],
["8fd0a1","碻碽碿磇磈磉磌磎磒磓磕磖磤磛磟磠磡磦磪磲磳礀磶磷磺磻磿礆礌礐礚礜礞礟礠礥礧礩礭礱礴礵礻礽礿祄祅祆祊祋祏祑祔祘祛祜祧祩祫祲祹祻祼祾禋禌禑禓禔禕禖禘禛禜禡禨禩禫禯禱禴禸离秂秄秇秈秊秏秔秖秚秝秞"],
["8fd1a1","秠秢秥秪秫秭秱秸秼稂稃稇稉稊稌稑稕稛稞稡稧稫稭稯稰稴稵稸稹稺穄穅穇穈穌穕穖穙穜穝穟穠穥穧穪穭穵穸穾窀窂窅窆窊窋窐窑窔窞窠窣窬窳窵窹窻窼竆竉竌竎竑竛竨竩竫竬竱竴竻竽竾笇笔笟笣笧笩笪笫笭笮笯笰"],
["8fd2a1","笱笴笽笿筀筁筇筎筕筠筤筦筩筪筭筯筲筳筷箄箉箎箐箑箖箛箞箠箥箬箯箰箲箵箶箺箻箼箽篂篅篈篊篔篖篗篙篚篛篨篪篲篴篵篸篹篺篼篾簁簂簃簄簆簉簋簌簎簏簙簛簠簥簦簨簬簱簳簴簶簹簺籆籊籕籑籒籓籙",5],
["8fd3a1","籡籣籧籩籭籮籰籲籹籼籽粆粇粏粔粞粠粦粰粶粷粺粻粼粿糄糇糈糉糍糏糓糔糕糗糙糚糝糦糩糫糵紃紇紈紉紏紑紒紓紖紝紞紣紦紪紭紱紼紽紾絀絁絇絈絍絑絓絗絙絚絜絝絥絧絪絰絸絺絻絿綁綂綃綅綆綈綋綌綍綑綖綗綝"],
["8fd4a1","綞綦綧綪綳綶綷綹緂",4,"緌緍緎緗緙縀緢緥緦緪緫緭緱緵緶緹緺縈縐縑縕縗縜縝縠縧縨縬縭縯縳縶縿繄繅繇繎繐繒繘繟繡繢繥繫繮繯繳繸繾纁纆纇纊纍纑纕纘纚纝纞缼缻缽缾缿罃罄罇罏罒罓罛罜罝罡罣罤罥罦罭"],
["8fd5a1","罱罽罾罿羀羋羍羏羐羑羖羗羜羡羢羦羪羭羴羼羿翀翃翈翎翏翛翟翣翥翨翬翮翯翲翺翽翾翿耇耈耊耍耎耏耑耓耔耖耝耞耟耠耤耦耬耮耰耴耵耷耹耺耼耾聀聄聠聤聦聭聱聵肁肈肎肜肞肦肧肫肸肹胈胍胏胒胔胕胗胘胠胭胮"],
["8fd6a1","胰胲胳胶胹胺胾脃脋脖脗脘脜脞脠脤脧脬脰脵脺脼腅腇腊腌腒腗腠腡腧腨腩腭腯腷膁膐膄膅膆膋膎膖膘膛膞膢膮膲膴膻臋臃臅臊臎臏臕臗臛臝臞臡臤臫臬臰臱臲臵臶臸臹臽臿舀舃舏舓舔舙舚舝舡舢舨舲舴舺艃艄艅艆"],
["8fd7a1","艋艎艏艑艖艜艠艣艧艭艴艻艽艿芀芁芃芄芇芉芊芎芑芔芖芘芚芛芠芡芣芤芧芨芩芪芮芰芲芴芷芺芼芾芿苆苐苕苚苠苢苤苨苪苭苯苶苷苽苾茀茁茇茈茊茋荔茛茝茞茟茡茢茬茭茮茰茳茷茺茼茽荂荃荄荇荍荎荑荕荖荗荰荸"],
["8fd8a1","荽荿莀莂莄莆莍莒莔莕莘莙莛莜莝莦莧莩莬莾莿菀菇菉菏菐菑菔菝荓菨菪菶菸菹菼萁萆萊萏萑萕萙莭萯萹葅葇葈葊葍葏葑葒葖葘葙葚葜葠葤葥葧葪葰葳葴葶葸葼葽蒁蒅蒒蒓蒕蒞蒦蒨蒩蒪蒯蒱蒴蒺蒽蒾蓀蓂蓇蓈蓌蓏蓓"],
["8fd9a1","蓜蓧蓪蓯蓰蓱蓲蓷蔲蓺蓻蓽蔂蔃蔇蔌蔎蔐蔜蔞蔢蔣蔤蔥蔧蔪蔫蔯蔳蔴蔶蔿蕆蕏",4,"蕖蕙蕜",6,"蕤蕫蕯蕹蕺蕻蕽蕿薁薅薆薉薋薌薏薓薘薝薟薠薢薥薧薴薶薷薸薼薽薾薿藂藇藊藋藎薭藘藚藟藠藦藨藭藳藶藼"],
["8fdaa1","藿蘀蘄蘅蘍蘎蘐蘑蘒蘘蘙蘛蘞蘡蘧蘩蘶蘸蘺蘼蘽虀虂虆虒虓虖虗虘虙虝虠",4,"虩虬虯虵虶虷虺蚍蚑蚖蚘蚚蚜蚡蚦蚧蚨蚭蚱蚳蚴蚵蚷蚸蚹蚿蛀蛁蛃蛅蛑蛒蛕蛗蛚蛜蛠蛣蛥蛧蚈蛺蛼蛽蜄蜅蜇蜋蜎蜏蜐蜓蜔蜙蜞蜟蜡蜣"],
["8fdba1","蜨蜮蜯蜱蜲蜹蜺蜼蜽蜾蝀蝃蝅蝍蝘蝝蝡蝤蝥蝯蝱蝲蝻螃",6,"螋螌螐螓螕螗螘螙螞螠螣螧螬螭螮螱螵螾螿蟁蟈蟉蟊蟎蟕蟖蟙蟚蟜蟟蟢蟣蟤蟪蟫蟭蟱蟳蟸蟺蟿蠁蠃蠆蠉蠊蠋蠐蠙蠒蠓蠔蠘蠚蠛蠜蠞蠟蠨蠭蠮蠰蠲蠵"],
["8fdca1","蠺蠼衁衃衅衈衉衊衋衎衑衕衖衘衚衜衟衠衤衩衱衹衻袀袘袚袛袜袟袠袨袪袺袽袾裀裊",4,"裑裒裓裛裞裧裯裰裱裵裷褁褆褍褎褏褕褖褘褙褚褜褠褦褧褨褰褱褲褵褹褺褾襀襂襅襆襉襏襒襗襚襛襜襡襢襣襫襮襰襳襵襺"],
["8fdda1","襻襼襽覉覍覐覔覕覛覜覟覠覥覰覴覵覶覷覼觔",4,"觥觩觫觭觱觳觶觹觽觿訄訅訇訏訑訒訔訕訞訠訢訤訦訫訬訯訵訷訽訾詀詃詅詇詉詍詎詓詖詗詘詜詝詡詥詧詵詶詷詹詺詻詾詿誀誃誆誋誏誐誒誖誗誙誟誧誩誮誯誳"],
["8fdea1","誶誷誻誾諃諆諈諉諊諑諓諔諕諗諝諟諬諰諴諵諶諼諿謅謆謋謑謜謞謟謊謭謰謷謼譂",4,"譈譒譓譔譙譍譞譣譭譶譸譹譼譾讁讄讅讋讍讏讔讕讜讞讟谸谹谽谾豅豇豉豋豏豑豓豔豗豘豛豝豙豣豤豦豨豩豭豳豵豶豻豾貆"],
["8fdfa1","貇貋貐貒貓貙貛貜貤貹貺賅賆賉賋賏賖賕賙賝賡賨賬賯賰賲賵賷賸賾賿贁贃贉贒贗贛赥赩赬赮赿趂趄趈趍趐趑趕趞趟趠趦趫趬趯趲趵趷趹趻跀跅跆跇跈跊跎跑跔跕跗跙跤跥跧跬跰趼跱跲跴跽踁踄踅踆踋踑踔踖踠踡踢"],
["8fe0a1","踣踦踧踱踳踶踷踸踹踽蹀蹁蹋蹍蹎蹏蹔蹛蹜蹝蹞蹡蹢蹩蹬蹭蹯蹰蹱蹹蹺蹻躂躃躉躐躒躕躚躛躝躞躢躧躩躭躮躳躵躺躻軀軁軃軄軇軏軑軔軜軨軮軰軱軷軹軺軭輀輂輇輈輏輐輖輗輘輞輠輡輣輥輧輨輬輭輮輴輵輶輷輺轀轁"],
["8fe1a1","轃轇轏轑",4,"轘轝轞轥辝辠辡辤辥辦辵辶辸达迀迁迆迊迋迍运迒迓迕迠迣迤迨迮迱迵迶迻迾适逄逈逌逘逛逨逩逯逪逬逭逳逴逷逿遃遄遌遛遝遢遦遧遬遰遴遹邅邈邋邌邎邐邕邗邘邙邛邠邡邢邥邰邲邳邴邶邽郌邾郃"],
["8fe2a1","郄郅郇郈郕郗郘郙郜郝郟郥郒郶郫郯郰郴郾郿鄀鄄鄅鄆鄈鄍鄐鄔鄖鄗鄘鄚鄜鄞鄠鄥鄢鄣鄧鄩鄮鄯鄱鄴鄶鄷鄹鄺鄼鄽酃酇酈酏酓酗酙酚酛酡酤酧酭酴酹酺酻醁醃醅醆醊醎醑醓醔醕醘醞醡醦醨醬醭醮醰醱醲醳醶醻醼醽醿"],
["8fe3a1","釂釃釅釓釔釗釙釚釞釤釥釩釪釬",5,"釷釹釻釽鈀鈁鈄鈅鈆鈇鈉鈊鈌鈐鈒鈓鈖鈘鈜鈝鈣鈤鈥鈦鈨鈮鈯鈰鈳鈵鈶鈸鈹鈺鈼鈾鉀鉂鉃鉆鉇鉊鉍鉎鉏鉑鉘鉙鉜鉝鉠鉡鉥鉧鉨鉩鉮鉯鉰鉵",4,"鉻鉼鉽鉿銈銉銊銍銎銒銗"],
["8fe4a1","銙銟銠銤銥銧銨銫銯銲銶銸銺銻銼銽銿",4,"鋅鋆鋇鋈鋋鋌鋍鋎鋐鋓鋕鋗鋘鋙鋜鋝鋟鋠鋡鋣鋥鋧鋨鋬鋮鋰鋹鋻鋿錀錂錈錍錑錔錕錜錝錞錟錡錤錥錧錩錪錳錴錶錷鍇鍈鍉鍐鍑鍒鍕鍗鍘鍚鍞鍤鍥鍧鍩鍪鍭鍯鍰鍱鍳鍴鍶"],
["8fe5a1","鍺鍽鍿鎀鎁鎂鎈鎊鎋鎍鎏鎒鎕鎘鎛鎞鎡鎣鎤鎦鎨鎫鎴鎵鎶鎺鎩鏁鏄鏅鏆鏇鏉",4,"鏓鏙鏜鏞鏟鏢鏦鏧鏹鏷鏸鏺鏻鏽鐁鐂鐄鐈鐉鐍鐎鐏鐕鐖鐗鐟鐮鐯鐱鐲鐳鐴鐻鐿鐽鑃鑅鑈鑊鑌鑕鑙鑜鑟鑡鑣鑨鑫鑭鑮鑯鑱鑲钄钃镸镹"],
["8fe6a1","镾閄閈閌閍閎閝閞閟閡閦閩閫閬閴閶閺閽閿闆闈闉闋闐闑闒闓闙闚闝闞闟闠闤闦阝阞阢阤阥阦阬阱阳阷阸阹阺阼阽陁陒陔陖陗陘陡陮陴陻陼陾陿隁隂隃隄隉隑隖隚隝隟隤隥隦隩隮隯隳隺雊雒嶲雘雚雝雞雟雩雯雱雺霂"],
["8fe7a1","霃霅霉霚霛霝霡霢霣霨霱霳靁靃靊靎靏靕靗靘靚靛靣靧靪靮靳靶靷靸靻靽靿鞀鞉鞕鞖鞗鞙鞚鞞鞟鞢鞬鞮鞱鞲鞵鞶鞸鞹鞺鞼鞾鞿韁韄韅韇韉韊韌韍韎韐韑韔韗韘韙韝韞韠韛韡韤韯韱韴韷韸韺頇頊頙頍頎頔頖頜頞頠頣頦"],
["8fe8a1","頫頮頯頰頲頳頵頥頾顄顇顊顑顒顓顖顗顙顚顢顣顥顦顪顬颫颭颮颰颴颷颸颺颻颿飂飅飈飌飡飣飥飦飧飪飳飶餂餇餈餑餕餖餗餚餛餜餟餢餦餧餫餱",4,"餹餺餻餼饀饁饆饇饈饍饎饔饘饙饛饜饞饟饠馛馝馟馦馰馱馲馵"],
["8fe9a1","馹馺馽馿駃駉駓駔駙駚駜駞駧駪駫駬駰駴駵駹駽駾騂騃騄騋騌騐騑騖騞騠騢騣騤騧騭騮騳騵騶騸驇驁驄驊驋驌驎驑驔驖驝骪骬骮骯骲骴骵骶骹骻骾骿髁髃髆髈髎髐髒髕髖髗髛髜髠髤髥髧髩髬髲髳髵髹髺髽髿",4],
["8feaa1","鬄鬅鬈鬉鬋鬌鬍鬎鬐鬒鬖鬙鬛鬜鬠鬦鬫鬭鬳鬴鬵鬷鬹鬺鬽魈魋魌魕魖魗魛魞魡魣魥魦魨魪",4,"魳魵魷魸魹魿鮀鮄鮅鮆鮇鮉鮊鮋鮍鮏鮐鮔鮚鮝鮞鮦鮧鮩鮬鮰鮱鮲鮷鮸鮻鮼鮾鮿鯁鯇鯈鯎鯐鯗鯘鯝鯟鯥鯧鯪鯫鯯鯳鯷鯸"],
["8feba1","鯹鯺鯽鯿鰀鰂鰋鰏鰑鰖鰘鰙鰚鰜鰞鰢鰣鰦",4,"鰱鰵鰶鰷鰽鱁鱃鱄鱅鱉鱊鱎鱏鱐鱓鱔鱖鱘鱛鱝鱞鱟鱣鱩鱪鱜鱫鱨鱮鱰鱲鱵鱷鱻鳦鳲鳷鳹鴋鴂鴑鴗鴘鴜鴝鴞鴯鴰鴲鴳鴴鴺鴼鵅鴽鵂鵃鵇鵊鵓鵔鵟鵣鵢鵥鵩鵪鵫鵰鵶鵷鵻"],
["8feca1","鵼鵾鶃鶄鶆鶊鶍鶎鶒鶓鶕鶖鶗鶘鶡鶪鶬鶮鶱鶵鶹鶼鶿鷃鷇鷉鷊鷔鷕鷖鷗鷚鷞鷟鷠鷥鷧鷩鷫鷮鷰鷳鷴鷾鸊鸂鸇鸎鸐鸑鸒鸕鸖鸙鸜鸝鹺鹻鹼麀麂麃麄麅麇麎麏麖麘麛麞麤麨麬麮麯麰麳麴麵黆黈黋黕黟黤黧黬黭黮黰黱黲黵"],
["8feda1","黸黿鼂鼃鼉鼏鼐鼑鼒鼔鼖鼗鼙鼚鼛鼟鼢鼦鼪鼫鼯鼱鼲鼴鼷鼹鼺鼼鼽鼿齁齃",4,"齓齕齖齗齘齚齝齞齨齩齭",4,"齳齵齺齽龏龐龑龒龔龖龗龞龡龢龣龥"]
]
===== ./spanish.cpp =====
#include <iostream>

using namespace std;

int main() {
	int n�mero1, n�mero2;

	cout << "Ingrese el primer n�mero: ";
	cin >> n�mero1;

	cout << "Ingrese el segundo n�mero: ";
	cin >> n�mero2;

	int suma = n�mero1 + n�mero2;

	cout << "La suma es: " << suma << endl;

	return 0;
}===== ./semester_menu.cpp =====
#include <iostream>
#include <map>
#include <string>
#include <cstdlib>
#include <ctime>
#include <iomanip>
#include <vector>
#include <algorithm>
#include "ArrayStats.h"
#include "InsertionSort.h"
#include "SelectionSort.h"
#include "records_sorter.h"
#define GREEN   "\x1b[32m"
#define YELLOW  "\x1b[33m"
#define RESET   "\x1b[0m"

using namespace std;

// Forward declarations for program_option1 and program_option2
void program_option1();
void program_option2();
void program_option3();
void program_option4();
void generatePassword(char* array, int size);
void randomizeDoubles(double* array, int size);

// Define MainMenu class
class MainMenu {
private:
    std::map<std::string, std::pair<std::string, void(*)()>> topics;

public:
    MainMenu() {
        topics = {
            {"1", {"\033[94mProgram1", &program_option1}},
            {"2", {"\033[93mProgram2", &program_option2}},
            {"3", {"\033[93mProgram3", &program_option3}},
            {"4", {"\033[93mProgram4", &program_option4}},
            // Add other topics here...
        };
    }

    void display() {
        std::cout << "\033[96m=== Main Menu ===\033[0m" << std::endl;
        for (const auto& topic : topics) {
            std::cout << topic.first << ". " << topic.second.first << std::endl;
        }
        std::cout << "0. Exit" << std::endl;
    }

    void selectTopic(const std::string& choice) {
        if (topics.find(choice) != topics.end()) {
            topics[choice].second();
        } else {
            std::cout << "Invalid choice!" << std::endl;
        }
    }
};

// Define program_option1 function
void program_option1() {
    try {
        int size;
        cout << "Enter the size of the arrays: ";
        cin >> size;

        ArrayStats<int> intArray(size, 10);
        intArray.randomizeValues();
        cout << "\033[1;32mMax value in intArray: \033[0m" << intArray.findMax() << endl;
        cout << "\033[1;33mMin value in intArray: \033[0m" << intArray.findMin() << endl;

        ArrayStats<double> doubleArray(size, 10.5);
        randomizeDoubles(doubleArray.getArray(), size);
        cout << "\033[1;34mMax value in doubleArray: \033[0m" << doubleArray.findMax() << endl;
        cout << "\033[1;35mMin value in doubleArray: \033[0m" << doubleArray.findMin() << endl;

        ArrayStats<char> charArray(8, ' '); // Password-like string of up to 8 characters
        generatePassword(charArray.getArray(), 8);
        cout << "\033[1;36mPassword-like string in charArray: \033[0m";
        for (int i = 0; i < 8; ++i) {
            cout << charArray.getArray()[i];
        }
        cout << endl;
    } catch (const invalid_argument& e) {
        cerr << "\033[1;38mError: \033[0m" << e.what() << endl;
    }
}
void sequence(int n, int steps) {
    if (n == 1 || steps >= n) {
        cout << "n              = " << GREEN << n << RESET << endl;
        cout << "Number of steps = " << YELLOW << steps << RESET << endl;
        return;
    }
    cout << "n              = " << GREEN << n << RESET << endl;
    if (n % 2 == 0) {
        cout << "n * 3 + 1      = " << YELLOW << n * 3 + 1 << RESET << endl;
        sequence(n / 2, steps + 1);
    } else {
        cout << "n / 2          = " << YELLOW << n / 2 << RESET << endl;
        sequence(3 * n + 1, steps + 1);
    }
}
// Define program_option2 function
void program_option2() {
    // Implement program_option2 logic here
    int input_value;

    cout << "Enter the starting point: " << GREEN << RESET << endl;
    cin >> input_value;

    sequence(input_value, 0);
}
void printArray(const vector<int>& arr) {
    for (int num : arr) {
        cout << "\033[1;36m" << setw(4) << num << "\033[0m";
    }
    cout << endl;
}

vector<int>::iterator findMinIndex(vector<int>::iterator start, vector<int>::iterator end) {
    return min_element(start, end);
}

void selectionSortRecursive(vector<int>& arr, vector<int>::iterator start, vector<int>::iterator end) {
    if (start == end) {
        return;
    }
    auto minIndex = findMinIndex(start, end);
    if (minIndex != start) {
        iter_swap(minIndex, start);
    }
    selectionSortRecursive(arr, start + 1, end);
}

void program_option3() {
    srand(time(nullptr));

    const int SIZE = 20;
    const int MAX_RANDOM_VALUE = 100;
    vector<int> arr(SIZE);
    for (int i = 0; i < SIZE; ++i) {
        arr[i] = rand() % MAX_RANDOM_VALUE;
    }

    cout << "\nUnsorted array:" << endl;
    for (int num : arr) {
        cout << num << " ";
    }
    cout << endl;

    sort(arr.begin(), arr.end());

    cout << "\nSorted array:" << endl;
    for (int num : arr) {
        cout << num << " ";
    }
    cout << endl;
}
// Define generatePassword function
void generatePassword(char* array, int size) {
    const char charset[] = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
    srand(time(nullptr));
    for (int i = 0; i < size; ++i) {
        array[i] = charset[rand() % (sizeof(charset) - 1)]; // Exclude null terminator
    }
}

// Define randomizeDoubles function
void randomizeDoubles(double* array, int size) {
    srand(time(nullptr));
    for (int i = 0; i < size; ++i) {
        array[i] = (rand() % 10000) / 100.0; // Random doubles between 0.00 and 99.99
    }
}

void program_option4() {
    // Implement program_option2 logic here
    vector<Student> students;
    int option;

    do {
        cout << "|---------------------------------------|" << endl;
        cout << "|         Student Records Sorter        |" << endl;
        cout << "|---------------------------------------|" << endl;
        cout << "|Option | Description                   |" << endl;
        cout << "|-------|-------------------------------|" << endl;
        cout << "| 1     | Load student records          |" << endl;
        cout << "| 2     | View data                     |" << endl;
        cout << "| 3     | MergeSort data                |" << endl;
        cout << "| 4     | QuickSort data                |" << endl;
        cout << "| 5     | Exit                          |" << endl;
        cout << "|---------------------------------------|" << endl;
        cout << endl;
        cout << "Choose an option: ";
        cin >> option;
        cout << endl;

        switch (option) {
            case 1:
                cout << "Loading Student Data...";
                loadStudentRecords(students);
                break;
            case 2:
                viewData(students);
                break;
            case 3:
                mergeSortData(students);
                viewData(students);
                break;
            case 4:
                quickSortData(students, 0, students.size() - 1);
                viewData(students);
                break;
            case 5:
                cout << "Exiting..." << endl;
                break;
            default:
                cout << "Invalid option. Please try again." << endl;
                break;
        }

        cout << endl;
    } while (option != 5);
}

int main() {
    // Instantiate MainMenu object
    MainMenu menu;
    std::string choice;

    // Main menu loop
    do {
        menu.display();
        std::cout << "Enter your choice: ";
        std::cin >> choice;

        if (choice == "0") {
            break;
        }

        menu.selectTopic(choice);
    } while (true);

    return 0;
}
===== ./student_grades_raw.txt =====
1 Jose Ramos 80 95 100 100 79 
2 Natalie Gamez 98 100 100 100 100
3 Sam Smith 66 72 0 90 98 
4 Cyintha Luna 87 100 50 100 79
4 Carlos Santos 70 55 45 0 100===== ./area_Circumference_Volume_Menu.c =====
#include<stdio.h>
#include<math.h>

void circumference(double radius);
void area(double radius);
void volume(double radius);
void menu();
const double PI = 3.14159;

int main(void) {
    void (*f[3])(double) = {&circumference, &area, &volume};
    size_t choice = 0;
    double radius = 0;

    while (1) {
        menu();
        scanf("%zu", &choice);  // safer type for size_t

        if (choice >= 1 && choice <= 3) {   // ✅ allow 1, 2, and 3
            printf("\nEnter the radius: ");
            scanf("%lf", &radius);
            (*f[choice - 1])(radius);       // ✅ adjust index to 0–2
        } else if (choice == 4) {
            printf("\nGoodbye.\n");
            break;
        } else {
            printf("\n\terror: Enter valid choice!\n");
        }
        printf("\n");
    }
    return 0;
}

void menu() {
    printf("Select an option from below\n");
    printf("1. Calculate the circumference of a circle.\n");
    printf("2. Calculate the area of a circle.\n");
    printf("3. Calculate the volume of a sphere.\n");
    printf("4. Exit Program.\n");
}

void circumference(double radius) {
    printf("\nRadius = %.3f", radius);
    double circum = 2.0 * PI * radius;
    printf("\nThe circumference of the circle is %.2lf feet.\n", circum);
}

void area(double radius) {
    printf("\nRadius = %.3f", radius);
    double a = PI * radius * radius;
    printf("\nThe area of the circle is %.2lf feet squared.\n", a);
}

void volume(double radius) {
    printf("\nRadius = %.3f", radius);
    double vol = (4.0 / 3.0) * PI * radius * radius * radius;
    printf("\nThe volume of the sphere is %.2lf cubic feet.\n", vol);
}===== ./pointers.cpp =====
int main() {
    int arr[5] = {1, 2, 3, 4, 5}; 
    int* ptr = arr; 

    cout << "Array elements: ";
    for(int i = 0; i < 5; i++) {
        cout << *(ptr + i) << " "; 
    }

    return 0;
}  


===== ./program6.c =====
#include <stdio.h>


//      int *radius[5];
//      for(int i = 0; i < 5, i++){
//              arr[i] = NULL;
//      for(int i = 0; i < 5, i++){
//              arr[i] = radius();
//              //lf for double
//      %d for int


double circumference(double r);
double area(double r);
double volume(double r);

const double PI = 3.14159;

int main (){

        double r;
        int choice;
        double (*arrRadius[3])(double r) = {circumstance, area, volume);
      
do{
	printf      
    
    //for("Enter radius: \n")
    //int r[3]
    //int i;
    
    //for (i = 0, i <= 3; i++){
}

        double ("func[3])(double) ={circumference, area, volume};
    while
        printf("1: Display circumference of circle.\n");
        printf("2: Display area of a circle\n");
        printf("3: Display volume of a sphere\n");
        printf("4: Exit\n");
        scanf("%d", &choice);

        if(choice>=1 && choice <=3){
//initialization
        printf("\nEnter radius:");
        scanf("%d", &r);
        printf("Calculation of option %d is: %lf\n", arrRadius[choice-1](r));
        
//option1
	  circumstance = 2 * PI * radius;
        printf("\nCalculate circumference:);
        scanf("%.2f", &circumference);
        
//option2
        area = PI * radius * radius;
        printf("\nThe area of a cirlce is:");
        scanf("%.2f", &area)
        
//option3
        volume = 4.0/3.0 * PI * radius * radius;
        printf("\nEnter radius of a sphere:");
        scanf("%lf", 4 * &radius * &radius * 2);
//option4
		while(choice! = 4);
        }

return 0;
}===== ./population.cpp =====
#include <iostream>
#include <iomanip>
#include "population.h"
using namespace std;


#define RESET       "\033[0m"
#define RED         "\033[31m"
#define YELLOW      "\033[33m"
#define BLUE        "\033[34m"
#define PURPLE      "\033[35m"
#define LIME_GREEN  "\033[92m"

int main() {
    int population, births, deaths;
    cout << "POPULATION STATISTICS\n";
    cout << YELLOW << "\nEnter total population: " << RESET << endl;
    cin >> population;

    cout << BLUE << "Enter yearly births: " << RESET << endl;
    cin >> births;

    cout << RED << "Enter annual number of deaths: " << RESET << endl;
    cin >> deaths;

    Population pop(population, births, deaths);

    cout << PURPLE << "|      Birth rate: |" << setw(18) << "      Death rate:|" << RESET << endl;
    cout << LIME_GREEN << "|" << setw(17) << fixed << setprecision(2) << pop.getBirthRate() << "%" << "|"  << setw(17) << setprecision(2) << pop.getDeathRate() << "%" << "|" << RESET << endl;
    cout << LIME_GREEN << "|__________________|"  << "__________________|" << RESET << endl;

    return 0;
}===== ./rectangle.h =====
#ifndef RECTANGLE_H
#define RECTANGLE_H

#include <iostream>
using namespace std;

class Rectangle {
public:
        Rectangle(double length, double width);
        double get_perimeter() const;
        double get_area() const;
        double get_length() const;
        double get_width() const;
        friend ostream& operator<<(ostream& os, const Rectangle& rectangle);

private:
        double length;
        double width;
};

#endif===== ./graph_traversal.cpp =====
===== ./tasks.json =====
{
    "tasks": [
        {
            "type": "cppbuild",
            "label": "C/C++: g++.exe build active file",
            "command": "C:\\msys64\\ucrt64\\bin\\g++.exe",
            "args": [
                "-fdiagnostics-color=always",
                "-g",
                "${file}",
                "-o",
                "${fileDirname}\\${fileBasenameNoExtension}.exe"
            ],
            "options": {
                "cwd": "${fileDirname}"
            },
            "problemMatcher": [
                "$gcc"
            ],
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "detail": "Task generated by Debugger."
        }
    ],
    "version": "2.0.0"
}===== ./midterm_menu_grades.c =====
#include <stdio.h>
#include <stdlib.h>

int threeGrades ();
void averageGrade(int []);
int maxGrade(int []);
int minGrade(int []);


int main(){
        int i, grade[3], min, max, choice;
        while(1){
        printf("1. Enter three grades: \n");
        printf("2. Show Avarage \n");
        printf("3. Show Highest Grade \n");
        printf("4. Show Lowest Grade \n");
        printf("5. Exit \n");
        printf("Enter Option:\n");
        scanf("%d", &choice);
        switch(choice){

        case 1: for (i = 0; i < 3; i++){
                        grade[i] = threeGrades();
                        }
                break;

        case 2: averageGrade(grade);
                break;

        case 3: max = maxGrade(grade);
                printf("The Highest Grade is: %d \n", max);
                break;

        case 4: min = minGrade(grade);
                printf("The Lowest Grade is: %d \n", min);
                break;

        case 5: exit(0);

        default: printf("error: Please Enter a Correct Choice!\n");
        }
}

return 0;

}
int threeGrades(){
        int grade;
        while(1){
        printf("Enter Grade between 1-100:");
        scanf("%d", &grade);
        if (grade >= 1 && grade <= 100 );
        return grade;
        }
}
void averageGrade(int grade[]){
        double average;
        double total = 0;
        int i;
        for (i = 0; i < 3; i++){
        total = total + grade[i];
}
average = total / 3;
printf("average = %.1f", average);
        if (average > 90 && average <= 100)
                printf("The average grade is: A");
        else if (average > 80 && average <= 90)
                printf("The average grade is: B");
        else if (average > 70 && average <= 80)
                printf("The average grade is: C");
        else if (average > 60 && average <= 70)
                printf("The average grade is: D");
        else if (average < 60)
                printf("The average grade is: F");
}
int maxGrade(int grade[]){
int i;
int max;
max = grade[0];
 for (i = 0; i < 3; i++){
        if (grade[i] > max)
        max = grade[i];
        }
return max;
}
int minGrade(int grade[]){
int i;
int min;
min = grade[0];
        for (i = 0; i < 3; i++){
        if (grade[i] < min)
        min = grade[i];
        }
return min;
}
===== ./accounts.txt =====
Acct  Last Name       First Name    Balance
10    Rivers,         John,           42.00
===== ./phone.cpp =====
#include <iostream>
#include "PhoneNumber.h"
using namespace std;

int main() {
        PhoneNumber phone;

        cout << "Enter phone number in the form (555) 555-5555:" << endl;
        cin >> phone;

        cout << "\nThe phone number was:\n";

        cout << phone << endl;
}
===== ./menu_Orchestrator.cpp =====
#include <iostream>
#include <map>
#include <string>
#include <cstdlib>
#include <ctime>
#include <iomanip>
#include <vector>
#include <algorithm>
#include "ArrayStats.h"
#include "InsertionSort.h"
#include "SelectionSort.h"
#include "records_sorter.h"
#define GREEN   "\x1b[32m"
#define YELLOW  "\x1b[33m"
#define RESET   "\x1b[0m"

using namespace std;

// Forward declarations for program_option1 and program_option2
void program_option1();
void program_option2();
void program_option3();
void program_option4();
void generatePassword(char* array, int size);
void randomizeDoubles(double* array, int size);

// Define MainMenu class
class MainMenu {
private:
    std::map<std::string, std::pair<std::string, void(*)()>> topics;

public:
    MainMenu() {
        topics = {
            {"1", {"\033[94mProgram1\033[0m", &program_option1}},
            {"2", {"\033[95mProgram2\033[0m", &program_option2}},
            {"3", {"\033[96mProgram3\033[0m", &program_option3}},
            {"4", {"\033[97mProgram4\033[0m", &program_option4}},
            // Add other topics here...
        };
    }

    void display() {
        std::cout << "\033[96m    Main Menu   \033[0m" << std::endl;
        for (const auto& topic : topics) {
            std::cout << topic.first << ". " << topic.second.first << std::endl;
        }
        std::cout << "0. Exit" << std::endl;
    }

    void selectTopic(const std::string& choice) {
        if (topics.find(choice) != topics.end()) {
            topics[choice].second();
        } else {
            std::cout << "Invalid choice!" << std::endl;
        }
    }
};


void sequence(int n, int steps) {
    if (n == 1 || steps >= n) {
        cout << "n              = " << GREEN << n << RESET << endl;
        cout << "Number of steps = " << YELLOW << steps << RESET << endl;
        return;
    }
    cout << "n              = " << GREEN << n << RESET << endl;
    if (n % 2 == 0) {
        cout << "n * 3 + 1      = " << YELLOW << n * 3 + 1 << RESET << endl;
        sequence(n / 2, steps + 1);
    } else {
        cout << "n / 2          = " << YELLOW << n / 2 << RESET << endl;
        sequence(3 * n + 1, steps + 1);
    }
}

void printArray(const vector<int>& arr) {
    for (int num : arr) {
        cout << "\033[1;36m" << setw(4) << num << "\033[0m";
    }
    cout << endl;
}

vector<int>::iterator findMinIndex(vector<int>::iterator start, vector<int>::iterator end) {
    return min_element(start, end);
}

void selectionSortRecursive(vector<int>& arr, vector<int>::iterator start, vector<int>::iterator end) {
    if (start == end) {
        return;
    }
    auto minIndex = findMinIndex(start, end);
    if (minIndex != start) {
        iter_swap(minIndex, start);
    }
    selectionSortRecursive(arr, start + 1, end);
}


// Define generatePassword function
void generatePassword(char* array, int size) {
    const char charset[] = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
    srand(time(nullptr));
    for (int i = 0; i < size; ++i) {
        array[i] = charset[rand() % (sizeof(charset) - 1)]; // Exclude null terminator
    }
}

// Define randomizeDoubles function
void randomizeDoubles(double* array, int size) {
    srand(time(nullptr));
    for (int i = 0; i < size; ++i) {
        array[i] = (rand() % 10000) / 100.0; // Random doubles between 0.00 and 99.99
    }
}



int main() {
    // Instantiate MainMenu object
    MainMenu menu;
    std::string choice;

    // Main menu loop
    do {
        menu.display();
        std::cout << "\033[98m\nEnter your choice: \033[0m";
        std::cin >> choice;

        if (choice == "0") {
            break;
        }

        menu.selectTopic(choice);
    } while (true);

    return 0;
}
// Define program_option1 function
void program_option1() {
    try {
        int size;
        cout << "Enter the size of the arrays: ";
        cin >> size;

        ArrayStats<int> intArray(size, 10);
        intArray.randomizeValues();
        cout << "\033[1;32mMax value in intArray: \033[0m" << intArray.findMax() << endl;
        cout << "\033[1;33mMin value in intArray: \033[0m" << intArray.findMin() << endl;

        ArrayStats<double> doubleArray(size, 10.5);
        randomizeDoubles(doubleArray.getArray(), size);
        cout << "\033[1;34mMax value in doubleArray: \033[0m" << doubleArray.findMax() << endl;
        cout << "\033[1;35mMin value in doubleArray: \033[0m" << doubleArray.findMin() << endl;

        ArrayStats<char> charArray(8, ' '); // Password-like string of up to 8 characters
        generatePassword(charArray.getArray(), 8);
        cout << "\033[1;36mPassword-like string in charArray: \033[0m";
        for (int i = 0; i < 8; ++i) {
            cout << charArray.getArray()[i];
        }
        cout << endl;
    } catch (const invalid_argument& e) {
        cerr << "\033[1;38mError: \033[0m" << e.what() << endl;
    }
}
// Define program_option2 function
void program_option2() {
    // Implement program_option2 logic here
    int input_value;

    cout << "Enter the starting point: " << GREEN << RESET << endl;
    cin >> input_value;

    sequence(input_value, 0);
}

void program_option3() {
    srand(time(nullptr));

    const int SIZE = 20;
    const int MAX_RANDOM_VALUE = 100;
    vector<int> arr(SIZE);
    for (int i = 0; i < SIZE; ++i) {
        arr[i] = rand() % MAX_RANDOM_VALUE;
    }

    cout << "\nUnsorted array:" << endl;
    for (int num : arr) {
        cout << num << " ";
    }
    cout << endl;

    sort(arr.begin(), arr.end());

    cout << "\nSorted array:" << endl;
    for (int num : arr) {
        cout << num << " ";
    }
    cout << endl;
}

void program_option4() {
    // Implement program_option2 logic here
    vector<Student> students;
    int option;

    do {
        cout << "|---------------------------------------|" << endl;
        cout << "|         Student Records Sorter        |" << endl;
        cout << "|---------------------------------------|" << endl;
        cout << "|Option | Description                   |" << endl;
        cout << "|-------|-------------------------------|" << endl;
        cout << "| 1     | Load student records          |" << endl;
        cout << "| 2     | View data                     |" << endl;
        cout << "| 3     | MergeSort data                |" << endl;
        cout << "| 4     | QuickSort data                |" << endl;
        cout << "| 5     | Exit                          |" << endl;
        cout << "|---------------------------------------|" << endl;
        cout << endl;
        cout << "Choose an option: ";
        cin >> option;
        cout << endl;

        switch (option) {
            case 1:
                cout << "Loading Student Data...";
                loadStudentRecords(students);
                break;
            case 2:
                viewData(students);
                break;
            case 3:
                mergeSortData(students);
                viewData(students);
                break;
            case 4:
                quickSortData(students, 0, students.size() - 1);
                viewData(students);
                break;
            case 5:
                cout << "Exiting..." << endl;
                break;
            default:
                cout << "Invalid option. Please try again." << endl;
                break;
        }

        cout << endl;
    } while (option != 5);
}
===== ./Jrivas_Midterm.cpp =====
#include <iostream>
#include <cstdlib> 
#include <ctime>   
#include <string>
#include <iomanip>
#include "Student.h"
using namespace std;

void swap(Student* &a, Student* &b);

void bubbleSort(Student* arr[], int n);

int main() {
    srand(time(nullptr));

    int numStudents;
    cout << "Enter the number of students: ";
    cin >> numStudents;

    Student** students = new Student*[numStudents];
    for (int i = 0; i < numStudents; ++i) {
        string name;
        cout << "Enter the name for student " << i + 1 << ": ";
        cin >> name;
        students[i] = new Student(name);
    }

    cout << "\033[1;32m\nStudents:\n\033[0m";
    cout << "\033[1;33m|-------------------------------------|\n";
    cout << "\033[1;33m|  Name      |  Age  |   GPA  |  ID   |\n";
    cout << "\033[1;33m|-------------------------------------|\n\033[0m";
    for (int i = 0; i < numStudents; ++i) {
        cout << "\033[1;34m| " << setw(10) << students[i]->getName() << " | "
                  << setw(5) << students[i]->getAge() << " | "
                  << setw(5) << fixed << setprecision(2) << students[i]->getGPA() << " | "
                  << setw(5) << students[i]->getID() << "  |\033[0m\n";
    }

    bubbleSort(students, numStudents);

    cout << "\033[1;32m\nStudents (Sorted):\n\033[0m";
    cout << "\033[1;33m|-------------------------------------|\n";
    cout << "\033[1;33m|  Name      |  Age  |   GPA  |  ID   |\n"; 
    cout << "\033[1;33m|-------------------------------------|\n\033[0m"; 
    for (int i = 0; i < numStudents; ++i) {
        cout << "\033[1;34m| " << setw(10) << students[i]->getName() << " | " 
                  << setw(5) << students[i]->getAge() << " | "
                  << setw(5) << fixed << setprecision(2) << students[i]->getGPA() << " | "
                  << setw(5) << students[i]->getID() << "  |\033[0m\n"; 
    }

    for (int i = 0; i < numStudents; ++i) {
        delete students[i];
    }
    delete[] students;

    return 0;
}

void swap(Student* &a, Student* &b) {
    Student* temp = a;
    a = b;
    b = temp;
}

void bubbleSort(Student* arr[], int n) {
    for (int i = 0; i < n - 1; ++i) {
        for (int j = 0; j < n - i - 1; ++j) {
            if (arr[j]->getGPA() < arr[j + 1]->getGPA()) {
                swap(arr[j], arr[j + 1]);
            }
        }
    }
}
===== ./kirchhoffs_Law_Calculator.cpp =====
#include <iostream>
#include <iomanip>
using namespace std;

void kirchhoffs_law();

int main() {
    cout << "\033[1m\033[32mKirshhoffs Circuit Law: Lab 6\n\033[0m";
    kirchhoffs_law();
    return 0;
}

void kirchhoffs_law() {
    double R1, R2, R3, R4, R5;
    double V1, V2;
    double I1, I2;

    cout << "\033[36m\033[1m\nEnter the values for the resistances in Ohm's:\033[0m" << endl;
    cout << "\033[34mResistance 1 (R1): \033[0m";
    cin >> R1;
    cout << "\033[34mResistance 2 (R2): \033[0m";
    cin >> R2;
    cout << "\033[34mResistance 3 (R3): \033[0m";
    cin >> R3;
    cout << "\033[34mResistance 4 (R4): \033[0m";
    cin >> R4;
    cout << "\033[34mResistance 5 (R5): \033[0m";
    cin >> R5;

    cout << "\033[36m\033[1m\nEnter the values for the voltages in V:\033[0m" << endl;
    cout << "\033[32mVoltage 1 (V1): \033[0m";
    cin >> V1;
    cout << "\033[32mVoltage 2 (V2): \033[0m";
    cin >> V2;
    
    I1 = (V1 * R2 + V1 * R4 + V1 * R5 - V2 * R4) / (R1 * (R2 + R4 + R5) + R4 * (R2 + R5 + R3) + R3 * (R2 + R5));

    I2 = (V2 - I1 * R4) / (R2 + R4 + R5);

    cout << "\033[33m\nThe calculated currents are:\033[0m" << endl;
    cout << "\033[31mI1 = \033[0m"<< fixed << setprecision(3) << I1 << "\033[31m A\033[0m" << endl;
    cout << "\033[31mI2 = \033[0m" << fixed << setprecision(3) << I2 << "\033[31m A\033[0m" << endl;
}===== ./template.cpp =====
#ifndef TEMPLATE_H
#define TEMPLATE_H

#include <iostream> 
#include <cstdlib> 
#include <ctime> 
#include <stdexcept>
using namespace std; 

template<typename T> 
class ArrayStats { 
private: 
    T* array; 
    int size; 

public: 
    ArrayStats(int size, T value) : size(size) { 
        if (size <= 0) {
            throw invalid_argument("Size must be greater than 0");
        }
        array = new T[size]; 
        for (int i = 0; i < size; ++i) { 
            array[i] = value; 
        } 
    } 
    T findMax() { 
        T max = array[0]; 
        for (int i = 1; i < size; ++i) { 
            if (array[i] > max) { 
                max = array[i]; 
            } 
        } 
        return max; 
    } 
    T findMin() { 
        T min = array[0]; 
        for (int i = 1; i < size; ++i) { 
            if (array[i] < min) { 
                min = array[i]; 
            } 
        } 
        return min; 
    } 
    void randomizeValues() { 
        srand(time(0)); 
        for (int i = 0; i < size; ++i) { 
            array[i] = static_cast<T>(rand() % 100); 
        } 
    } 
    ~ArrayStats() { 
        delete[] array; 
    } 
}; 

#endif
===== ./ArrayStats.h =====
#ifndef ARRAYSTATS_H
#define ARRAYSTATS_H

#include <iostream>
#include <cstdlib>
#include <ctime>
#include <stdexcept>
using namespace std;

template<typename T>
class ArrayStats {
private:
    T* array;
    int size;

public:
    ArrayStats(int size, T value) : size(size) {
        if (size <= 0) {
            throw invalid_argument("Size must be greater than 0");
        }
        array = new T[size];
        for (int i = 0; i < size; ++i) {
            array[i] = value;
        }
    }
    T findMax() {
        T max = array[0];
        for (int i = 1; i < size; ++i) {
            if (array[i] > max) {
                max = array[i];
            }
        }
        return max;
    }
    T findMin() {
        T min = array[0];
        for (int i = 1; i < size; ++i) {
            if (array[i] < min) {
                min = array[i];
            }
        }
        return min;
    }
    void randomizeValues() {
        srand(time(0));
        for (int i = 0; i < size; ++i) {
            array[i] = static_cast<T>(rand() % 100);
        }
    }
    T* getArray() const {
        return array;
    }
    ~ArrayStats() {
        delete[] array;
    }
};

#endif
===== ./settings.json =====
{
    "files.associations": {
        "algorithm": "cpp"
    }
}===== ./lexicalanalysis.cpp =====
#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <map>

using namespace std;

int main() {
 
  ifstream file("essay.txt");

  
  if (!file) {
    cout << "Error opening file." << endl;
    return 1;
  }

  
  vector<string> words;

  
  string  word;
  while (file >> word) {
    words.push_back(word);
  }

  bool complete = false;
  while (!complete) {

    cout << "Enter a word to find: ";
    string regex;
    cin  >> regex;

    int count = 0;
    for (string word : words) {
        if (word == regex) {
        count++;
        }
    }

    double percentage = (double)count / words.size() * 100;

    cout << regex << " appears " 
         << count << " times in the file. This is " 
         << percentage << "% of the total words." 
         << endl;

    cout << "Enter the next word: ";
    string adj_rex;
    cin  >> adj_rex;

    bool true_dex = false;
    for  (int i  = 0; i < words.size() - 1; i++) {
      if (words[i] == regex && words[i + 1] == adj_rex) {
         true_dex = true;
         break;
      }
    }

    if (true_dex) {
      cout << "The words '"   << regex << "' and '" << adj_rex
           << "' appear together " << count << " times in the file. This is " 
           << percentage << "% of the total words." << endl;
    }

   // Prompt the user if they are done.
    cout << "Are you done? (y/n) ";
    char answer;
    cin >> answer;

    // If the user says yes, set the done flag to true.
    if (answer == 'y') {
      complete = true;
    }
  }

  // Close the file.
  file.close();

  return 0;
}
===== ./Node.cpp =====
//Node.cpp
#include <iostream>
#include <string>
#include <thread>
#include <chrono>
#include <algorithm>
#include "Node.h"
using namespace std;

void print_with_pause(string text, int pause_time = 1500){
    cout << text << endl;
    this_thread::sleep_for(chrono::milliseconds(pause_time));
}

string to_lower(string str) {
    transform(str.begin(), str.end(), str.begin(), ::tolower);
    return str;
}

void explore_forest(Node* current_location, bool& found_gem, bool& found_sword, bool& found_chest, bool& found_cave) {
    print_with_pause(current_location->description);

    if (current_location->gem && !found_gem) {
        found_gem = true;
        print_with_pause("\033[94m💎 You stumbled upon a glittering gem hidden among the ferns!\033[0m");
    }
    if (current_location->sword && !found_sword) {
        found_sword = true;
        print_with_pause("\033[92m🗡️ A gleaming sword, adorned with ancient runes, catches your eye!\033[0m");
    }
    if (current_location->chest && !found_chest) {
        found_chest = true;
        print_with_pause("\033[93m🎉 You discover a mysterious treasure chest half-buried beneath a magical oak tree!\033[0m");
    }
    if (current_location->cave && !found_cave) {
        found_cave = true;
        print_with_pause("\033[95m⛰️️ A hidden underwater cave beckons you with its iridescent glow!\033[0m");
    }

    if (found_gem && found_sword && found_chest && found_cave) {
        print_with_pause("\033[1m\033[91m🌈 Congratulations! You've found all the magical treasures and completed your quest!\033[0m");
        return;
    }

    string direction;
    cout << "\033[93m🔍 Which path will you explore next? (north/south/east/west): \033[0m";
    cin >> direction;

    direction = to_lower(direction);

    if (direction == "north" && current_location->north != nullptr) {
        explore_forest(current_location->north, found_gem, found_sword, found_chest, found_cave);
    } else if (direction == "south" && current_location->south != nullptr) {
        explore_forest(current_location->south, found_gem, found_sword, found_chest, found_cave);
    } else if (direction == "east" && current_location->east != nullptr) {
        explore_forest(current_location->east, found_gem, found_sword, found_chest, found_cave);
    } else if (direction == "west" && current_location->west != nullptr) {
        explore_forest(current_location->west, found_gem, found_sword, found_chest, found_cave);
    } else {
        print_with_pause("\033[91m🪄 You encountered a magical barrier, preventing further exploration in that direction. Perhaps there's another path to discover...\033[0m");
        explore_forest(current_location, found_gem, found_sword, found_chest, found_cave);
    }
}

===== ./linked_list_grades_sort.cpp =====
//main.cpp
#include <iostream>
#include <fstream>
#include "ListNode.h"
using namespace std;

int main()
{
    ifstream inFile;
    inFile.open("Grades.txt");
    ListNode *head= NULL;
    double value;

    for (int x=0; x<10; x++)
    {
        inFile >> value;
        head = new ListNode(value, head);
    }

    ListNode *ptr1;
    double temp;

    for (int x=0; x<10; x++)
    {
        ptr1=head;
        for (int y=0; y<10-1-x; y++)
        {
            if (ptr1->value > ptr1->next->value)
            {
                temp = ptr1->value;
                ptr1->value = ptr1->next->value;
                ptr1->next->value = temp;
            }
            ptr1=ptr1->next;
        }
    }

    ListNode *ptr = head;
    for (int x=0; x<10; x++)
    {
        cout << ptr->value << endl;
        ptr = ptr->next;
    }

    return 0;
}===== ./phone_number_input.cpp =====
 //10.5

#include <iostream>
#include "PhoneNumber.h"
using namespace std;

int main() {
	PhoneNumber phone;
	
	cout << "Enter phone number in the form (555) 555-5555:" << endl;
	cin >> phone;
	
	cout << "\nThe phone number was:\n";
	
	cout << phone << endl;
}
===== ./rectangle.cpp =====
#include <iostream>
#include <iomanip>
using namespace std;

class Rectangle {
public:
    Rectangle(double length,
        double width)
        : length(length),
        width(width) {}

    double get_length() const {
        return length;
    }

    double get_width() const {
        return width;
    }

    double get_perimeter() const {
        return ((length * 2) + (width * 2));
    }

    double get_area() const {
        return (length * width);
    }

    void resize(double factor) {
        length  *= factor;
        width *= factor;
    }

    friend ostream&
        operator <<(ostream& os,
        const Rectangle& rectangle) {
        os << "Rectangle [length="
           << rectangle.length << ",width="
           << rectangle.width << "]\n";
        return os;
    }

private:
    double width;
    double length;
};

int main() {

    Rectangle r1(20.52, 12.5);
    Rectangle r2(5.27, 2.4);
    Rectangle r3(38.7, 22.89);

    cout << setw(5) << r1;
    cout << setw(5) << r2;
    cout << setw(5) << r3;


    cout << "\nLength is: "  << fixed  << setprecision(2);
    cout << setw(18) << r1.get_length()<< endl;
    cout << "Width is: " << fixed  << setprecision(2)<< setw(19) << r1.get_width() << endl;
    cout << "Area is: "      << fixed  << setprecision(2) << setw(21) << r1.get_area()  << endl;
    cout << "Perimeter is: " << fixed  << setprecision(2) << setw(15) << r1.get_perimeter() << endl;

    return 0;
}
===== ./grade_Calculator_Menu.cpp =====
#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <iomanip>
#include <algorithm>

const int MAX_CLASSES = 25;
const int NUM_GRADES = 5;

struct Class {
    std::string name;
    double grades[NUM_GRADES];
};

void calculateAndWriteAverages(std::ifstream& input_file, std::ofstream& output_file, Class classes[], int num_classes) {
    for (int i = 0; i < num_classes; i++) {
        Class& class_obj = classes[i];
        
        // Calculate the average grade for the class
        double sum = 0.0;
        for (int j = 0; j < NUM_GRADES; j++) {
            sum += class_obj.grades[j];
        }
        double avg_grade = sum / NUM_GRADES;
        
        output_file << class_obj.name << ": " << std::fixed << std::setprecision(2) << avg_grade << std::endl;
    }
}

int main() {
    
    std::ifstream input_file("grades.txt");
    std::ofstream output_file("averages.txt");
    
    if (!input_file.is_open() || !output_file.is_open()) {
        std::cerr << "Failed to open file." << std::endl;
        return 1;
    }
    
    Class classes[MAX_CLASSES];
    int num_classes = 0;
    std::string line;
    while (std::getline(input_file, line)) {
        if (num_classes >= MAX_CLASSES) {
            std::cerr << "Too many classes in input file." << std::endl;
            return 1;
        }
        std::stringstream ss(line);
        ss >> classes[num_classes].name;
        for (int i = 0; i < NUM_GRADES; i++) {
            ss >> classes[num_classes].grades[i];
        }
        num_classes++;
    }
    
    std::cout << "Welcome to your Grade Calculator\n"
                << "1. New Entry\n"
                << "2. Highest Grade in Course\n"
                << "3. Lowest Grade in Course\n"
                << "4. Calculate your Average\n"
                << "5. Exit\n";
    
    int option;
    do {
        cout << "\nChoose an option: ";
        cin >> option;
        
        switch (option) {
            case 1: {
                // Get the name of the new subject
                string new_subject;
                cout << "Enter the name of the new subject: ";
                cin >> new_subject;
                
                // Get the grades for the new subject
                double new_grades[NUM_GRADES];
                std::cout << "Enter the grades for the new subject: ";
                for (int i = 0; i < NUM_GRADES; i++) {
                    std::cin >> new_grades[i];
                }
                
                // Add the new subject and grades to the end of the classes array
                if (num_classes >= MAX_CLASSES) {
                    std::cerr << "Cannot add new class: maximum number of classes reached." << std::endl;
                    break;
                }
                Class& new_class = classes[num_classes];
                new_class.name = new_subject;
                for (int i = 0; i < NUM_GRADES; i++){
                    new_class.grades[i] = new_grades[i];
                }
                
                // Write the updated averages to the output file
                calculateAndWriteAverages(input_file, output_file, classes, num_classes);
                break;
            }
            case 2: {

            double highest_grade = 0.0;
            std::string highest_grade_class;
            for (int i = 0; i < num_classes; i++) {
                Class& class_obj = classes[i];
                for (int j = 0; j < NUM_GRADES; j++) {
                    if (class_obj.grades[j] > highest_grade) {
                        highest_grade = class_obj.grades[j];
                        highest_grade_class = class_obj.name;
                    }
                }
            }
            
            // Write the highest grade and class to the output file
            output_file << "Highest grade: " << highest_grade << " in " << highest_grade_class << std::endl;
            break;
        }
        case 3: {
            // Find the lowest grade in the classes array
            double lowest_grade = 100.0;
            std::string lowest_grade_class;
            for (int i = 0; i < num_classes; i++) {
                Class& class_obj = classes[i];
                for (int j = 0; j < NUM_GRADES; j++) {
                    if (class_obj.grades[j] < lowest_grade) {
                        lowest_grade = class_obj.grades[j];
                        lowest_grade_class = class_obj.name;
                    }
                }
            }
            
            // Write the lowest grade and class to the output file
            output_file << "Lowest grade: " << lowest_grade << " in " << lowest_grade_class << std::endl;
            break;
        }
        case 4: {
            // Calculate and write the average grades to the output file
            calculateAndWriteAverages(input_file, output_file, classes, num_classes);
            break;
        }
        case 5:
            // Exit the program
            break;
        default:
            std::cout << "Invalid option. Please choose a valid option." << std::endl;
            break;
    }
} while (option != 5);

// Close the input and output files
input_file.close();
output_file.close();

return 0;
}
void calculateHighestGrade(const vector<int>& grades) {
    if (grades.empty()) {
        cout << "No grades to calculate." << std::endl;
        return;
    }
    int highest = *max_element(grades.begin(), grades.end());
    cout << "The highest grade is: " << highest << endl;
}

void calculateLowestGrade(const vector<int>& grades) {
    if (grades.empty()) {
        cout << "No grades to calculate." << endl;
        return;
    }
    int lowest = *min_element(grades.begin(), grades.end());
    cout << "The lowest grade is: " << lowest << endl;
}


===== ./even_odd_checker.cpp =====
#include <iostream>

using namespace std;

int main ()
{
	int number, remainder;
	cout << "Please Enter an Integer: ";
	cin  >> number;
	remainder = number % 2;
	if (remainder == 0) {
		cout << number << ", The Number is Even.";
	}else
	{
		cout << number << ", The Number is Odd.";
	}
	
	return 0;
}===== ./array_stats_and_password.cpp =====
#include <iostream>
#include <cstdlib>
#include <ctime>
#include "ArrayStats.h"

using namespace std;

void generatePassword(char* array, int size) {
    const char charset[] = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
    srand(time(nullptr));
    for (int i = 0; i < size; ++i) {
        array[i] = charset[rand() % (sizeof(charset) - 1)]; // Exclude null terminator
    }
}

void randomizeDoubles(double* array, int size) {
    srand(time(nullptr));
    for (int i = 0; i < size; ++i) {
        array[i] = (rand() % 10000) / 100.0; // Random doubles between 0.00 and 99.99
    }
}

int main() {
    try {
        int size;
        cout << "Enter the size of the arrays: ";
        cin >> size;

        ArrayStats<int> intArray(size, 10);
        intArray.randomizeValues();
        cout << "\033[1;32mMax value in intArray: \033[0m" << intArray.findMax() << endl;
        cout << "\033[1;33mMin value in intArray: \033[0m" << intArray.findMin() << endl;

        ArrayStats<double> doubleArray(size, 10.5);
        randomizeDoubles(doubleArray.getArray(), size);
        cout << "\033[1;34mMax value in doubleArray: \033[0m" << doubleArray.findMax() << endl;
        cout << "\033[1;35mMin value in doubleArray: \033[0m" << doubleArray.findMin() << endl;

        ArrayStats<char> charArray(8, ' '); // Password-like string of up to 8 characters
        generatePassword(charArray.getArray(), 8);
        cout << "\033[1;36mPassword-like string in charArray: \033[0m";
        for (int i = 0; i < 8; ++i) {
            cout << charArray.getArray()[i];
        }
        cout << endl;
    } catch (const invalid_argument& e) {
        cerr << "\033[1;38mError: \033[0m" << e.what() << endl;
    }

    return 0;
}
===== ./program3.cpp =====
#include <iostream>
#include <cstdlib>
#include <ctime>
#include <vector>
using namespace std;

class Coin {
private:
    string sideUp;

public:
    Coin() {
        srand(static_cast<unsigned int>(time(nullptr)));
        int toss = rand() % 2;
        if (toss == 0) {
            sideUp = "heads";
        }
        else {
            sideUp = "tails";
        }
    }

    string getSideUp() {
        return sideUp;
    }

    void toss() {
        int toss = rand() % 2;
        if (toss == 0) {
            sideUp = "heads";
        }
        else {
            sideUp = "tails";
        }
    }
};

int main() {
    int headCount = 0;
    int tailCount = 0;
    Coin c;
    vector<string> tossResults;
    cout << "Coin has '" << c.getSideUp()
        << "' facing up." << endl;
    tossResults.push_back(c.getSideUp());

    cout << "Randomizing coin toss, 20 times:" << endl;
    for (int i = 0; i < 20; i++) {
        c.toss();
        tossResults.push_back(c.getSideUp());
    }

    for (size_t i = 0; i < tossResults.size(); i++) {
        cout << i + 1 << ". " << tossResults[i] << endl;
        if (tossResults[i] == "heads") {
            headCount++;
        }
        else if (tossResults[i] == "tails") {
            tailCount++;
        }
    }

    cout << "Heads was facing up: " << headCount << endl;
    cout << "Tails was facing up: " << tailCount << endl;

    return 0;
}
===== ./class_grade_averager.cpp =====
#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <iomanip>
#include <algorithm>

const int MAX_CLASSES = 25;
const int NUM_GRADES = 5;

struct Class {
    std::string name;
    double grades[NUM_GRADES];
};

void calculateAndWriteAverages(std::ifstream& input_file, std::ofstream& output_file, Class classes[], int num_classes) {
    for (int i = 0; i < num_classes; i++) {
        Class& class_obj = classes[i];
        
        // Calculate the average grade for the class
        double sum = 0.0;
        for (int j = 0; j < NUM_GRADES; j++) {
            sum += class_obj.grades[j];
        }
        double avg_grade = sum / NUM_GRADES;
        
        output_file << class_obj.name << ": " << std::fixed << std::setprecision(2) << avg_grade << std::endl;
    }
}

int main() {
    
    std::ifstream input_file("grades.txt");
    std::ofstream output_file("averages.txt");
    
    if (!input_file.is_open() || !output_file.is_open()) {
        std::cerr << "Failed to open file." << std::endl;
        return 1;
    }
    
    Class classes[MAX_CLASSES];
    int num_classes = 0;
    std::string line;
    while (std::getline(input_file, line)) {
        if (num_classes >= MAX_CLASSES) {
            std::cerr << "Too many classes in input file." << std::endl;
            return 1;
        }
        std::stringstream ss(line);
        ss >> classes[num_classes].name;
        for (int i = 0; i < NUM_GRADES; i++) {
            ss >> classes[num_classes].grades[i];
        }
        num_classes++;
    }
    
    std::cout << "Welcome to your Grade Calculator\n";
    std::cout << "1. New Entry\n";
    std::cout << "2. Highest Grade in Course\n";
    std::cout << "3. Lowest Grade in Course\n";
    std::cout << "4. Calculate your Average\n";
    std::cout << "5. Exit\n";
    
    int option;
    do {
        std::cout << "\nChoose an option: ";
        std::cin >> option;
        
        switch (option) {
            case 1: {
                // Get the name of the new subject
                std::string new_subject;
                std::cout << "Enter the name of the new subject: ";
                std::cin >> new_subject;
                
                // Get the grades for the new subject
                double new_grades[NUM_GRADES];
                std::cout << "Enter the grades for the new subject: ";
                for (int i = 0; i < NUM_GRADES; i++) {
                    std::cin >> new_grades[i];
                }
                
                // Add the new subject and grades to the end of the classes array
                if (num_classes >= MAX_CLASSES) {
                    std::cerr << "Cannot add new class: maximum number of classes reached." << std::endl;
                    break;
                }
                Class& new_class = classes[num_classes];
                new_class.name = new_subject;
                for (int i = 0; i < NUM_GRADES; i++){
                    new_class.grades[i] = new_grades[i];
                }
                
                // Write the updated averages to the output file
                calculateAndWriteAverages(input_file, output_file, classes, num_classes);
                break;
            }
            
            case 2: {
            // Find the highest grade in the classes array
            double highest_grade = 0.0;
            std::string highest_grade_class;
            for (int i = 0; i < num_classes; i++) {
                Class& class_obj = classes[i];
                for (int j = 0; j < NUM_GRADES; j++) {
                    if (class_obj.grades[j] > highest_grade) {
                        highest_grade = class_obj.grades[j];
                        highest_grade_class = class_obj.name;
                    }
                }
            }
            
            // Write the highest grade and class to the output file
            output_file << "Highest grade: " << highest_grade << " in " << highest_grade_class << std::endl;
            break;
        }
        case 3: {
            // Find the lowest grade in the classes array
            double lowest_grade = 100.0;
            std::string lowest_grade_class;
            for (int i = 0; i < num_classes; i++) {
                Class& class_obj = classes[i];
                for (int j = 0; j < NUM_GRADES; j++) {
                    if (class_obj.grades[j] < lowest_grade) {
                        lowest_grade = class_obj.grades[j];
                        lowest_grade_class = class_obj.name;
                    }
                }
            }
            
            // Write the lowest grade and class to the output file
            output_file << "Lowest grade: " << lowest_grade << " in " << lowest_grade_class << std::endl;
            break;
        }
        case 4: {
     if (num_classes == 0) {
        std::cerr << "No classes to calculate average." << std::endl;
        break;
    }

    // Calculate the overall average for all classes
    double sum = 0.0;
    for (int i = 0; i < num_classes; i++) {
        for (int j = 0; j < NUM_GRADES; j++) {
            sum += classes[i].grades[j];
        }
    }
    double overall_avg = sum / (num_classes * NUM_GRADES);

    output_file << "Overall Average: " << std::fixed << std::setprecision(2) << overall_avg << std::endl;

    std::cout << "Average grades have been written to averages.txt" << std::endl;
    break;
}

        case 5:
            // Exit the program
            break;
        default:
            std::cout << "Invalid option. Please choose a valid option." << std::endl;
            break;
    }
} while (option != 5);

// Close the input and output files
input_file.close();
output_file.close();

return 0;
}
===== ./sort_Numbers.c =====
#include <stdio.h>

void sortNums(int *a, int cnt);

int main(void)
{
    FILE *fptr = fopen("test.txt", "r");
    FILE *fp2 = fopen("sorted.txt", "w");

    if (fptr == NULL) {
        printf("Error: cannot open test.txt for reading.\n");
        return 1;
    }
    if (fp2 == NULL) {
        printf("Error: cannot open sorted.txt for writing.\n");
        fclose(fptr);
        return 1;
    }

    int a[100];
    int cnt = 0;

    // Read integers from test.txt
    while (fscanf(fptr, "%d", &a[cnt]) == 1) {
        cnt++;
    }
    fclose(fptr);

    // Sort the array
    sortNums(a, cnt);

    // Write sorted integers to sorted.txt
    for (int i = 0; i < cnt; i++) {
        fprintf(fp2, "%d\n", a[i]);
    }
    fclose(fp2);

    printf("Sorting complete. Output written to sorted.txt\n");
    return 0;
}

void sortNums(int *a, int cnt)
{
    int i, j, tmp;
    for (i = 1; i < cnt; i++) {
        tmp = a[i];
        j = i - 1;
        while (j >= 0 && a[j] > tmp) {
            a[j + 1] = a[j];
            j--;
        }
        a[j + 1] = tmp;
    }
}
===== ./grade.c =====
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

#define MAX_STUDENTS 100
#define STRING_LENGHT 255
#define TEST_SCORES 7
#define TRUE 1
#define FALSE 0



// METHOD 1 : REMOVING EXTRA WHITE SPACE
typedef struct {

    char name[STRING_LENGHT];
    char letterGrade;
    int scores[TEST_SCORES];

} STUDENT;

char *trimString(char *string)
{
    char *end = NULL;

    while (isspace(*string)) string++;

    if (*string == 0)
        return string;

    end = string + strlen(string) - 1;

    while (end > string && isspace(*end))
        end--;

    *(end + 1) = 0;

    return string;

}

// METHOD 2 : READ FROM INPUT FILE
int loadStudents(char *filename, STUDENT students[MAX_STUDENTS], int *numStudents)
{
    FILE *inFile = NULL;

    char *tokenizer = NULL;
    char line[STRING_LENGHT];
    char token[STRING_LENGHT];

    int i = 0;

    inFile = fopen(filename, "r");

    if (!inFile)
    {
        printf("FAIL! Cannot open %s\n", filename);
        return FALSE;

    }

    *numStudents = 0;

    while (fgets(line, STRING_LENGHT, inFile))
    {

        trimString(line);
        tokenizer = strtok(line,",");

        strcpy(token, tokenizer);
        strcpy(token, trimString(token));
        strcpy(students[*numStudents].name, token);

        for (i = 0; i < TEST_SCORES; i++)
        {
            tokenizer = strtok(NULL, ",");
            strcpy(token, tokenizer);
            strcpy(token, trimString(token));
            students[*numStudents].scores[i] = atoi(token);

        } 

        (*numStudents)++;

     } 

    return TRUE;

} 


// METHOD 3 : CALCULATING INDIVIDUAL STUDENT SCORE
double calculateGrade(int scores[TEST_SCORES])
{
    double weights[] = { 0.10, 0.10, 0.10, 0.10, 0.20, 0.15, 0.25 };
    double grade = 0;
    int i = 0;

    for (i = 0; i < TEST_SCORES; i++)
    grade += scores[i] * weights[i];

    return grade;

} 

   // METHOD 4 : CONVERTING FROM STUDENT TOTAL SCORE TO LETTER GRADE
char calculateLetterGrade(double grade)
{
//average = total / 3;
printf("average = %.1f", grade);
        if (grade > 90 && grade <= 100)
                printf("The average grade is: A");
        else if (grade > 80 && grade <= 90)
                printf("The average grade is: B");
        else if (grade > 70 && grade <= 80)
                printf("The average grade is: C");
        else if (grade > 60 && grade <= 70)
                printf("The average grade is: D");
        else if (grade < 60)
                printf("The average grade is: F");
    return grade;
}

// METHOD 5 : CALCULATING STUDENT GRADE
void calculateStudentGrades(STUDENT students[MAX_STUDENTS], int numStudents)
{
    int i = 0;

    for (i = 0; i < numStudents; i++)
        students[i].letterGrade = calculateLetterGrade(calculateGrade(students[i].scores));
}

// METHOD 6 : SORTING STUDENT NAME ALPHABETICALLY
void sortStudents(STUDENT students[MAX_STUDENTS], int numStudents)
{
    int i = 0;
    int j = 0;

    STUDENT temp;

    for (i = 0; i < numStudents - 1; i++)
    {
        for (j = i + 1; j < numStudents; j++)
        {
            if (strcmp(students[i].name, students[j].name) > 0)
            {
                temp = students[i];
                students[i] = students[j];
                students[j] = temp;

            } 
        }         
    }

}

// METHOD 7 : WRITING STUDENT LETTER GRADE TO OUTPUT FILE
int writeGrade(char *filename, char *inputFilename, STUDENT students[MAX_STUDENTS], int numStudents)

{
    FILE *outFile = NULL;
    int i = 0;

    outFile = fopen(filename, "w");

    if (!outFile)

    {
        printf("Error: failed to open %s\n", filename);
        return FALSE;

    } 

    fprintf(outFile, "Letter grade for %d students listed in file %s\n\n\n Here is the class average:\n\n", numStudents, inputFilename);

    for (i = 0; i < numStudents; i++)
        fprintf(outFile, "%s%c\n", strcat(students[i].name, ":"), students[i].letterGrade);

    fclose(outFile);
    return TRUE;

} 


// METHOD 8 : CALCULATING INDIVIDUAL TESTS AVERAGE
double calculateAverage(STUDENT students[MAX_STUDENTS], int numStudents, int scoreCategory)

{
    double sum = 0;
    int i = 0;

    for (i = 0; i < numStudents; i++)
        sum += students[i].scores[scoreCategory];

    return sum / numStudents;

}


// METHOD 9 : BUBBLE SORT AND EXTRACTING MINIMUM SCORE OF EACH TEST
int findMinimumScore(STUDENT students[MAX_STUDENTS], int numStudents, int scoreCategory)

{
    int min = -1;
    int i = 0;

    for (i = 0; i < numStudents; i++)
        if (min == -1 || students[i].scores[scoreCategory] < min)
            min = students[i].scores[scoreCategory];

    return min;

} 


// METHOD 10 : BUBBLE SORT AND EXTRACTING MAXIMUM SCORE OF EACH TEST
int findMaximumScore(STUDENT students[MAX_STUDENTS], int numStudents, int scoreCategory)
{
    int max = -1;
    int i = 0;

    for (i = 0; i < numStudents; i++)
        if (max == -1 || students[i].scores[scoreCategory] > max)
            max = students[i].scores[scoreCategory];

    return max;

}===== ./PhoneNumber.cpp =====
#include <iomanip>
#include "PhoneNumber.h"
using namespace std;

ostream& operator<<(ostream& output, const PhoneNumber& number) {
        output << "Area Code: " << number.areaCode << "\nExchange: "
                << number.exchange << "\nLine: " << number.line << "\n" // Corrected
                << "(" << number.areaCode << ") " << number.exchange << "-"
                << number.line << "\n";

        return output;
}

istream& operator >>(istream& input, PhoneNumber& number) {
        input.ignore();
        input >> setw(3) >> number.areaCode;
        input.ignore(2);
        input >> setw(3) >> number.exchange;
        input .ignore();
        input >> setw(4) >> number.line;
        return input;
}
===== ./Person.h =====
// Person.h
#ifndef PERSON_H
#define PERSON_H

#include <string>

class Person {
private:
    std::string name;
    int age;
public:
    Person(const std::string& name);

    std::string getName() const;
    int getAge() const;
};

#endif // PERSON_H
===== ./collatz_sequence.cpp =====
#include <iostream>
#define GREEN   "\x1b[32m"
#define YELLOW  "\x1b[33m"
#define RESET   "\x1b[0m"

using namespace std;


void sequence(int n, int steps) {
    if (n == 1 || steps >= n) {
        cout << "n              = " << GREEN << n << RESET << endl;
        cout << "Number of steps = " << YELLOW << steps << RESET << endl;
        return;
    }
    cout << "n              = " << GREEN << n << RESET << endl;
    if (n % 2 == 0) {
        cout << "n * 3 + 1      = " << YELLOW << n * 3 + 1 << RESET << endl;
        sequence(n / 2, steps + 1);
    } else {
        cout << "n / 2          = " << YELLOW << n / 2 << RESET << endl;
        sequence(3 * n + 1, steps + 1);
    }
}

int main() {
    int input_value;

    cout << "Enter the starting point: " << GREEN << RESET << endl;
    cin >> input_value;

    sequence(input_value, 0);

    return 0;
}

===== ./movieData7.txt =====
#include <stdio.h>

struct record{
        int inputMovie;
        char title[25];
        char dir[25];
        char date[11];
        char length[5];
}movieArray[3];

int choiceData=0;
int archMenu();
void dataMenu(int i);
void printArchive(int recordNum);

int main(void) {
    
    FILE * fp;
        int dataInput=0;
        int recordNum = 0;
        do{
                dataInput = archMenu();
                switch(dataInput){
                        case 1:
                                FILE * fp;
                                fp = fopen("movie.txt", "a+");
                                printf("Initializing archive tools: \n");
                                dataMenu(recordNum);
                                recordNum++;
                                //break;
                                //printMovie(recordNum);
                                fclose;
                                break;
                        case 2:
                                FILE * fp2;
                                fp2=fopen("movie.txt","a+");
                                printf("Initializing archive tools: \n");
                                dataMenu(recordNum);
                                recordNum++;
                                //break;
                                //printMovie(recordNum);
                                fclose;
                                break; 
                        case 3:
                            
                                FILE * fp3;
                                fp3=fopen("movie.txt","a+");
                                printf("Initializing archive tools: \n");
                                dataMenu(recordNum);
                                recordNum++;
                                //break;
                                //printMovie(recordNum);
                                fprintf;
                                break;        
                        
                        case 4:
                                printf("Thanks for using the movie inventory.\n\n");
                                break;
                        default:
                                printf("error: Please enter a correct option!\n");
                }
        }while(dataInput!=4);
        fclose!=feof;
}
int archMenu() {
        FILE *fp;
        fp = fopen("movie.txt", "r+");
        int choice=0;
        printf("Welcome to the Movie Library!\n");
        printf("**************************\n");
        printf("\nEnter Option\n");
        printf("\n1) Insert Movie One\n");
        printf("\n2) Insert Movie Two\n");
        printf("\n3) Insert Movie Three\n");
        printf("\n4) Exit?\n");
        printf("**************************\n");
        do{
                printf("Option: \n");
                scanf("%d", &choice);
        }while(choice<1 || choice>4);
        return choice;
}      


void dataMenu(int i) {
    FILE * fp;
    fp = fopen("movie.txt", "w+");
   
        while((getchar())!='\n');
        printf("\t\tEnter Movie Title: ");
        fgets(movieArray[i].title,25, stdin);
                while((getchar())!='\n');
        printf("\t\tEnter Director: ");
        fgets(movieArray[i].dir,25, stdin);
              while((getchar())!='\n');
        printf("\t\tEnter Release Date: ");
        fgets(movieArray[i].date,11, stdin);
        fflush(stdin);
        while((getchar())!='\n');
        printf("\t\tEnter Length: ");
        fgets(movieArray[i].length, 5, stdin);
  
   fprintf;
    
}===== ./grade_subjects_ATOMIC1.c =====
#include <iostream> 
#include <fstream>
#include <sstream>
#include <vector>
#include <iomanip>
#include <algorithm>

using namespace std;

const int MAX_CLASSES = 25;
const int NUM_GRADES = 5;

struct Class {
    string subject;
    double grades[NUM_GRADES];
};

void calculateAndWriteAverages(ifstream& grade_input, ofstream& grade_output, Class  classes[], int num_classes);


int main() {
    
    ifstream grade_input("grades.txt");
    ofstream grade_output("averages.txt");
    
    if (!grade_input.is_open() || !grade_output.is_open()) {
        cerr << "Failed to open file." << endl;
        return 1;
    }
    
    Class classes[MAX_CLASSES];
    int num_classes = 0;
    string inFileLine;
    while (getline(grade_input, inFileLine)) {
        if (num_classes >= MAX_CLASSES) {
            cerr << "Too many classes in input file." << endl;
            return 1;
        }
        stringstream inGradeFile(inFileLine);
        inGradeFile >> classes[num_classes].subject;
        for (int i = 0; i < NUM_GRADES; i++) {
            inGradeFile >> classes[num_classes].grades[i];
        }
        num_classes++;
    }
    
    cout << "Welcome to your Grade Calculator\n";
    cout << "1. New Entry\n";
    cout << "2. Highest Course Average\n";
    cout << "3. Lowest Course Average\n";
    cout << "4. Calculate your Average\n";
    cout << "5. Exit\n";
    
    int choice;
    do {
        cout << "\nChoose an option: ";
        cin >> choice;
        
        switch (choice) {
                case 1: {
                    string new_subject;
                    cout << "Enter the name of the new subject: ";
                    cin >> new_subject;
                
                    double new_grades[NUM_GRADES];
                    cout << "Enter the grades for the new subject: ";
                    for (int i = 0; i < NUM_GRADES; i++) {
                        cin >> new_grades[i];
                    }
                    if (num_classes >= MAX_CLASSES) {
                        cerr << "Cannot add new class: maximum number of classes reached." << endl;
                        break;
                    }
                    Class& new_class = classes[num_classes];
                    new_class.subject = new_subject;
                    for (int i = 0; i < NUM_GRADES; i++){
                        new_class.grades[i] = new_grades[i];
                    }
             //       calculateAndWriteAverages(ifstream& grade_input, ofstream& grade_output, Class  classes[], int num_classes);
                    break;
                }
                case 2: {
            // Find the class with the highest average grade
                    int max_sort = -1;
                    double max_avg_grade = -1.0;
                    for (int i = 0; i < num_classes; i++) {
                        double sum = 0.0;
                    for (int j = 0; j < NUM_GRADES; j++) {
                        sum += classes[i].grades[j];
                    }
                    double avg_grade = sum / NUM_GRADES;
                    if (avg_grade > max_avg_grade) {
                        max_sort = i;
                        max_avg_grade = avg_grade;
                        }
                    }
    
                    // Output the class with the highest average grade
                    if (max_sort == -1) {
                    cout << "No classes found." << endl;
                    } else {
                    cout << "Class with highest average grade: " << classes[max_sort].subject << endl;
                    }
                    break;
                }
                case 3: {
           
                    int min_sort = -1;
                    double min_avg_grade = 101.0;
                    for (int i = 0; i < num_classes; i++) {
                        double sum = 0.0;
                        for (int j = 0; j < NUM_GRADES; j++) {
                            sum += classes[i].grades[j];
                        }
                        double avg_grade = sum / NUM_GRADES;
                        if (avg_grade < min_avg_grade) {
                            min_sort = i;
                            min_avg_grade = avg_grade;
                        }
                    }
                    if (min_sort == -1) {
                        cout << "No classes found." << endl;
                    } else {
                        cout << "Class with lowest average grade: " << classes[min_sort].subject << endl;
                    }
                    break;
                }
                case 4: {

                    if (num_classes == 0) {
                        cerr << "No classes to calculate average." << endl;
                        break;
                    }
                
                    double sum = 0.0;
                    int num_grades = num_classes * NUM_GRADES;
                    for (int i = 0; i < num_classes; i++) {
                        for (int j = 0; j < NUM_GRADES; j++) {
                            sum += classes[i].grades[j];
                        }
                    }
                
                    double overall_avg = sum / num_grades;
                
                    for (int i = 0; i < num_classes; i++) {
                        Class& vector = classes[i];
                        double sum = 0.0;
                        for (int j = 0; j < NUM_GRADES; j++) {
                            sum += vector.grades[j];
                        }
                        double avg_grade = sum / NUM_GRADES;
                        cout << vector.subject << ": "
                             << fixed
                             << setprecision(2)
                             << avg_grade
                             << endl;
                    }
                
                    cout << "Overall average: " << fixed << setprecision(2) << overall_avg << endl;
                    break;
                }

                    case 5:
                        cout << "Goodbye!" << endl;
                        break;
                    //}
                    default:
                        cout << "Fatal error! Please choose a correct option!" << endl;
                        break;
                }
        } while (choice != 5);

    grade_input.close();
    grade_output.close();

    return 0;
}
void calculateAndWriteAverages(ifstream& grade_input, ofstream& grade_output, Class  classes[], int num_classes){
        for(int i = 0; i < num_classes; i++){
                Class& vector = classes[i];
                double sum = 0.0;
                for(int j = 0; j < NUM_GRADES; j++) {
                        sum += vector.grades[j];
                }
                double avg_grade = sum / NUM_GRADES;
                grade_output << vector.subject << ": "
                             << fixed
                             << setprecision(2)
                             << avg_grade
                             << endl;
         }
}



===== ./CppProperties.json =====
{
  "configurations": [
    {
      "inheritEnvironments": [
        "msvc_x86"
      ],
      "name": "x86-Debug",
      "includePath": [
        "${env.INCLUDE}",
        "${workspaceRoot}\\**"
      ],
      "defines": [
        "WIN32",
        "_DEBUG",
        "UNICODE",
        "_UNICODE"
      ],
      "intelliSenseMode": "windows-msvc-x86"
    }
  ]
}===== ./ellipses(centered).cpp =====
#include <iostream>
#include <cmath>
using namespace std;

int main() {
    // Initialize variables
    double a, b, c;
    
    // Get user input for semi-major axis 'a' and semi-minor axis 'b'
    cout << "Enter the value of semi-major axis 'a': ";
    cin >> a;
    cout << "Enter the value of semi-minor axis 'b': ";
    cin >> b;
    
    // Calculate semi-focal distance 'c' using the relationship c^2 = a^2 - b^2
    c = sqrt(a * a - b * b);
    
    // Calculate domain, range, vertices, and endpoints
    double domain = a; // Domain is along the x-axis
    double range = b; // Range is along the y-axis
    
    // Vertices are (a, 0) and (-a, 0)
    double vertex1_x = a;
    double vertex1_y = 0;
    double vertex2_x = -a;
    double vertex2_y = 0;
    
    // Endpoints of the major axis are (a, 0) and (-a, 0)
    double major_endpoint1_x = a;
    double major_endpoint1_y = 0;
    double major_endpoint2_x = -a;
    double major_endpoint2_y = 0;
    
    // Endpoints of the minor axis are (0, b) and (0, -b)
    double minor_endpoint1_x = 0;
    double minor_endpoint1_y = b;
    double minor_endpoint2_x = 0;
    double minor_endpoint2_y = -b;
    
    // Foci are located at (c, 0) and (-c, 0)
    double focus1_x = c;
    double focus1_y = 0;
    double focus2_x = -c;
    double focus2_y = 0;
    
    // Output the ellipse equation in a table
    cout << "\nEllipse Properties:" << endl;
    cout << "---------------------------------------------------------" << endl;
    cout << "Semi-Major Axis (a): " << a << endl;
    cout << "Semi-Minor Axis (b): " << b << endl;
    cout << "Semi-Focal Distance (c): " << c << endl;
    cout << "Domain: [-" << domain << ", " << domain << "]" << endl;
    cout << "Range: [-" << range << ", " << range << "]" << endl;
    cout << "Vertices:" << endl;
    cout << "  Vertex 1: (" << vertex1_x << ", " << vertex1_y << ")" << endl;
    cout << "  Vertex 2: (" << vertex2_x << ", " << vertex2_y << ")" << endl;
    cout << "Endpoints of Major Axis:" << endl;
    cout << "  Endpoint 1: (" << major_endpoint1_x << ", " << major_endpoint1_y << ")" << endl;
    cout << "  Endpoint 2: (" << major_endpoint2_x << ", " << major_endpoint2_y << ")" << endl;
    cout << "Endpoints of Minor Axis:" << endl;
    cout << "  Endpoint 1: (" << minor_endpoint1_x << ", " << minor_endpoint1_y << ")" << endl;
    cout << "  Endpoint 2: (" << minor_endpoint2_x << ", " << minor_endpoint2_y << ")" << endl;
    cout << "Foci:" << endl;
    cout << "  Focus 1: (" << focus1_x << ", " << focus1_y << ")" << endl;
    cout << "  Focus 2: (" << focus2_x << ", " << focus2_y << ")" << endl;
    cout << "---------------------------------------------------------" << endl;
    
    return 0;
}===== ./Employee.h =====
#include <string>

#ifndef EMPLOYEE_H
#define EMPLOYEE_H

#include <string>

class Employee {
public:
    Employee(const std::string&, const std::string&,
        const Date&, const Date&);
    std::string toString() const;
    ~Employee();
private:
    std::string firstName;
    std::string lastName;
    const Date birthDate;
    const Date hireDate;
};

#endif===== ./wagecalculator.c =====
#include <stdio.h>

int main(void)
{
        printf("Your Wage for this Week\n");
        int choice;
        double managerWeeklySalary = 1000.00;
        double hourlyWage = 15;
        double numberOfHours, fullTimeHours, overTimeHours;
        double commissionBase = 250;
        double grossWeeklySales;
        double salary;
        double pieceAmount = 1.5;
        int piecesNum;

        do{
                printf("1. Manager\n");
                printf("2. Employee\n");
                printf("3. Commission Worker\n");
                printf("4. Piece Worker\n");
                printf("5. Exit\n");
                scanf("%d", &choice);

        switch(choice){

                case 1:

                        printf("Your Weekly Salary is: %lf\n", managerWeeklySalary);
                        break;

                case 2:

                        printf("Employee\n");
                        printf("Enter the number of hours worked:");
                        scanf("%lf", &numberOfHours);

                        if(numberOfHours > 40){

                        fullTimeHours = 40;
                        overTimeHours = numberOfHours - 40;
                        }

                        else{
                        fullTimeHours = numberOfHours;
                        overTimeHours = 0;
                        }

                        salary = fullTimeHours * hourlyWage + overTimeHours * hourlyWage * 1.5;
                        printf("Your Weekly Salary is: %.2f\n", salary);
                        break;

                case 3:

                        printf("Enter Your Weekly Sales:\n");
                        scanf("%lf", &grossWeeklySales);
                        salary = commissionBase + grossWeeklySales * 5.7/100;
                        printf("Your Weekly Salary is: %.2f\n", salary);
                        break;

                case 4:
                		printf("How many pieces did you make?\n");
                        scanf("%d", &piecesNum);
                        salary = piecesNum * pieceAmount;
                        printf("Your Weekly Salary is: %.2f\n", salary);
                        break;

                case 5:

                        printf("Goodbye!");
                        break;
                        }

        }while(choice!=5);

        return 0;

}===== ./Stack.h =====
#ifndef STACK_H
#define STACK_H

#include "Polyhedra.h"

class Stack {
private:
    Polyhedra arr[50]; // Increased stack size to accommodate more polyhedra
    int top;

public:
    Stack();

    bool isEmpty();

    bool isFull();

    void push(Polyhedra value);

    void pop();
};

#endif
===== ./inventory_2.c =====
#include <stdio.h>
#include <string.h>
#include <ctype.h>
#define SIZE 50
//#define MAX 100

 typedef struct{
        char item[SIZE];
  // int entry[i];
        double quantity;
        double cost;
}inventory;

int menu(void);
int displayOptions(void);
void Display(inventory entry[], int size);
void AddNewEntry(inventory entry[], int *size);
void SaveInventory(inventory br[], int *size);

int main()
{
       int *size;
        int choice = 0;
        int entry=0;
    // inventory entry [SIZE];
        int size=0;

     // enterChoice();
       displayOptions();
        selection = menu();


//      printf("\nInventory before: %d", size);
//      defaultEntry(entry, &size);
//      printf("\nInventory after: %d\n\n", size);
//
        choice = menu();

        while(choice!= 5)
        {
                if(choice == 1)
                {
                        printf("Show Inventory:\n\n");
                //      \n\n");
                //      scanf("%s", entry[*size].item
        //      fscanf("
                        AddNewEntry( entry, &size);
                    break
                }
                else if(choice == 2)
                {
                        printf("DISPLAYING INVENTORY\n\n");
                        Display(entry, size);
                
                    break;
                }
                else if(choice == 3)
                        printf("Initializing input table\n\n");
                        AddNewEntry(entry, &size);
                    break;
        }
                else if(choice==4)
               {
                       printf("Saving item to inventory file...\n\n");
                       SaveInventory(entry, &size);
                    break;
               }
               else{
                    printf("Enter valid selection!\n\n");
                
                   break;
               }
              printf("\n\n");
              DisplayOptions();
              choice = menu();
    	}
	fwrite(*size)
  
   // {
   //         printf("\t\tThank you for using the tool inventory!!!\n\n");
 //   }
	return 0;

}
//Display menu
int displayOptions(void)
{
	int choice;
	printf("\nEnter Choice:\n");
	
 //   while(choice=>1 && choice <=5)
        //printf("\n*********************************************\n\n");
      //  printf("HELLO, WELCOME TO THE INVENTORY PROGRAM.\n");
        printf("\nEnter Inventory option:\n");
        printf("\n1 - Load Inventory\n");
        printf("\n2 - Show Inventory\n");
        printf("\n3 - Add an Item\n");
        printf("\n4 - Save \n");
        printf("\n5 - \"Exit\"\n");
       // printf("\n*********************************************\n\n");
        
    scanf("%d", &choice);
    return choice;
//;

}
void loadInventory(inventory br[], int *size)
{
    FILE *outPtr;
    
//  while(!feof(outPtr)){
        
        if((outPtr = fopen("inventory.txt","r"))==NULL)
        {
            printf("CANNOT OPEN FILE\n");
            return;
        }

        outPtr = fopen("inventory.txt","r+");
        fscanf(outPtr,"%d",size);
        fread(br, sizeof(inventory),*size,outPtr);
    
        fclose(outPtr);
}           
int displayInventory(inventory entry[SIZE], int size)
{
      int i;
  //    int entry[i];
  //    for (*size=i;i<size; i++)
                        {
                        printf("\n");
                        printf("Item:\t\t %s\n", entry[].);
                        printf("Quantity:\t\t %d\n", entry[].quantity);
                        printf("Price:\t\t %0.2f\n", entry[].cost);
                *size = *size + 1;
        
}

void AddNewEntry(inventory entry[i], int *size)
{
    int *size = 0;
    
    int i;
    for (i = 0; i<size; i=size++);
    {
        printf("\nEnter Item:\t\t");
        scanf("%s",inventory entry[*size].item);
        printf("\nEnter Quantity:\t\t");
        scanf("%d", entry[*size].quantity);
        printf("\nEnter Price:\t\t");
        scanf("%lf", entry[*size].quantity)
    }
    //while(*size = *size + 1);
}
int EditMenuOptions(void)
{
    int choice;

    printf("\nENTER 1 TO EDIT ITEM\n");
    printf("\n1. TO EDIT Quantity\n");
    printf("\n2. ENTER 3 TO EDIT COST\n");
//  printf("ENTER 4 TO EDIT COMPANY\n");
 // printf("ENTER 5 TO EDIT PRICE\n");
 // printf("ENTER 6 TO EDIT NUMBERS IN STOCK\n");
//  printf("ENTER 7 TO EDIT ALL DATA\n");
//  printf("\nENTER SELECTION: ");
    scanf("%d", &choice);
    return choice;
}
void SaveInventory(inventory br[], int *size)
{
    FILE *outp;

    if((outp = fopen("inventory.txt","w"))==NULL)
    {
        printf("\nCANNOT OPEN FILE\n");
        return;
    }

        outp= fopen("inventory.txt","w");

    fprintf(outp,"%d", *size);
    fwrite(br, sizeof(inventory),*size,outp);

    
    fclose(outp);
}===== ./highway.cpp =====
// main.cpp
#include "Road.h"
#include <iostream>
#include <fstream>
#include <vector>
#include <limits> 

void writeToFile(const Road& road, const std::string& filename, char type) {
    std::ofstream file(filename, std::ios::app);
    if (file.is_open()) {
        file << type << "," << road.name << "," << road.lanes << "," << road.speedLimit;
        if (type == 'T') {
            file << "," << static_cast<const Toll&>(road).tollFee;
        }
        file << "\n";
        file.close();
    } else {
        std::cerr << "Error opening file: " << filename << "\n";
    }
}

std::vector<Road*> readFromFile(const std::string& filename) {
    std::ifstream file(filename);
    char type;
    std::string name;
    int lanes, speedLimit, tollFee; 
    std::vector<Road*> roads;

    if (file.is_open()) {
        while (file >> type) {
            file.ignore();

            std::getline(file, name, ',');
            file >> lanes;
            file.ignore();

            file >> speedLimit;
            file.ignore(); 

            if (type == 'T') {
                file >> tollFee; 
                Toll* toll = new Toll(name, lanes, speedLimit, tollFee);
                roads.push_back(toll);
            } else {
                Road* road = new Road(name, lanes, speedLimit);
                roads.push_back(road);
            }
            file.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // move to the next line
        }
        file.close();
    } else {
        std::cerr << "Error opening file: " << filename << "\n";
    }
    return roads;
}

int main() {
    std::vector<Road*> roads;
    int choice;

    do {
        std::cout << "1. Enter a new Road\n2. Enter a new Toll\n3. View current Roads and Tolls\n4. Exit\nEnter your choice: ";
        std::cin >> choice;

        switch (choice) {
            case 1: {
                Road road;
                road.input();
                roads.push_back(new Road(road));
                writeToFile(road, "roads.csv", 'R');
                break;
            }
            case 2: {
                Toll toll;
                toll.input();
                roads.push_back(new Toll(toll));
                writeToFile(toll, "roads.csv", 'T');
                break;
            }
            case 3: {
                std::vector<Road*> roadsFromFile = readFromFile("roads.csv");
                for (const auto& road : roadsFromFile) {
                    road->display();
                }
                for (auto& road : roadsFromFile) {
                    delete road;
                }
                break;
            }
            case 4:
                for (auto& road : roads) {
                    delete road;
                }
                break;
            default:
                std::cout << "Invalid choice\n";
                break;
        }
    } while (choice != 4);

    return 0;
}===== ./grade_File_CATBash.c =====
#include <stdio.h>

typedef struct{
    char firstName[25];
    char lastName[25];
    double grades[5];
}students;

printData(students student[], int);
int loadData(students student[]);
void averageGrade(students student[], int i);

int main()
{
    students student[10];
    int numStudents = 0;
    numStudents = loadData(student);
    printData (student, numStudents);
    

    return 0;
}

printData(students student[], int numStudents)
{
    int i = 0;
    for(i = 0; i < numStudents; i++){
        printf("%s %s", student[i].firstName, student[i].lastName);
        averageGrade(student, i);
    }
}
int loadData(students student[])
{
    FILE *fh;
    int x = 0;
    
    if((fh = fopen("grades.txt", "r"))==NULL){
        printf("File is inaccessible!");
        return 1;
    }
    fscanf(fh, "%s%s%lf%lf%lf%lf%lf", student[x].firstName, student[x].lastName, &student[x].grades[0], &student[x].grades[1], &student[x].grades[2], &student[x].grades[3], &student[x].grades[4]);
    while(!feof(fh)){
        x = x + 1;
            fscanf(fh, "%s%s%lf%lf%lf%lf%lf", student[x].firstName, student[x].lastName, &student[x].grades[0], &student[x].grades[1], &student[x].grades[2], &student[x].grades[3], &student[x].grades[4]);
    }
    fclose(fh);
    return x;
}
void averageGrade(students student[], int i){
        double average;
        double total = 0;
        int j;
            for (j = 0; j < 5; j++){
                total = total + student[i].grades[j];
            }
            average = total / 5;
            printf(" average = %.1f", average);
            if ( average > 90 && average <= 100)
                printf(" The average grade is: A\n");
            else if (average > 80 && average <= 90)
                printf(" The average grade is: B\n");
            else if (average > 70 && average <= 80)
                printf(" The average grade is: C\n");
            else if (average > 60 && average <= 70)
                printf(" The average grade is: D\n");
            else if (average < 60)
                printf(" The average grade is: F\n");
}
===== ./polyhedra.csv =====
Tetrahedron,3 | 2 3,Td,C15,W001,U01,K06,4,6,4,4{3}
Triangular prism,2 3 | 2,D3h,C33a,—,U76a,K01a,6,9,5,2{3}+3{4}
Truncated tetrahedron,2 3 | 3,Td,C16,W006,U02,K07,12,18,8,4{3}+4{6}
Truncated cube,2 3 | 4,Oh,C21,W008,U09,K14,24,36,14,8{3}+6{8}
Truncated dodecahedron,2 3 | 5,Ih,C29,W010,U26,K31,60,90,32,20{3}+12{10}
Cube,3 | 2 4,Oh,C18,W003,U06,K11,8,12,6,6{4}
Pentagonal prism,2 5 | 2,D5h,C33b,—,U76b,K01b,10,15,7,5{4}+2{5}
Hexagonal prism,2 6 | 2,D6h,C33c,—,U76c,K01c,12,18,8,6{4}+2{6}
Heptagonal prism,2 7 | 2,D7h,C33d,—,U76d,K01d,14,21,9,7{4}+2{7}
Octagonal prism,2 8 | 2,D8h,C33e,—,U76e,K01e,16,24,10,8{4}+2{8}
Enneagonal prism,2 9 | 2,D9h,C33f,—,U76f,K01f,18,27,11,9{4}+2{9}
Decagonal prism,2 10 | 2,D10h,C33g,—,U76g,K01g,20,30,12,10{4}+2{10}
Hendecagonal prism,2 11 | 2,D11h,C33h,—,U76h,K01h,22,33,13,11{4}+2{11}
Dodecagonal prism,2 12 | 2,D12h,C33i,—,U76i,K01i,24,36,14,12{4}+2{12}
Truncated octahedron,2 4 | 3,Oh,C20,W007,U08,K13,24,36,14,6{4}+8{6}
Truncated cuboctahedron,2 3 4 |,Oh,C23,W015,U11,K16,48,72,26,12{4}+8{6}+6{8}
Truncated icosidodecahedron,2 3 5 |,Ih,C31,W016,U28,K33,120,180,62,30{4}+20{6}+12{10}
Dodecahedron,3 | 2 5,Ih,C26,W005,U23,K28,20,30,12,12{5}
Truncated icosahedron,2 5 | 3,Ih,C27,W009,U25,K30,60,90,32,12{5}+20{6}
Octahedron,4 | 2 3,Oh,C17,W002,U05,K10,6,12,8,8{3}
Square antiprism,| 2 2 4,D4d,C34a,—,U77a,K02a,8,16,10,8{3}+2{4}
Pentagonal antiprism,| 2 2 5,D5d,C34b,—,U77b,K02b,10,20,12,10{3}+2{5}
Hexagonal antiprism,| 2 2 6,D6d,C34c,—,U77c,K02c,12,24,14,12{3}+2{6}
Heptagonal antiprism,| 2 2 7,D7d,C34d,—,U77d,K02d,14,28,16,14{3}+2{7}
Octagonal antiprism,| 2 2 8,D8d,C34e,—,U77e,K02e,16,32,18,16{3}+2{8}
Enneagonal antiprism,| 2 2 9,D9d,C34f,—,U77f,K02f,18,36,20,18{3}+2{9}
Decagonal antiprism,| 2 2 10,D10d,C34g,—,U77g,K02g,20,40,22,20{3}+2{10}
Hendecagonal antiprism,| 2 2 11,D11d,C34h,—,U77h,K02h,22,44,24,22{3}+2{11}
Dodecagonal antiprism,| 2 2 12,D12d,C34i,—,U77i,K02i,24,48,26,24{3}+2{12}
Cuboctahedron,2 | 3 4,Oh,C19,W011,U07,K12,12,24,14,8{3}+6{4}
Rhombicuboctahedron,3 4 | 2,Oh,C22,W013,U10,K15,24,48,26,8{3}+(6+12){4}
Rhombicosidodecahedron,3 5 | 2,Ih,C30,W014,U27,K32,60,120,62,20{3}+30{4}+12{5}
Icosidodecahedron,2 | 3 5,Ih,C28,W012,U24,K29,30,60,32,20{3}+12{5}
Icosahedron,5 | 2 3,Ih,C25,W004,U22,K27,12,30,20,20{3}
Snub cube,| 2 3 4,O,C24,W017,U12,K17,24,60,38,(8+24){3}+6{4}
Snub dodecahedron,| 2 3 5,I,C32,W018,U29,K34,60,150,92,(20+60){3}+12{10}
Octahemioctahedron,3/2 3 | 3,Oh,C37,W068,U03,K08,12,24,12,8{3}+4{6}
Tetrahemihexahedron,3/2 3 | 2,Td,C36,W067,U04,K09,6,12,7,4{3}+3{4}
Cubohemioctahedron,4/3 4 | 3,Oh,C51,W078,U15,K20,12,24,10,6{4}+4{6}
Great dodecahedron,5/2 | 2 5,Ih,C44,W021,U35,K40,12,30,12,12{5}
Great icosahedron,5/2 | 2 3,Ih,C69,W041,U53,K58,12,30,20,20{3}
Great ditrigonal icosidodecahedron,3/2 | 3 5,Ih,C61,W087,U47,K52,20,60,32,20{3}+12{5}
Small rhombihexahedron,2 4 (3/2 4/2) |,Oh,C60,W086,U18,K23,24,48,18,12{4}+6{8}
Small cubicuboctahedron,3/2 4 | 4,Oh,C38,W069,U13,K18,24,48,20,8{3}+6{4}+6{8}
Great rhombicuboctahedron,3/2 4 | 2,Oh,C59,W085,U17,K22,24,48,26,8{3}+(6+12){4}
Small dodecahemiicosahedron,5/4 5 | 5,Ih,C65,W091,U51,K56,30,60,18,12{5}+6{10}
Great dodecahemidodecahedron,5/4 5 | 3,Ih,C81,W102,U65,K70,30,60,22,12{5}+10{6}
Small icosihemidodecahedron,3/2 3 | 5,Ih,C63,W089,U49,K54,30,60,26,20{3}+6{10}
Small dodecicosahemidodecahedron,3/2 5 | 5,Ih,C42,W072,U33,K38,60,120,44,20{3}+12{5}+12{10}
Rhombicosahedron,2 3 (5/4 5/2) |,Ih,C72,W096,U56,K61,60,120,50,30{4}+20{6}
Great icosicosidodecahedron,3/2 3 | 5/3,Ih,C79,W101,U63,K68,60,120,52,20{3}+12{5}+20{6}
Great rhombidodecahedron,2 5/2 (3/2 5/2) |,Ih,C89,W109,U73,K78,60,120,42,30{4}+12{10/3}
Icosidodecahedron,2 5/3 (3/2 5/4) |,Ih,C91,W118,U72,K77,60,120,44,20{3}+12{5/2}+12{5/2}
Small dodecicosahemidodecahedron,3/2 5 | 5,Ih,C90,W117,U74,K79,60,120,44,20{3}+12{5/2}+12{5/2}
Great snub cube,| 2 3 4,I,C49,W111,U40,K45,60,150,84,60{3}+12{5}+12{5/2}
Great inverted snub dodecahedron,| 2 3 5,I,C76,W114,U60,K65,60,150,84,60{3}+12{5}+12{5/2}
Great snub icosidodecahedron,| 2 3 5,I,C73,W113,U57,K62,60,150,92,(20+60){3}+12{5/2}
Great inverted snub icosidodecahedron,| 2 3 5,I,C88,W116,U69,K74,60,150,92,(20+60){3}+12{5/2}
Great inverted snub icosidodecahedron,| 2 3 5,I,C80,W115,U64,K69,60,180,104,(20+60){3}+(12+12){5/2}
Snub dodecahedron,| 5/3 2 5,I,C49,W111,U40,K45,60,150,84,(60+12){3}+12{5}+12{5/2}
Great snub dodecahedron,| 3/2 5/2 5/3,I,C73,W113,U57,K62,60,150,92,(20+60){3}+12{5/2}
Great retrosnub dodecahedron,| 3/2 5/2 5/4,I,C88,W116,U69,K74,60,150,92,(20+60){3}+12{5/2}
Great retrosnub icosidodecahedron,| 3/2 5/2 5/4,I,C80,W115,U64,K69,60,180,104,(20+60){3}+(12+12){5/2}
Great retrosnub icosidodecahedron,| 3/2 5/2 5/4,I,C90,W117,U74,K79,60,180,104,(20+60){3}+(12+12){5/2}
Great retrosnub icosicosidodecahedron,| 3/2 5/3 3 5/2,I,C92,W119,U75,K80,60,240,124,40{3}+60{4}+24{5/2}===== ./sorting_algorithms_demo.cpp =====
#include <iostream>
#include <iomanip>
#include <vector>
#include <algorithm>
#include "InsertionSort.h"
#include "SelectionSort.h"
using namespace std;

void printArray(const vector<int>& arr);
vector<int>::iterator findMinIndex(vector<int>::iterator start, vector<int>::iterator end);
void selectionSortRecursive(vector<int>& arr, vector<int>::iterator start, vector<int>::iterator end);

int main() {
    vector<int> arr1 = {5, 3, 8, 1, 4};
    vector<int> arr2 = {5, 3, 8, 1, 4};

    cout << "\033[1;35mSorting Algorithms\n";
    cout << "\033[1;33m" << setw(15) << "\nOriginal array:\n" << setw(20) << "\033[0m" << endl;
    cout << setw(15);
    printArray(arr1);
    cout << "\033[1;33m" << setw(15) << "\nInsertion Sort:\n" << setw(20) << "\033[0m" << endl;
    InsertionSort::sort(arr1);
    printArray(arr1);
    cout << "\033[1;33m" << setw(15) << "\nSelection Sort:\n" << setw(20) << "\033[0m" << endl;
    SelectionSort::sort(arr2);
    printArray(arr2);

    arr1.push_back(10); 
    arr2.erase(arr2.begin() + 1);
    reverse(arr1.begin(), arr1.end()); 

    cout << "\n------------Simulating modifications------------\n";
    cout << "Array 1 after insertion: ";
    printArray(arr1);
    cout << "Array 2 after deletion: ";
    printArray(arr2);
    cout << "------------------------------------------------\n";

    InsertionSort::sort(arr1);
    SelectionSort::sort(arr2);

    cout << "\nSorted array:\n" << setw(20) << endl;
    printArray(arr1);
    printArray(arr2);
    
    srand(time(nullptr));

    const int SIZE = 20;
    const int MAX_RANDOM_VALUE = 100;
    vector<int> arr(SIZE);
    for (int i = 0; i < SIZE; ++i) {
        arr[i] = rand() % MAX_RANDOM_VALUE;
    }

    cout << "\nUnsorted array:" << endl;
    printArray(arr);

    selectionSortRecursive(arr, arr.begin(), arr.end());

    cout << "\nSorted array:" << endl;
    printArray(arr);
    printArray(arr1);
    printArray(arr2);

    return 0;
}
void printArray(const vector<int>& arr) {
    for (int num : arr) {
        cout << "\033[1;36m" << setw(4) << num << "\033[0m";
    }
    cout << endl;
}

vector<int>::iterator findMinIndex(vector<int>::iterator start, vector<int>::iterator end) {
    return min_element(start, end);
}

void selectionSortRecursive(vector<int>& arr, vector<int>::iterator start, vector<int>::iterator end) {
    if (start == end) {
        return;
    }
    auto minIndex = findMinIndex(start, end);
    if (minIndex != start) {
        iter_swap(minIndex, start);
    }
    selectionSortRecursive(arr, start + 1, end);
}
===== ./sales_prediction_simple.cpp =====
#include <iostream>
#include <vector>
using namespace std;

int main() {
  // Create a vector to store the sales data.
  vector<int> sales;
  sales.push_back(10);
  sales.push_back(12);
  sales.push_back(14);

  // Fit a straight line to the data points.
  double slope = (sales[2] - sales[0]) / (2 - 0);
  double yIntercept = sales[0] - slope * 0;

  // Predict the number of sales next month.
  int predictedSales = slope * 3 + yIntercept;

  // Print the predicted sales.
  cout << "Predicted sales: " << predictedSales << endl;

  return 0;
} ===== ./manage dateonly with master(atomic2).cpp =====
#include <iostream>
#include <fstream>
#include <string>
#include <vector>

using namespace std;

struct Task {
    int id;
    string category;
    string description;
    bool completed;
};

// Function to add a new task
void addTask(const string& username, const string& category, const string& description) {
    ifstream taskFile("tasks.txt");
    int taskId;
    string storedUsername;
    while (taskFile >> storedUsername >> taskId) {
        if (username == storedUsername) {
            taskId++;
        }
    }
    taskFile.close();

    ofstream outFile("tasks.txt", ios::app);
    outFile << username << " " << taskId << " " << category << " " << description << " " << false << endl;
    outFile.close();

    cout << "Task added successfully!" << endl;
}

// Function to display tasks
void displayTasks(const string& username) {
    ifstream taskFile("tasks.txt");
    string storedUsername;
    int taskId;
    string category, description;
    bool completed;
    while (taskFile >> storedUsername >> taskId >> category >> description >> completed) {
        if (username == storedUsername) {
            cout << "ID: " << taskId << endl;
            cout << "Category: " << category << endl;
            cout << "Description: " << description << endl;
            cout << "Status: " << (completed ? "Completed" : "Incomplete") << endl;
            cout << endl;
        }
    }
    taskFile.close();
}

// Function to mark a task as complete
void markTaskComplete(const string& username, int taskId) {
    vector<Task> tasks;
    ifstream taskFile("tasks.txt");
    string storedUsername;
    int storedTaskId;
    string category, description;
    bool completed;
    while (taskFile >> storedUsername >> storedTaskId >> category >> description >> completed) {
        if (username == storedUsername) {
            Task task = {storedTaskId, category, description, completed};
            tasks.push_back(task);
        }
    }
    taskFile.close();

    bool found = false;
    for (Task& task : tasks) {
        if (task.id == taskId) {
            task.completed = true;
            found = true;
            break;
        }
    }

    if (found) {
        ofstream taskFile("tasks.txt");
        for (const Task& task : tasks) {
            taskFile << username << " " << task.id << " " << task.category << " " << task.description << " " << task.completed << endl;
        }
        taskFile.close();
        cout << "Task marked as complete!" << endl;
    } else {
        cout << "Invalid task ID." << endl;
    }
}

// Function to delete a task
void deleteTask(const string& username, int taskId) {
    vector<Task> tasks;
    ifstream taskFile("tasks.txt");
    string storedUsername;
    int storedTaskId;
    string category, description;
    bool completed;
    while (taskFile >> storedUsername >> storedTaskId >> category >> description >> completed) {
        if (username == storedUsername && taskId != storedTaskId) {
            Task task = {storedTaskId, category, description, completed};
            tasks.push_back(task);
        }
    }
    taskFile.close();

    ofstream outFile("tasks.txt");
    for (const Task& task : tasks) {
        outFile << username << " " << task.id << " " << task.category << " " << task.description << " " << task.completed << endl;
    }
    outFile.close();
    cout << "Task deleted successfully!" << endl;
}

int main() {
    string username;
    string masterPassword = "123456789";

    while (true) {
        int option;
        cout << "Task Management System" << endl;
        cout << "1. Authenticate User" << endl;
        cout << "2. Exit" << endl;
        cout << "Choose an option: ";
        cin >> option;

        if (option == 1) {
            string password;
            cout << "Enter username: ";
            cin >> username;
            cout << "Enter password: ";
            cin >> password;

            if (password == masterPassword) {
                while (true) {
                    int subOption;
                    cout << "1. Add Task" << endl;
                    cout << "2. Display Tasks" << endl;
                    cout << "3. Mark Task as Complete" << endl;
                    cout << "4. Delete Task" << endl;
                    cout << "5. Logout" << endl;
                    cout << "Choose an option: ";
                    cin >> subOption;

                    if (subOption == 1) {
                        string category, description;
                        cout << "Enter category: ";
                        cin >> category;
                        cout << "Enter description: ";
                        cin.ignore();
                        getline(cin, description);
                        addTask(username, category, description);
                    } else if (subOption == 2) {
                        displayTasks(username);
                    } else if (subOption == 3) {
                        int taskId;
                        cout << "Enter the ID of the task to mark as complete: ";
                        cin >> taskId;
                        markTaskComplete(username, taskId);
                    } else if (subOption == 4) {
                        int taskId;
                        cout << "Enter the ID of the task to delete: ";
                        cin >> taskId;
                        deleteTask(username, taskId);
                    } else if (subOption == 5) {
                        cout << "Logging out..." << endl;
                        break;
                    } else {
                        cout << "Invalid choice." << endl;
                    }
                }
            } else {
                cout << "Authentication failed!" << endl;
            }
        } else if (option == 2) {
            cout << "Exiting..." << endl;
            break;
        } else {
            cout << "Invalid choice." << endl;
        }
    }

    return 0;
}
===== ./Rational.cpp =====
//Rational.cpp
#include <iostream>
#include <string>
#include "Rational.h"
using namespace std;

int Rational::gcd(int a, int b) {
    if (b == 0)
        return a;
    return gcd(b, a % b);
}

Rational::Rational(int num, int denom) {
    int common = gcd(num, denom);
    numerator = num / common;
    denominator = denom / common;
}

Rational Rational::add(const Rational& other) const {
    int num = numerator * other.denominator + other.numerator * denominator;
    int denom = denominator * other.denominator;
    return Rational(num, denom);
}

Rational Rational::subtract(const Rational& other) const {
    int num = numerator * other.denominator - other.numerator * denominator;
    int denom = denominator * other.denominator;
    return Rational(num, denom);
}

Rational Rational::multiply(const Rational& other) const {
    int num = numerator * other.numerator;
    int denom = denominator * other.denominator;
    return Rational(num, denom);
}

Rational Rational::divide(const Rational& other) const {
    int num = numerator * other.denominator;
    int denom = denominator * other.numerator;
    return Rational(num, denom);
}

std::string Rational::toRationalString() const {
    return std::to_string(numerator) + "/" + std::to_string(denominator);
}

void Rational::display() const {
    std::cout << toRationalString();
}

double Rational::toDouble() const {
    return static_cast<double>(numerator) / denominator;
}
===== ./student_manager.cpp =====
// main.cpp
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <iomanip>
#include "Student.h"
using namespace std;

int main() {
    srand(time(nullptr));

    int numStudents;
    cout << "Enter the number of students: ";
    cin >> numStudents;

    vector<Student> students;
    students.reserve(numStudents);

    for (int i = 0; i < numStudents; ++i) {
        string name;
        cout << "Enter the name for student " << i + 1 << ": ";
        cin >> name;
        students.emplace_back(name);
    }

    cout << "\033[1;32m\nStudents:\n\033[0m";
    cout << "\033[1;33m|-------------------------------------|\n";
    cout << "\033[1;33m|  Name      |  Age  |   GPA  |  ID   |\n";
    cout << "\033[1;33m|-------------------------------------|\n\033[0m";
    for (const auto& student : students) {
        cout << "\033[1;34m| " << setw(10) << student.getName() << " | "
                  << setw(5) << student.getAge() << " | "
                  << setw(5) << fixed << setprecision(2) << student.getGPA() << " | "
                  << std::setw(5) << student.getID() << "  |\033[0m\n";
    }

    sort(students.begin(), students.end(), [](const Student& a, const Student& b) {
        return a.getGPA() > b.getGPA();
    });

    cout << "\033[1;32m\nStudents (Sorted):\n\033[0m";
    cout << "\033[1;33m|-------------------------------------|\n";
    cout << "\033[1;33m|  Name      |  Age  |   GPA  |  ID   |\n"; 
    cout << "\033[1;33m|-------------------------------------|\n\033[0m"; 
    for (const auto& student : students) {
        cout << "\033[1;34m| " << setw(10) << student.getName() << " | "
                  << setw(5) << student.getAge() << " | "
                  << setw(5) << fixed << setprecision(2) << student.getGPA() << " | "
                  << std::setw(5) << student.getID() << "  |\033[0m\n";
    }

    return 0;
}===== ./race.cpp =====
#include <iostream>
#include <thread>
#include <chrono>
#include <cstdlib>
#include <ctime>
#include "Tortoise.h"
#include "Hare.h"

using namespace std;

void tick(Tortoise* turtlePtr, Hare* rabbitPtr);
void displayOutput(int turtleSquare, int rabbitSquare);

int main() {
        cout <<
        "\033[0;37m             //\\\n"
        "\033[0;37m           /     \\\n"
        "\033[0;33m           / \\     \\\n"
        "\033[0;33m        / ___      \\\n"
        "\033[0;33m        /     _      \\\n"
        "\033[0;33m       / ____         \\\n"
        "\033[0;33m     // /  /     ___   \\   \\\n"
        "\033[1;32m    //   \033[0;31mT  O  R  T  O  I  S  E\033[1;35m   A  N  D\n"
        "\033[1;32m  // /     \033[0;31mT  H  E   H  A  R  E\033[1;31m   R  A  C  E\n"
        "\033[1;32m//                         \\    \\  \033[0m" << endl;
cout << "\n" << endl;
cout << "BANG !!!\n",
cout << "AND THEY'RE OFF !!!!!\n" << endl;
    Tortoise turtle;
    Hare rabbit;

    Tortoise* turtlePtr = &turtle;
    Hare* rabbitPtr = &rabbit;

    while (!(turtlePtr->victor() || rabbitPtr->victor())) {
        std::this_thread::sleep_for(std::chrono::seconds(1));
        displayOutput(turtlePtr->square, rabbitPtr->square);
        tick(turtlePtr, rabbitPtr);
    }

    if (turtlePtr->victor() && rabbitPtr->victor())
        cout << "It's a tie.\n";
    else if (turtlePtr->victor())
        turtlePtr->win();
    else
        rabbitPtr->win();

    return 0;
}

void tick(Tortoise* turtlePtr, Hare* rabbitPtr) {
    srand(time(0));

    int random = rand() % 11;

    if (random < 5)
        turtlePtr->move();
    else if (random < 7)
        turtlePtr->move();
    else
        turtlePtr->move();

    if (random >= 2 && random < 4)
        rabbitPtr->move();
    else if (random < 5)
        rabbitPtr->move();
    else if (random < 8)
        rabbitPtr->move();
    else if (random < 10)
        rabbitPtr->move();

    displayOutput(turtlePtr->square, rabbitPtr->square);
}

void displayOutput(int turtleSquare, int rabbitSquare) {
    system("clear");  
    cout <<
        "\033[0;37m             //\\\n"
        "\033[0;37m           /     \\\n"
        "\033[0;33m           / \\     \\\n"
        "\033[0;33m        / ___      \\\n"
        "\033[0;33m        /     _      \\\n"
        "\033[0;33m       / ____         \\\n"
        "\033[0;33m     // /  /     ___   \\   \\\n"
        "\033[1;32m    //   \033[0;31mT  O  R  T  O  I  S  E\033[1;35m   A  N  D\n"
        "\033[1;32m  // /     \033[0;31mT  H  E   H  A  R  E\033[1;31m   R  A  C  E\n"
        "\033[1;32m//                         \\    \\  \033[0m" << endl;
    const int trackWidth = 50;
    const int mountainHeight = 10;

    int turtlePosition = (turtleSquare * trackWidth) / 70;
    int rabbitPosition = (rabbitSquare * trackWidth) / 70;

    cout << "\x1B[31mTORTOISE\x1B[0m vs. \x1B[32mHARE\x1B[0m" << endl;

    for (int i = mountainHeight; i > 0; i--) {
        cout << "|";
        for (int j = 0; j < trackWidth; j++) {
            if (i == mountainHeight)
                cout << "_"; // Draw the track
            else {
                if (j == turtlePosition && i == 1)
                    cout << "\x1B[31mT\x1B[0m"; // Tortoise (red T)
                else if (j == rabbitPosition && i == 1)
                    cout << "\x1B[32mH\x1B[0m"; // Hare (green H)
                else
                    cout << " ";
            }
        }
        cout << "|" << endl;
    }

    if (turtleSquare == rabbitSquare)
        cout << "OUCH !!!" << endl;

    cout << "T = Tortoise, H = Hare" << endl;
}


===== ./InsertionSort.cpp =====
#include "InsertionSort.h"

void InsertionSort::sort(std::vector<int>& arr) {
    recursiveInsertionSort(arr, arr.size() - 1);
}

void InsertionSort::recursiveInsertionSort(std::vector<int>& arr, int n) {
    if (n <= 1)
        return;

    recursiveInsertionSort(arr, n - 1);

    int key = arr[n];
    int j = n - 1;

    while (j >= 0 && arr[j] > key) {
        arr[j + 1] = arr[j];
        j--;
    }
    arr[j + 1] = key;
}
===== ./Project.vcxproj.FileListAbsolute.txt =====
C:\Users\joele\OneDrive - South Texas College\Fall 2024\COSC - 2425 - V01\Chapter 4\homework 4\Debug\Project.exe
C:\Users\joele\OneDrive - South Texas College\Fall 2024\COSC - 2425 - V01\Chapter 2\Test1\Debug\Project.exe
===== ./records_sorter.cpp =====
#include "records_sorter.h"
#include <iostream>
#include <fstream>
#include <algorithm>
#include <sstream>
using namespace std;

bool compareByGPA(const Student& s1, const Student& s2) {
    return s1.gpa < s2.gpa;
}

void loadStudentRecords(vector<Student>& students) {
    ifstream inputFile("students.txt");
    if (inputFile.is_open()) {
        string line;
        while (getline(inputFile, line)) {
            istringstream iss(line);
            string lastName, firstName;
            double gpa;
            if (getline(iss, lastName, ',') &&
                getline(iss, firstName, ',') &&
                iss >> gpa) {
                Student student;
                student.name = lastName + " " + firstName;
                student.gpa = gpa;
                students.push_back(student);
            } else {
                cout << "Error reading data for student: " << line << endl;
            }
        }
        inputFile.close();
    } else {
        cout << "Failed to open students.txt" << endl;
    }
}

void viewData(const vector<Student>& students) {
    cout << students.size() << endl;
    for (const auto& student : students) {
        cout << student.name << " " << student.gpa << endl;
    }
}

void merge(vector<Student>& students, int left, int mid, int right) {
    int n1 = mid - left + 1;
    int n2 = right - mid;

    vector<Student> L(n1), R(n2);

    for (int i = 0; i < n1; i++)
        L[i] = students[left + i];
    for (int j = 0; j < n2; j++)
        R[j] = students[mid + 1 + j];
        
    int i = 0, j = 0, k = left;
    while (i < n1 && j < n2) {
        if (L[i].gpa <= R[j].gpa) {
            students[k] = L[i];
            i++;
        } else {
            students[k] = R[j];
            j++;
        }
        k++;
    }
    while (i < n1) {
        students[k] = L[i];
        i++;
        k++;
    }
    while (j < n2) {
        students[k] = R[j];
        j++;
        k++;
    }
}

void mergeSort(vector<Student>& students, int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;

        mergeSort(students, left, mid);
        mergeSort(students, mid + 1, right);

        merge(students, left, mid, right);
    }
}

void mergeSortData(vector<Student>& students) {
    mergeSort(students, 0, students.size() - 1);
}

int partitionQuick(vector<Student>& students, int low, int high) {
    double pivot = students[high].gpa;
    int i = (low - 1);

    for (int j = low; j <= high - 1; j++) {
        if (students[j].gpa < pivot) {
            i++;
            swap(students[i], students[j]);
        }
    }
    swap(students[i + 1], students[high]);
    return (i + 1);
}

void quickSortData(vector<Student>& students, int low, int high) {
    if (low < high) {
        int pi = partitionQuick(students, low, high);

        quickSortData(students, low, pi - 1);
        quickSortData(students, pi + 1, high);
    }
}
===== ./Date.h =====
#include <string>

#ifndef DATE_H
#define DATE_H

class Date { // Change "Data" to "Date"
public:
    static const unsigned int monthsPerYear{12};
    explicit Date(unsigned int mn = 1, unsigned int dy = 1, unsigned int yr = 1990);
    std::string toString() const;
    ~Date();

private:
    unsigned int month;
    unsigned int day;
    unsigned int year;

    unsigned int checkDay(int) const;
};
#endif
===== ./airline.c =====
#include <stdio.h>

int main()
{
int r[]={0,0,0,0,0,0,0,0,0,0}; 
int n=0;
while(n<10){
int myNum;
int mySeat=0;


printf("Choose the arrangement you want \n");
printf("Enter 1 for first class\n");
printf("Enter 2 for economy class\n");
scanf("%d", &myNum);



if (myNum==1){
printf("You chose  first class\n");
  for(int i=0;i<5;i++){
      if(r[i]==0){
         mySeat=i+1;
         r[i]=1;
        printf("Your sit number is %d",mySeat);
        printf("\n");
         break;
      }
  }
  if(mySeat==0){printf("All seats are full\n");}
}
else if(myNum==2){
printf("You choose economy class\n");
for(int i=5;i<=9;i++){
      if(r[i]==0){
         mySeat=i+1;
         r[i]=1;
         printf("Your sit number is %d",mySeat);
         printf("\n");
         break;
      }
      
  }
  if(mySeat==0){printf("All seats are full\n");}
}
    
}
    return 0;
}


        ===== ./movieData2.txt =====
#include <stdio.h>

//typedef struct {
//        int archMenu[3]
//int inputMovie[3];
//        char title[3];
//        char dir[3];
//        int date[3];
//        int lenght[3];
//};

int choice, inputMovie; 

void archMenu() {
//predeterminant menu

    printf("Welcome to the Movie Library!\n");
    printf("**************************\n");
    printf("\nEnter Option\n");
    printf("\n1) Insert Movie Record\n");
    printf("\n2) List Movie\n");
    printf("\n3) Movie Catalog\n");
    printf("\n4) Exit?\n");
    printf("**************************\n");
    printf("Option: \n");
    scanf("%d", &choice);
}

void inputData() {
    //printf("%s", "\t\tEnter movie code 1-3: \n\n");
	printf("\t\t1. Name movie file between 1-3:\n\n");
	printf("\t\t2. Movie Title:\n\n");
	printf("\t\t3. Director:\n\n");
	printf("\t\t4. Release Date: \n\n");
	printf("\t\t5. Lenght:\n\n");
	printf("\t\t0. Exit\n\n");
	printf("Choice:\n");		           
    scanf("%d", &inputMovie);

}

int main(void) {

  archMenu();

  while(choice!= 1 && choice >= 2 &&  choice <=4) {
    printf("Invalid choice! \n");
    archMenu();
  }
  if(choice == 1) {
    printf("Initializing archive tools: \n");
    inputData();
    while(inputMovie != 0) {
        inputData();
        break;
    }
  }
  //else if(archMenu == 2) {
//    printf("Display Movie Data: \n");
    //  archMenu();
  //  }
//  }
//  else if(archMenu == 3) {
//    printf("You have selected 3 \n");
//  }


  return 0;
}===== ./luckynumbers.cpp =====
#include <iostream>
#include <array>
#include <algorithm>

int main() {
    std::array<int, 10> lucky_numbers = {13579, 26791, 26792, 33445, 55555, 62483, 77777, 79422, 85647, 93121};
    int lucky = 0;
    bool complete = false;
    while (true) {
        std:: cout << "Enter lottery ticket number (-1 to quit): ";
        std::cin >> lucky;
        if (lucky == -1) {
            break;
        }
        if (std::find(lucky_numbers.begin(), lucky_numbers.end(), lucky) != lucky_numbers.end()) {
            std::cout << "Congratulations! You have a winning ticket!" << std::endl;
            complete = true;
            break;
        } else {
            std::cout << "Sorry, you do not have a winning ticket." << std::endl;
        }
    }
    if (!complete) {
        std::cout << "Exiting program..." << std::endl;
    }
    return 0;
}
===== ./Date.cpp =====
#include <array>
#include <iostream>
#include <sstream> 
#include <stdexcept>
#include "Date.h"
using namespace std;

Date::Date(unsigned int mn, unsigned int dy, unsigned int yr)
    : month{mn}, day{checkDay(dy)}, year{yr} {
    if (mn < 1 || mn > monthsPerYear) { // Corrected variable name
        throw invalid_argument("month must be 1-12");
    }
    cout << "Date object constructor for date " << toString() << endl;
}

string Date::toString() const {
    ostringstream output; 
    output << month << '/' << day << '/' << year;
    return output.str();
}

Date::~Date() {
    cout << "Date object destructor for date " << toString() << endl;
}

unsigned int Date::checkDay(int testDay) const {
    static const array<int, monthsPerYear + 1> daysPerMonth{
        0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

    if (testDay > 0 && testDay <= daysPerMonth[month]) {
        return testDay;
    }

    if (month == 2 && testDay == 29 && (year % 400 == 0 ||
        (year % 4 == 0 && year % 100 != 0))) {
        return testDay;
    }

    throw invalid_argument("Invalid day for the current month and year");
}


===== ./records_sorter.h =====
#ifndef RECORDS_SORTER_H
#define RECORDS_SORTER_H

#include <vector>
#include <string>
using namespace std;

struct Student {
    std::string name;
    double gpa;
};

bool compareByGPA(const Student& s1, const Student& s2);

void loadStudentRecords(std::vector<Student>& students);

void viewData(const std::vector<Student>& students);

void mergeSortData(std::vector<Student>& students);

void quickSortData(std::vector<Student>& students, int low, int high);

#endif /* RECORDS_SORTER_H */
===== ./.vscode/tasks.json =====
{
    "tasks": [
        {
            "type": "cppbuild",
            "label": "C/C++: g++ build active file",
            "command": "/usr/bin/g++",
            "args": [
                "-fdiagnostics-color=always",
                "-g",
                "${file}",
                "-o",
                "${fileDirname}/${fileBasenameNoExtension}"
            ],
            "options": {
                "cwd": "${fileDirname}"
            },
            "problemMatcher": [
                "$gcc"
            ],
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "detail": "Task generated by Debugger."
        },
        {
            "type": "cppbuild",
            "label": "C/C++: gcc build active file",
            "command": "/usr/bin/gcc",
            "args": [
                "-fdiagnostics-color=always",
                "-g",
                "${file}",
                "-o",
                "${fileDirname}/${fileBasenameNoExtension}"
            ],
            "options": {
                "cwd": "${fileDirname}"
            },
            "problemMatcher": [
                "$gcc"
            ],
            "group": "build",
            "detail": "compiler: /usr/bin/gcc"
        }
    ],
    "version": "2.0.0"
}===== ./coin.cpp =====
#include <iostream>
#include <cstdlib>
#include <ctime>
#include <vector>
using namespace std;

class Coin {
private:
    string sideUp;

public:
    Coin() {
        srand(static_cast<unsigned int>(time(nullptr)));
        int toss = rand() % 2;
        if (toss == 0) {
            sideUp = "heads";
        } else {
            sideUp = "tails";
        }
    }

    string getSideUp() {
        return sideUp;
    }

    void toss() {
        int toss = rand() % 2;
        if (toss == 0) {
            sideUp = "heads";
        } else {
            sideUp = "tails";
        }
    }
};

int main() {
    int headCount = 0;
    int tailCount = 0;
    Coin c;
    vector<string> tossResults;
    cout << "Coin has '" << c.getSideUp()
         << "' facing up." << endl;
    tossResults.push_back(c.getSideUp());

    cout << "Randomizing coin toss, 20 times:" << endl;
    for (int i = 0; i < 20; i++) {
        c.toss();
        tossResults.push_back(c.getSideUp());
    }

    for (size_t i = 0; i < tossResults.size(); i++) {
        cout << i + 1 << ". " << tossResults[i] << endl;
        if (tossResults[i] == "heads") {
            headCount++;
        } else if (tossResults[i] == "tails") {
            tailCount++;
        }
    }

    cout << "Heads was facing up: " << headCount << endl;
    cout << "Tails was facing up: " << tailCount << endl;

    return 0;
}
===== ./cash_personal_data_report.csv =====
"Property","Value"
"Display Name","Joe  Rivas"
"Cashtag","joerivas801"
"Country","US"
"Postal Address","114 South 7th Street, Apt D, Donna, 78537, TX"
"Legal Name","Joe Rivas"
"Date of Birth","1986-12-29"
"Legal Address",""
"Customer Since","12/21/22 12:58 AM"
"Phone Number","9567152599"
"Cash App Balance","BTC 0E-8"
"Cash App Balance","USD 8.58"
"Cash Card","VISA ending in 8333"
===== ./Road.h =====
// Road.h
#ifndef ROAD_H
#define ROAD_H

#include <string>

class Road {
public:
    std::string name;
    int lanes;
    int speedLimit;

    Road(); 
    Road(const std::string& name, int lanes, int speedLimit);

    virtual ~Road();

    virtual void input();
    virtual void display() const;
};

class Toll : public Road {
public:
    int tollFee;

    Toll(); 
    Toll(const std::string& name, int lanes, int speedLimit, int tollFee);

    void input() override;
    void display() const override;
};

#endif

===== ./program5.c =====
#include <stdio.h>
#define STUDENTS 2
#define EXAMS 4

int min(const int grades[] [EXAMS], int pupils, int test);
int max(const int grades[] [EXAMS], int pupils, int test);
double average(const int setOfGrades [], int test);
void printArray(const int grades[][EXAMS], int pupils, int test);


int main (void){

int student;

const int studentGrades[STUDENTS][EXAMS]=
{{77, 68, 86, 73},
{96, 87, 89, 78},
{70, 90, 86, 81}};

printf("The array is:\n");
printArray(studentGrades, STUDENTS, EXAMS);

printf("\n\nLowest grade: %d\nHighest grade:%d\n",
min(studentGrades, STUDENTS, EXAMs),
max(studentGrades, STUDENTS, EXAMS));
    for(student = 0;student < STUDENTS; student++){
        printf("The average grade for student %d is %.2f\n"), 
        student, average(studentGrades[student], EXAMS));
    }
return 0;
}
int min(const int grades[][EXAMS], int pupils, int tests)
{
int i;
int j;
int lowGrade = 100;

for (i = 0; i < pupils; i++){
            
    for(j = 0; j < tests; j++){
            
        if( grades[i][j] < lowGrade ){
            lowGrade = grades[i][j];
            }
        }
    }
return lowGrade;
}
int min(const int grades[][EXAMS], int pupils, int tests)
{
int i;
int j;
int highGrade = 0;
for (i = 0; i < pupils; i++){
    for(j = 0; j < tests; j++){
        if(grades[i][j] > highGrade){
            highgrade = grades [i][j];
            }
        }
    }
return highGrade;
}     ===== ./Rational.h =====
// Rational.h
#ifndef _RATIONAL_H_
#define _RATIONAL_H_

class Rational {
private:
    int numerator;
    int denominator;

    int gcd(int a, int b);

public:
    Rational(int num = 0, int denom = 1); 
    Rational add(const Rational& other) const;
    Rational subtract(const Rational& other) const;
    Rational multiply(const Rational& other) const;
    Rational divide(const Rational& other) const;
    std::string toRationalString() const;
    void display() const;
    double toDouble() const;
};

#endif===== ./number.cpp =====
#include <iostream>
using namespace std;

int main() {
    const int SIZE = 20;
    int numbers[SIZE];
    int count = 0;

    for (int i = 0; i < SIZE; i++) {
        int num;
        bool occurrence = false;
        cout << "Enter a number between 1 and 20: ";
        cin >> num;

        while (num < 1 || num > 20) {
            cout << "Fatal error! Please try again: ";
            cin >> num;
        }

        for (int j = 0; j < count; j++) {
            if (numbers[j] == num) {
                occurrence = true;
                break;
            }
        }

        if (!occurrence) {
            numbers[count] = num;
            count++;
        }
    }

    cout << "Here's your ordered dictionary of numbers: \n";
    for (int i = 0; i < count; i++) {
        cout << numbers[i] << " ";
    }
    cout << endl;

    return 0;
}
